import{O as Ne,C as YA,R as at,T as Re,D as Ge,V as d,B as it,a as Ue,F as ht,M as On,b as gA,c as DA,d as Ft,Q as $,e as UA,f as Te,U as TA,g as VA,I as Ye,h as ut,i as Le,j as ze,k as rt,l as vA,W as Nt,N as mn,m as Je,L as qe,n as He,o as Rt,G as Gt,S as ZA,p as Ke,q as Pe,r as Ut,s as Xe,t as je,u as $A,v as Oe,P as Ve,w as Bt,x as Ct,y as Et,z as on,A as ft,E as Ze}from"../three-vendor-BZMI7BeI.js";const We=new Ne(-1,1,1,-1,0,1);class $e extends Ue{constructor(){super(),this.setAttribute("position",new ht([-1,3,0,-1,-1,0,3,-1,0],3)),this.setAttribute("uv",new ht([0,2,0,0,2,0],2))}}const As=new $e;class Tt{constructor(A){this._mesh=new On(As,A)}dispose(){this._mesh.geometry.dispose()}render(A){A.render(this._mesh,We)}get material(){return this._mesh.material}set material(A){this._mesh.material=A}}var L=Uint8Array,en=Uint16Array,ns=Int32Array,Yt=new L([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),Lt=new L([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),ts=new L([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),zt=function(e,A){for(var n=new en(31),t=0;t<31;++t)n[t]=A+=1<<e[t-1];for(var s=new ns(n[30]),t=1;t<30;++t)for(var a=n[t];a<n[t+1];++a)s[a]=a-n[t]<<5|t;return{b:n,r:s}},Jt=zt(Yt,2),qt=Jt.b,es=Jt.r;qt[28]=258,es[258]=28;var ss=zt(Lt,0),as=ss.b,Ht=new en(32768);for(var k=0;k<32768;++k){var SA=(k&43690)>>1|(k&21845)<<1;SA=(SA&52428)>>2|(SA&13107)<<2,SA=(SA&61680)>>4|(SA&3855)<<4,Ht[k]=((SA&65280)>>8|(SA&255)<<8)>>1}var sn=function(e,A,n){for(var t=e.length,s=0,a=new en(A);s<t;++s)e[s]&&++a[e[s]-1];var i=new en(A);for(s=1;s<A;++s)i[s]=i[s-1]+a[s-1]<<1;var r;{r=new en(1<<A);var l=15-A;for(s=0;s<t;++s)if(e[s])for(var o=s<<4|e[s],c=A-e[s],g=i[e[s]-1]++<<c,I=g|(1<<c)-1;g<=I;++g)r[Ht[g]>>l]=o}return r},In=new L(288);for(var k=0;k<144;++k)In[k]=8;for(var k=144;k<256;++k)In[k]=9;for(var k=256;k<280;++k)In[k]=7;for(var k=280;k<288;++k)In[k]=8;var Kt=new L(32);for(var k=0;k<32;++k)Kt[k]=5;var is=sn(In,9),rs=sn(Kt,5),Gn=function(e){for(var A=e[0],n=1;n<e.length;++n)e[n]>A&&(A=e[n]);return A},rA=function(e,A,n){var t=A/8|0;return(e[t]|e[t+1]<<8)>>(A&7)&n},Un=function(e,A){var n=A/8|0;return(e[n]|e[n+1]<<8|e[n+2]<<16)>>(A&7)},Pt=function(e){return(e+7)/8|0},WA=function(e,A,n){return(A==null||A<0)&&(A=0),(n==null||n>e.length)&&(n=e.length),new L(e.subarray(A,n))},os=["unexpected EOF","invalid block type","invalid length/literal","invalid distance","stream finished","no stream handler",,"no callback","invalid UTF-8 data","extra field too long","date not in range 1980-2099","filename too long","stream finishing","invalid zip data"],P=function(e,A,n){var t=new Error(A||os[e]);if(t.code=e,Error.captureStackTrace&&Error.captureStackTrace(t,P),!n)throw t;return t},Xt=function(e,A,n,t){var s=e.length,a=t?t.length:0;if(!s||A.f&&!A.l)return n||new L(0);var i=!n,r=i||A.i!=2,l=A.i;i&&(n=new L(s*3));var o=function(iA){var wA=n.length;if(iA>wA){var xA=new L(Math.max(wA*2,iA));xA.set(n),n=xA}},c=A.f||0,g=A.p||0,I=A.b||0,B=A.l,C=A.d,h=A.m,u=A.n,E=s*8;do{if(!B){c=rA(e,g,1);var Q=rA(e,g+1,3);if(g+=3,Q)if(Q==1)B=is,C=rs,h=9,u=5;else if(Q==2){var w=rA(e,g,31)+257,m=rA(e,g+10,15)+4,x=w+rA(e,g+5,31)+1;g+=14;for(var D=new L(x),N=new L(19),M=0;M<m;++M)N[ts[M]]=rA(e,g+M*3,7);g+=m*3;for(var _=Gn(N),tA=(1<<_)-1,O=sn(N,_),M=0;M<x;){var V=O[rA(e,g,tA)];g+=V&15;var f=V>>4;if(f<16)D[M++]=f;else{var F=0,T=0;for(f==16?(T=3+rA(e,g,3),g+=2,F=D[M-1]):f==17?(T=3+rA(e,g,7),g+=3):f==18&&(T=11+rA(e,g,127),g+=7);T--;)D[M++]=F}}var Z=D.subarray(0,w),Y=D.subarray(w);h=Gn(Z),u=Gn(Y),B=sn(Z,h),C=sn(Y,u)}else P(1);else{var f=Pt(g)+4,p=e[f-4]|e[f-3]<<8,y=f+p;if(y>s){l&&P(0);break}r&&o(I+p),n.set(e.subarray(f,y),I),A.b=I+=p,A.p=g=y*8,A.f=c;continue}if(g>E){l&&P(0);break}}r&&o(I+131072);for(var eA=(1<<h)-1,H=(1<<u)-1,cA=g;;cA=g){var F=B[Un(e,g)&eA],W=F>>4;if(g+=F&15,g>E){l&&P(0);break}if(F||P(2),W<256)n[I++]=W;else if(W==256){cA=g,B=null;break}else{var EA=W-254;if(W>264){var M=W-257,sA=Yt[M];EA=rA(e,g,(1<<sA)-1)+qt[M],g+=sA}var IA=C[Un(e,g)&H],b=IA>>4;IA||P(3),g+=IA&15;var Y=as[b];if(b>3){var sA=Lt[b];Y+=Un(e,g)&(1<<sA)-1,g+=sA}if(g>E){l&&P(0);break}r&&o(I+131072);var hA=I+EA;if(I<Y){var aA=a-Y,fA=Math.min(Y,hA);for(aA+I<0&&P(3);I<fA;++I)n[I]=t[aA+I]}for(;I<hA;++I)n[I]=n[I-Y]}}A.l=B,A.p=cA,A.b=I,A.f=c,B&&(c=1,A.m=h,A.d=C,A.n=u)}while(!c);return I!=n.length&&i?WA(n,0,I):n.subarray(0,I)},gs=new L(0),uA=function(e,A){return e[A]|e[A+1]<<8},oA=function(e,A){return(e[A]|e[A+1]<<8|e[A+2]<<16|e[A+3]<<24)>>>0},Tn=function(e,A){return oA(e,A)+oA(e,A+4)*4294967296},ls=function(e){(e[0]!=31||e[1]!=139||e[2]!=8)&&P(6,"invalid gzip data");var A=e[3],n=10;A&4&&(n+=(e[10]|e[11]<<8)+2);for(var t=(A>>3&1)+(A>>4&1);t>0;t-=!e[n++]);return n+(A&2)},Yn=(function(){function e(A,n){typeof A=="function"&&(n=A,A={}),this.ondata=n;var t=A&&A.dictionary&&A.dictionary.subarray(-32768);this.s={i:0,b:t?t.length:0},this.o=new L(32768),this.p=new L(0),t&&this.o.set(t)}return e.prototype.e=function(A){if(this.ondata||P(5),this.d&&P(4),!this.p.length)this.p=A;else if(A.length){var n=new L(this.p.length+A.length);n.set(this.p),n.set(A,this.p.length),this.p=n}},e.prototype.c=function(A){this.s.i=+(this.d=A||!1);var n=this.s.b,t=Xt(this.p,this.s,this.o);this.ondata(WA(t,n,this.s.b),this.d),this.o=WA(t,this.s.b-32768),this.s.b=this.o.length,this.p=WA(this.p,this.s.p/8|0),this.s.p&=7},e.prototype.push=function(A,n){this.e(A),this.c(n)},e})();function cs(e,A){return Xt(e,{i:2},A&&A.out,A&&A.dictionary)}var Is=(function(){function e(A,n){this.v=1,this.r=0,Yn.call(this,A,n)}return e.prototype.push=function(A,n){if(Yn.prototype.e.call(this,A),this.r+=A.length,this.v){var t=this.p.subarray(this.v-1),s=t.length>3?ls(t):4;if(s>t.length){if(!n)return}else this.v>1&&this.onmember&&this.onmember(this.r-t.length);this.p=t.subarray(s),this.v=0}Yn.prototype.c.call(this,n),this.s.f&&!this.s.l&&!n&&(this.v=Pt(this.s.p)+9,this.s={i:0},this.o=new L(0),this.push(new L(0),n))},e})(),Vn=typeof TextDecoder<"u"&&new TextDecoder,hs=0;try{Vn.decode(gs,{stream:!0}),hs=1}catch{}var us=function(e){for(var A="",n=0;;){var t=e[n++],s=(t>127)+(t>223)+(t>239);if(n+s>e.length)return{s:A,r:WA(e,n-1)};s?s==3?(t=((t&15)<<18|(e[n++]&63)<<12|(e[n++]&63)<<6|e[n++]&63)-65536,A+=String.fromCharCode(55296|t>>10,56320|t&1023)):s&1?A+=String.fromCharCode((t&31)<<6|e[n++]&63):A+=String.fromCharCode((t&15)<<12|(e[n++]&63)<<6|e[n++]&63):A+=String.fromCharCode(t)}};function Bs(e,A){if(A){for(var n="",t=0;t<e.length;t+=16384)n+=String.fromCharCode.apply(null,e.subarray(t,t+16384));return n}else{if(Vn)return Vn.decode(e);var s=us(e),a=s.s,n=s.r;return n.length&&P(8),a}}var Cs=function(e,A){return A+30+uA(e,A+26)+uA(e,A+28)},Es=function(e,A,n){var t=uA(e,A+28),s=Bs(e.subarray(A+46,A+46+t),!(uA(e,A+8)&2048)),a=A+46+t,i=oA(e,A+20),r=n&&i==4294967295?fs(e,a):[i,oA(e,A+24),oA(e,A+42)],l=r[0],o=r[1],c=r[2];return[uA(e,A+10),l,o,s,a+uA(e,A+30)+uA(e,A+32),c]},fs=function(e,A){for(;uA(e,A)!=1;A+=4+uA(e,A+2));return[Tn(e,A+12),Tn(e,A+4),Tn(e,A+20)]};function Qs(e,A){for(var n={},t=e.length-22;oA(e,t)!=101010256;--t)(!t||e.length-t>65558)&&P(13);var s=uA(e,t+8);if(!s)return{};var a=oA(e,t+16),i=a==4294967295||s==65535;if(i){var r=oA(e,t-12);i=oA(e,r)==101075792,i&&(s=oA(e,r+32),a=oA(e,r+48))}for(var l=A&&A.filter,o=0;o<s;++o){var c=Es(e,a,i),g=c[0],I=c[1],B=c[2],C=c[3],h=c[4],u=c[5],E=Cs(e,u);a=h,(!l||l({name:C,size:I,originalSize:B,compression:g}))&&(g?g==8?n[C]=cs(e.subarray(E,E+I),{out:new L(B)}):P(14,"unknown compression type "+g):n[C]=WA(e,E,E+I))}return n}let dA;const jt=typeof TextDecoder<"u"?new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0}):{decode:()=>{throw Error("TextDecoder not available")}};typeof TextDecoder<"u"&&jt.decode();let An=null;function ds(){return(An===null||An.byteLength===0)&&(An=new Uint8Array(dA.memory.buffer)),An}function ps(e,A){return e=e>>>0,jt.decode(ds().subarray(e,e+A))}function ys(e,A,n,t,s,a,i,r,l,o,c,g,I){return dA.raycast_splats(e,A,n,t,s,a,i,r,l,o,c,g,I)}async function ms(e,A){if(typeof Response=="function"&&e instanceof Response){if(typeof WebAssembly.instantiateStreaming=="function")try{return await WebAssembly.instantiateStreaming(e,A)}catch(t){if(e.headers.get("Content-Type")!="application/wasm")console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",t);else throw t}const n=await e.arrayBuffer();return await WebAssembly.instantiate(n,A)}else{const n=await WebAssembly.instantiate(e,A);return n instanceof WebAssembly.Instance?{instance:n,module:e}:n}}function ws(){const e={};return e.wbg={},e.wbg.__wbg_buffer_609cc3eee51ed158=function(A){return A.buffer},e.wbg.__wbg_length_3b4f022188ae8db6=function(A){return A.length},e.wbg.__wbg_length_6ca527665d89694d=function(A){return A.length},e.wbg.__wbg_length_8cfd2c6409af88ad=function(A){return A.length},e.wbg.__wbg_new_9fee97a409b32b68=function(A){return new Uint16Array(A)},e.wbg.__wbg_new_e3b321dcfef89fc7=function(A){return new Uint32Array(A)},e.wbg.__wbg_newwithbyteoffsetandlength_e6b7e69acd4c7354=function(A,n,t){return new Float32Array(A,n>>>0,t>>>0)},e.wbg.__wbg_newwithbyteoffsetandlength_f1dead44d1fc7212=function(A,n,t){return new Uint32Array(A,n>>>0,t>>>0)},e.wbg.__wbg_newwithlength_5a5efe313cfd59f1=function(A){return new Float32Array(A>>>0)},e.wbg.__wbg_set_10bad9bee0e9c58b=function(A,n,t){A.set(n,t>>>0)},e.wbg.__wbg_set_d23661d19148b229=function(A,n,t){A.set(n,t>>>0)},e.wbg.__wbg_set_f4f1f0daa30696fc=function(A,n,t){A.set(n,t>>>0)},e.wbg.__wbg_subarray_3aaeec89bb2544f0=function(A,n,t){return A.subarray(n>>>0,t>>>0)},e.wbg.__wbg_subarray_769e1e0f81bb259b=function(A,n,t){return A.subarray(n>>>0,t>>>0)},e.wbg.__wbindgen_init_externref_table=function(){const A=dA.__wbindgen_export_0,n=A.grow(4);A.set(0,void 0),A.set(n+0,void 0),A.set(n+1,null),A.set(n+2,!0),A.set(n+3,!1)},e.wbg.__wbindgen_memory=function(){return dA.memory},e.wbg.__wbindgen_throw=function(A,n){throw new Error(ps(A,n))},e}function xs(e,A){return dA=e.exports,Ot.__wbindgen_wasm_module=A,An=null,dA.__wbindgen_start(),dA}async function Ot(e){if(dA!==void 0)return dA;typeof e<"u"&&(Object.getPrototypeOf(e)===Object.prototype?{module_or_path:e}=e:console.warn("using deprecated parameters for the initialization function; pass a single object instead")),typeof e>"u"&&(e=new URL("data:application/wasm;base64,",import.meta.url));const A=ws();(typeof e=="string"||typeof Request=="function"&&e instanceof Request||typeof URL=="function"&&e instanceof URL)&&(e=fetch(e));const{instance:n,module:t}=await ms(await e,A);return xs(n,t)}const pA=-12,yA=9,Ss=-30,Ln=Math.exp(Ss),bs=11,Ds=11,v=1<<bs,FA=1<<Ds,vs=1;function Ms(e){return e==="bool"||e==="bvec2"||e==="bvec3"||e==="bvec4"}function NA(e){return e==="int"||e==="ivec2"||e==="ivec3"||e==="ivec4"}function RA(e){return e==="uint"||e==="uvec2"||e==="uvec3"||e==="uvec4"}function ks(e){return e==="float"||e==="vec2"||e==="vec3"||e==="vec4"}function _s(e){return e==="mat2"||e==="mat2x2"||e==="mat2x3"||e==="mat2x4"||e==="mat3"||e==="mat3x2"||e==="mat3x3"||e==="mat3x4"||e==="mat4"||e==="mat4x2"||e==="mat4x3"||e==="mat4x4"}function gn(e){return ks(e)||_s(e)}function KA(e){return e==="mat2"||e==="mat2x2"}function PA(e){return e==="mat3"||e==="mat3x3"}function XA(e){return e==="mat4"||e==="mat4x4"}function Fs(e){switch(e){case"vec2":return"float";case"vec3":return"float";case"vec4":return"float";case"ivec2":return"int";case"ivec3":return"int";case"ivec4":return"int";case"uvec2":return"uint";case"uvec3":return"uint";case"uvec4":return"uint";default:throw new Error(`Invalid vector type: ${e}`)}}function Ns(e){switch(e){case"vec2":case"ivec2":case"uvec2":return 2;case"vec3":case"ivec3":case"uvec3":return 3;case"vec4":case"ivec4":case"uvec4":return 4;default:throw new Error(`Invalid vector type: ${e}`)}}function R(e){return Math.trunc(e).toString()}function G(e){return`${Math.max(0,Math.trunc(e)).toString()}u`}function S(e){return e===Number.POSITIVE_INFINITY?"INFINITY":e===Number.NEGATIVE_INFINITY?"-INFINITY":Number.isInteger(e)?e.toFixed(1):e.toString()}function QA(e){return e instanceof GA?e.type:e.dynoOut().type}class GA{constructor(A){this.__isDynoValue=!0,this.type=A}}class X extends GA{constructor(A,n){super(A.outTypes[n]),this.dyno=A,this.key=n}}class dn extends GA{constructor(A,n){super(A),this.literal=n}getLiteral(){return this.literal}}class Rs extends dn{constructor(A,n){super(A,""),this.value=n}getLiteral(){const{type:A,value:n}=this;switch(A){case"bool":return n?"true":"false";case"uint":return G(n);case"int":return R(n);case"float":return S(n);case"bvec2":{const t=n;return`bvec2(${t[0]}, ${t[1]})`}case"uvec2":{if(n instanceof vA)return`uvec2(${G(n.x)}, ${G(n.y)})`;const t=n;return`uvec2(${G(t[0])}, ${G(t[1])})`}case"ivec2":{if(n instanceof vA)return`ivec2(${R(n.x)}, ${R(n.y)})`;const t=n;return`ivec2(${R(t[0])}, ${R(t[1])})`}case"vec2":{if(n instanceof vA)return`vec2(${S(n.x)}, ${S(n.y)})`;const t=n;return`vec2(${S(t[0])}, ${S(t[1])})`}case"bvec3":{const t=n;return`bvec3(${t[0]}, ${t[1]}, ${t[2]})`}case"uvec3":{if(n instanceof d)return`uvec3(${G(n.x)}, ${G(n.y)}, ${G(n.z)})`;const t=n;return`uvec3(${G(t[0])}, ${G(t[1])}, ${G(t[2])})`}case"ivec3":{if(n instanceof d)return`ivec3(${R(n.x)}, ${R(n.y)}, ${R(n.z)})`;const t=n;return`ivec3(${R(t[0])}, ${R(t[1])}, ${R(t[2])})`}case"vec3":{if(n instanceof d)return`vec3(${S(n.x)}, ${S(n.y)}, ${S(n.z)})`;const t=n;return`vec3(${S(t[0])}, ${S(t[1])}, ${S(t[2])})`}case"bvec4":{const t=n;return`bvec4(${t[0]}, ${t[1]}, ${t[2]}, ${t[3]})`}case"uvec4":{if(n instanceof gA)return`uvec4(${G(n.x)}, ${G(n.y)}, ${G(n.z)}, ${G(n.w)})`;const t=n;return`uvec4(${G(t[0])}, ${G(t[1])}, ${G(t[2])}, ${G(t[3])})`}case"ivec4":{if(n instanceof gA)return`ivec4(${R(n.x)}, ${R(n.y)}, ${R(n.z)}, ${R(n.w)})`;const t=n;return`ivec4(${R(t[0])}, ${R(t[1])}, ${R(t[2])}, ${R(t[3])})`}case"vec4":{if(n instanceof gA)return`vec4(${S(n.x)}, ${S(n.y)}, ${S(n.z)}, ${S(n.w)})`;if(n instanceof $)return`vec4(${S(n.x)}, ${S(n.y)}, ${S(n.z)}, ${S(n.w)})`;const t=n;return`vec4(${S(t[0])}, ${S(t[1])}, ${S(t[2])}, ${S(t[3])})`}case"mat2":case"mat2x2":{const t=n,s=t instanceof Rt?t.elements:n,a=new Array(4).fill(0).map((i,r)=>S(s[r]));return`${A}(${a.join(", ")})`}case"mat2x3":{const t=n,s=new Array(6).fill(0).map((a,i)=>S(t[i]));return`${A}(${s.join(", ")})`}case"mat2x4":{const t=n,s=new Array(8).fill(0).map((a,i)=>S(t[i]));return`${A}(${s.join(", ")})`}case"mat3":case"mat3x3":{const t=n,s=t instanceof Ft?t.elements:n,a=new Array(9).fill(0).map((i,r)=>S(s[r]));return`${A}(${a.join(", ")})`}case"mat3x2":{const t=n,s=new Array(6).fill(0).map((a,i)=>S(t[i]));return`${A}(${s.join(", ")})`}case"mat3x4":{const t=n,s=new Array(12).fill(0).map((a,i)=>S(t[i]));return`${A}(${s.join(", ")})`}case"mat4":case"mat4x4":{const t=n,s=t instanceof DA?t.elements:n,a=new Array(16).fill(0).map((i,r)=>S(s[r]));return`${A}(${a.join(", ")})`}case"mat4x2":{const t=n,s=new Array(8).fill(0).map((a,i)=>S(t[i]));return`${A}(${s.join(", ")})`}case"mat4x3":{const t=n,s=new Array(12).fill(0).map((a,i)=>S(t[i]));return`${A}(${s.join(", ")})`}default:throw new Error(`Type not implemented: ${String(A)}`)}}}function an(e,A){return new Rs(e,A)}function un(e){const A=String(e);if(Ms(e))return`${A}(false)`;if(gn(e))return`${A}(0.0)`;if(NA(e))return`${A}(0)`;if(RA(e))return`${A}(0u)`;throw new Error(`Type not implemented: ${A}`)}const Qt="    ";class Gs{constructor({indent:A}={}){this.globals=new Set,this.statements=[],this.uniforms={},this.declares=new Set,this.updaters=[],this.sequence=0,this.indent=Qt,this.indent=A??Qt}nextSequence(){return this.sequence++}}class z{constructor({inTypes:A,outTypes:n,inputs:t,update:s,globals:a,statements:i,generate:r}){this.inTypes=A??{},this.outTypes=n??{},this.inputs=t??{},this.update=s,this.globals=a,this.statements=i,this.generate=r??(({inputs:l,outputs:o,compile:c})=>{var g,I;return{globals:(g=this.globals)==null?void 0:g.call(this,{inputs:l,outputs:o,compile:c}),statements:(I=this.statements)==null?void 0:I.call(this,{inputs:l,outputs:o,compile:c})}})}get outputs(){const A={};for(const n in this.outTypes)A[n]=new X(this,n);return A}apply(A){return Object.assign(this.inputs,A),this.outputs}compile({inputs:A,outputs:n,compile:t}){const s=[`// ${this.constructor.name}(${Object.values(A).join(", ")}) => (${Object.values(n).join(", ")})`],a=[];for(const o in n){const c=n[o];c&&!t.declares.has(c)&&(t.declares.add(c),a.push(o))}const{globals:i,statements:r,uniforms:l}=this.generate({inputs:A,outputs:n,compile:t});for(const o of i??[])t.globals.add(o);for(const o in l)t.uniforms[o]=l[o];this.update&&t.updaters.push(this.update);for(const o of a){const c=n[o];c&&(t.uniforms[c]||s.push(`${Vt(c,this.outTypes[o])};`))}return r!=null&&r.length&&(s.push("{"),s.push(...r.map(o=>t.indent+o)),s.push("}")),s}}class Us extends z{constructor({inTypes:A,outTypes:n,inputs:t,update:s,globals:a,construct:i}){super({inTypes:A,outTypes:n,inputs:t,update:s,globals:a,generate:r=>this.generateBlock(r)}),this.construct=i}generateBlock({inputs:A,outputs:n,compile:t}){var s,a;const i={},r={};for(const u in A)A[u]!=null&&(i[u]=new dn(this.inTypes[u],A[u]));for(const u in n)n[u]!=null&&(r[u]=new GA(this.outTypes[u]));const l={roots:[]},o=this.construct(i,r,l);for(const u of((s=this.globals)==null?void 0:s.call(this,{inputs:A,outputs:n,compile:t}))??[])t.globals.add(u);const c=[],g=new Map;function I(u,E,Q){let f=g.get(u);if(!f){f={sequence:t.nextSequence(),outNames:new Map,newOuts:new Set},g.set(u,f);for(const p in u.inputs){let y=u.inputs[p];for(;y;){if(y instanceof GA){y instanceof X&&I(y.dyno,y.key);break}y=y.dynoOut()}}c.push(u)}E&&(Q||f.newOuts.add(E),f.outNames.set(E,Q??`${E}_${f.sequence}`))}for(const u of l.roots)I(u);for(const u in r){let E=(o==null?void 0:o[u])??r[u];for(;E;){if(E instanceof GA){E instanceof X&&I(E.dyno,E.key,n[u]);break}E=E.dynoOut()}r[u]=E}const B=[];for(const u of c){const E={},Q={};for(const y in u.inputs){let w=u.inputs[y];for(;w;){if(w instanceof GA){if(w instanceof dn)E[y]=w.getLiteral();else if(w instanceof X){const m=(a=g.get(w.dyno))==null?void 0:a.outNames.get(w.key);if(!m)throw new Error(`Source not found for ${w.dyno.constructor.name}.${w.key}`);E[y]=m}break}w=w.dynoOut()}}const f=g.get(u)??{outNames:new Map};for(const[y,w]of f.outNames.entries())Q[y]=w;const p=u.compile({inputs:E,outputs:Q,compile:t});B.push(p)}const C=[];for(const u in n)r[u]instanceof dn&&C.push(`${n[u]} = ${r[u].getLiteral()};`);return C.length>0&&B.push(C),{statements:B.flatMap((u,E)=>E===0?u:["",...u])}}}function mA(e,A,n,{update:t,globals:s}={}){return new Us({inTypes:e,outTypes:A,construct:n,update:t,globals:s})}function bn({inTypes:e,outTypes:A,inputs:n,update:t,globals:s,statements:a,generate:i}){return new z({inTypes:e,outTypes:A,inputs:n,update:t,globals:s,statements:a,generate:i})}function Vt(e,A,n){const t=typeof A=="string"?A:A.type;if(!t)throw new Error(`Invalid DynoType: ${String(A)}`);return`${t} ${e}${n!=null?`[${n}]`:""}`}function BA(e){var A;let n=!1;const t=e.split(`
`).map(i=>{const r=i.trimEnd();return n?r:r.length>0?(n=!0,r):null}).filter(i=>i!=null);for(;t.length>0&&t[t.length-1].length===0;)t.pop();if(t.length===0)return[];const s=(A=t[0].match(/^\s*/))==null?void 0:A[0];if(!s)return t;const a=new RegExp(`^${s}`);return t.map(i=>i.replace(a,""))}function j(e){return BA(e).join(`
`)}class Dn extends z{constructor({a:A,outKey:n,outTypeFunc:t}){const s={a:QA(A)},a=t(QA(A)),i={[n]:a};super({inTypes:s,outTypes:i,inputs:{a:A}}),this.outKey=n}dynoOut(){return new X(this,this.outKey)}}class vn extends z{constructor({a:A,b:n,outKey:t,outTypeFunc:s}){const a={a:QA(A),b:QA(n)},i=s(QA(A),QA(n)),r={[t]:i};super({inTypes:a,outTypes:r,inputs:{a:A,b:n}}),this.outKey=t}dynoOut(){return new X(this,this.outKey)}}const U={type:"Gsplat"},Mn={type:"PackedSplats"},rn=(e,A)=>new Ys({packedSplats:e,index:A}),Ts=(e,A,n,t)=>new Ls({packedSplats:e,index:A,base:n,count:t}),pn=e=>new zs({gsplat:e}),zn=({gsplat:e,flags:A,index:n,center:t,scales:s,quaternion:a,rgba:i,rgb:r,opacity:l,x:o,y:c,z:g,r:I,g:B,b:C})=>new Js({gsplat:e,flags:A,index:n,center:t,scales:s,quaternion:a,rgba:i,rgb:r,opacity:l,x:o,y:c,z:g,r:I,g:B,b:C}),Zt=(e,{scale:A,rotate:n,translate:t,recolor:s})=>new qs({gsplat:e,scale:A,rotate:n,translate:t,recolor:s}),CA=j(`
  struct Gsplat {
    vec3 center;
    uint flags;
    vec3 scales;
    int index;
    vec4 quaternion;
    vec4 rgba;
  };
  const uint GSPLAT_FLAG_ACTIVE = 1u << 0u;

  bool isGsplatActive(uint flags) {
    return (flags & GSPLAT_FLAG_ACTIVE) != 0u;
  }
`),ot=j(`
  struct PackedSplats {
    usampler2DArray texture;
    int numSplats;
    vec4 rgbMinMaxLnScaleMinMax;
  };
`),Wt=j(`
  bool readPackedSplat(usampler2DArray texture, int numSplats, vec4 rgbMinMaxLnScaleMinMax, int index, out Gsplat gsplat) {
    if ((index >= 0) && (index < numSplats)) {
      uvec4 packed = texelFetch(texture, splatTexCoord(index), 0);
      unpackSplatEncoding(packed, gsplat.center, gsplat.scales, gsplat.quaternion, gsplat.rgba, rgbMinMaxLnScaleMinMax);
      return true;
    } else {
      return false;
    }
  }
`);class Ys extends z{constructor({packedSplats:A,index:n}){super({inTypes:{packedSplats:Mn,index:"int"},outTypes:{gsplat:U},inputs:{packedSplats:A,index:n},globals:()=>[CA,ot,Wt],statements:({inputs:t,outputs:s})=>{const{gsplat:a}=s;if(!a)return[];const{packedSplats:i,index:r}=t;let l;return i&&r?l=BA(`
            if (readPackedSplat(${i}.texture, ${i}.numSplats, ${i}.rgbMinMaxLnScaleMinMax, ${r}, ${a})) {
              bool zeroSize = all(equal(${a}.scales, vec3(0.0, 0.0, 0.0)));
              ${a}.flags = zeroSize ? 0u : GSPLAT_FLAG_ACTIVE;
            } else {
              ${a}.flags = 0u;
            }
          `):l=[`${a}.flags = 0u;`],l.push(`${a}.index = ${r??"0"};`),l}})}dynoOut(){return new X(this,"gsplat")}}class Ls extends z{constructor({packedSplats:A,index:n,base:t,count:s}){super({inTypes:{packedSplats:Mn,index:"int",base:"int",count:"int"},outTypes:{gsplat:U},inputs:{packedSplats:A,index:n,base:t,count:s},globals:()=>[CA,ot,Wt],statements:({inputs:a,outputs:i})=>{const{gsplat:r}=i;if(!r)return[];const{packedSplats:l,index:o,base:c,count:g}=a;let I;return l&&o&&c&&g?I=BA(`
            ${r}.flags = 0u;
            if ((${o} >= ${c}) && (${o} < (${c} + ${g}))) {
              if (readPackedSplat(${l}.texture, ${l}.numSplats, ${l}.rgbMinMaxLnScaleMinMax, ${o}, ${r})) {
                bool zeroSize = all(equal(${r}.scales, vec3(0.0, 0.0, 0.0)));
                ${r}.flags = zeroSize ? 0u : GSPLAT_FLAG_ACTIVE;
              }
            }
          `):I=[`${r}.flags = 0u;`],I.push(`${r}.index = ${o??"0"};`),I}})}dynoOut(){return new X(this,"gsplat")}}class zs extends z{constructor({gsplat:A}){super({inTypes:{gsplat:U},outTypes:{flags:"uint",active:"bool",index:"int",center:"vec3",scales:"vec3",quaternion:"vec4",rgba:"vec4",rgb:"vec3",opacity:"float",x:"float",y:"float",z:"float",r:"float",g:"float",b:"float"},inputs:{gsplat:A},globals:()=>[CA],statements:({inputs:n,outputs:t})=>{const{gsplat:s}=n,{flags:a,active:i,index:r,center:l,scales:o,quaternion:c,rgba:g,rgb:I,opacity:B,x:C,y:h,z:u,r:E,g:Q,b:f}=t;return[a?`${a} = ${s?`${s}.flags`:"0u"};`:null,i?`${i} = isGsplatActive(${s?`${s}.flags`:"0u"});`:null,r?`${r} = ${s?`${s}.index`:"0"};`:null,l?`${l} = ${s?`${s}.center`:"vec3(0.0, 0.0, 0.0)"};`:null,o?`${o} = ${s?`${s}.scales`:"vec3(0.0, 0.0, 0.0)"};`:null,c?`${c} = ${s?`${s}.quaternion`:"vec4(0.0, 0.0, 0.0, 1.0)"};`:null,g?`${g} = ${s?`${s}.rgba`:"vec4(0.0, 0.0, 0.0, 0.0)"};`:null,I?`${I} = ${s?`${s}.rgba.rgb`:"vec3(0.0, 0.0, 0.0)"};`:null,B?`${B} = ${s?`${s}.rgba.a`:"0.0"};`:null,C?`${C} = ${s?`${s}.center.x`:"0.0"};`:null,h?`${h} = ${s?`${s}.center.y`:"0.0"};`:null,u?`${u} = ${s?`${s}.center.z`:"0.0"};`:null,E?`${E} = ${s?`${s}.rgba.r`:"0.0"};`:null,Q?`${Q} = ${s?`${s}.rgba.g`:"0.0"};`:null,f?`${f} = ${s?`${s}.rgba.b`:"0.0"};`:null].filter(Boolean)}})}}class Js extends z{constructor({gsplat:A,flags:n,index:t,center:s,scales:a,quaternion:i,rgba:r,rgb:l,opacity:o,x:c,y:g,z:I,r:B,g:C,b:h}){super({inTypes:{gsplat:U,flags:"uint",index:"int",center:"vec3",scales:"vec3",quaternion:"vec4",rgba:"vec4",rgb:"vec3",opacity:"float",x:"float",y:"float",z:"float",r:"float",g:"float",b:"float"},outTypes:{gsplat:U},inputs:{gsplat:A,flags:n,index:t,center:s,scales:a,quaternion:i,rgba:r,rgb:l,opacity:o,x:c,y:g,z:I,r:B,g:C,b:h},globals:()=>[CA],statements:({inputs:u,outputs:E})=>{const{gsplat:Q}=E;if(!Q)return[];const{gsplat:f,flags:p,index:y,center:w,scales:m,quaternion:x,rgba:D,rgb:N,opacity:M,x:_,y:tA,z:O,r:V,g:F,b:T}=u;return[`${Q}.flags = ${p??(f?`${f}.flags`:"0u")};`,`${Q}.index = ${y??(f?`${f}.index`:"0")};`,`${Q}.center = ${w??(f?`${f}.center`:"vec3(0.0, 0.0, 0.0)")};`,`${Q}.scales = ${m??(f?`${f}.scales`:"vec3(0.0, 0.0, 0.0)")};`,`${Q}.quaternion = ${x??(f?`${f}.quaternion`:"vec4(0.0, 0.0, 0.0, 1.0)")};`,`${Q}.rgba = ${D??(f?`${f}.rgba`:"vec4(0.0, 0.0, 0.0, 0.0)")};`,N?`${Q}.rgba.rgb = ${N};`:null,M?`${Q}.rgba.a = ${M};`:null,_?`${Q}.center.x = ${_};`:null,tA?`${Q}.center.y = ${tA};`:null,O?`${Q}.center.z = ${O};`:null,V?`${Q}.rgba.r = ${V};`:null,F?`${Q}.rgba.g = ${F};`:null,T?`${Q}.rgba.b = ${T};`:null].filter(Boolean)}})}dynoOut(){return new X(this,"gsplat")}}j(`
  vec3 gsplatNormal(vec3 scales, vec4 quaternion) {
    float minScale = min(scales.x, min(scales.y, scales.z));
    vec3 normal;
    if (scales.z == minScale) {
      normal = vec3(0.0, 0.0, 1.0);
    } else if (scales.y == minScale) {
      normal = vec3(0.0, 1.0, 0.0);
    } else {
      normal = vec3(1.0, 0.0, 0.0);
    }
    return quatVec(quaternion, normal);
  }
`);class qs extends z{constructor({gsplat:A,scale:n,rotate:t,translate:s,recolor:a}){super({inTypes:{gsplat:U,scale:"float",rotate:"vec4",translate:"vec3",recolor:"vec4"},outTypes:{gsplat:U},inputs:{gsplat:A,scale:n,rotate:t,translate:s,recolor:a},globals:()=>[CA],statements:({inputs:i,outputs:r,compile:l})=>{const{gsplat:o}=r;if(!o||!i.gsplat)return[];const{scale:c,rotate:g,translate:I,recolor:B}=i,C=l.indent;return[`${o} = ${i.gsplat};`,`if (isGsplatActive(${o}.flags)) {`,c?`${C}${o}.center *= ${c};`:null,g?`${C}${o}.center = quatVec(${g}, ${o}.center);`:null,I?`${C}${o}.center += ${I};`:null,c?`${C}${o}.scales *= ${c};`:null,g?`${C}${o}.quaternion = quatQuat(${g}, ${o}.quaternion);`:null,B?`${C}${o}.rgba *= ${B};`:null,"}"].filter(Boolean)}})}dynoOut(){return new X(this,"gsplat")}}const Hs=(e,A)=>new Ks({gsplat:e,rgbMinMaxLnScaleMinMax:A});class Ks extends z{constructor({gsplat:A,rgbMinMaxLnScaleMinMax:n}){super({inTypes:{gsplat:U,rgbMinMaxLnScaleMinMax:"vec4"},inputs:{gsplat:A,rgbMinMaxLnScaleMinMax:n},globals:()=>[CA],statements:({inputs:t,outputs:s})=>{const{output:a}=s;if(!a)return[];const{gsplat:i,rgbMinMaxLnScaleMinMax:r}=t;return i?BA(`
            if (isGsplatActive(${i}.flags)) {
              ${a} = packSplatEncoding(${i}.center, ${i}.scales, ${i}.quaternion, ${i}.rgba, ${r});
            } else {
              ${a} = uvec4(0u, 0u, 0u, 0u);
            }
          `):[`${a} = uvec4(0u, 0u, 0u, 0u);`]}})}dynoOut(){return new X(this,"output")}}class Ps extends z{constructor({rgba8:A}){super({inTypes:{rgba8:"vec4"},inputs:{rgba8:A},statements:({inputs:n,outputs:t})=>[`target = ${n.rgba8??"vec4(0.0, 0.0, 0.0, 0.0)"};`]})}dynoOut(){return new X(this,"rgba8")}}class lA extends z{constructor({key:A,type:n,count:t,value:s,update:a,globals:i}){A=A??"value",super({outTypes:{[A]:n},update:()=>{if(a){const r=a(this.value);r!==void 0&&(this.value=r)}this.uniform.value=this.value},generate:({inputs:r,outputs:l})=>{const o=(i==null?void 0:i({inputs:r,outputs:l}))??[],c={},g=l[A];return g&&(o.push(`uniform ${Vt(g,n,t)};`),c[g]=this.uniform),{globals:o,uniforms:c}}}),this.type=n,this.count=t,this.value=s,this.uniform={value:s},this.outKey=A}dynoOut(){return new X(this,this.outKey)}}class dt extends lA{constructor({key:A,value:n,update:t}){super({key:A,type:"bool",value:n,update:t})}}class Zn extends lA{constructor({key:A,value:n,update:t}){super({key:A,type:"int",value:n,update:t})}}class ln extends lA{constructor({key:A,value:n,update:t}){super({key:A,type:"float",value:n,update:t})}}class Jn extends lA{constructor({key:A,value:n,update:t}){super({key:A,type:"vec2",value:n,update:t})}}class wn extends lA{constructor({key:A,value:n,update:t}){super({key:A,type:"vec3",value:n,update:t})}}class kn extends lA{constructor({key:A,value:n,update:t}){super({key:A,type:"vec4",value:n,update:t})}}class qn extends lA{constructor({key:A,value:n,update:t}){super({key:A,type:"usampler2DArray",value:n,update:t})}}const gt=new Float32Array(1),$t=new Uint32Array(gt.buffer);function Hn(e){gt[0]=e;const A=$t[0],n=A>>31&1,t=A>>23&255,s=A&8388607,a=n<<15;if(t===255)return s!==0?a|32767:a|31744;const i=t-127+15;if(i>=31)return a|31744;if(i<=0){if(i<-10)return a;const l=(s|8388608)>>1-i+13;return a|l}const r=s>>13;return a|i<<10|r}function Kn(e){const A=e>>15&1,n=e>>10&31,t=e&1023;let s;if(n===0)if(t===0)s=A<<31;else{let a=t,i=-14;for(;(a&1024)===0;)a<<=1,i--;a&=1023;const r=i+127,l=a<<13;s=A<<31|r<<23|l}else if(n===31)t===0?s=A<<31|2139095040:s=A<<31|2143289344;else{const a=n-15+127,i=t<<13;s=A<<31|a<<23|i}return $t[0]=s,gt[0]}function Bn(e){return Math.max(0,Math.min(255,Math.round(e*255)))}function Xs(e){const A=[],n=new Set;function t(s){s&&typeof s=="object"&&!n.has(s)&&(n.add(s),s instanceof ArrayBuffer?A.push(s):ArrayBuffer.isView(s)?A.push(s.buffer):Array.isArray(s)?s.forEach(t):Object.values(s).forEach(t))}return t(e),A}class js{constructor({allocate:A,dispose:n,valid:t}){this.items=[],this.allocate=A,this.dispose=n,this.valid=t}alloc(A){for(;;){const n=this.items.pop();if(!n)break;if(this.valid(n,A))return n;this.dispose&&this.dispose(n)}return this.allocate(A)}free(A){this.items.push(A)}disposeAll(){let A;for(A=this.items.pop();A;)this.dispose&&this.dispose(A),A=this.items.pop()}}function pt(e,A,n,t,s,a,i,r,l,o,c,g,I,B,C,h,u){const E=(u==null?void 0:u.rgbMin)??0,f=((u==null?void 0:u.rgbMax)??1)-E,p=Bn((B-E)/f),y=Bn((C-E)/f),w=Bn((h-E)/f),m=Bn(I),x=aa(new $(l,o,c,g)),D=x&255,N=x>>>8&255,M=x>>>16&255,_=(u==null?void 0:u.lnScaleMin)??pA,O=254/(((u==null?void 0:u.lnScaleMax)??yA)-_),V=a<Ln?0:Math.min(255,Math.max(1,Math.round((Math.log(a)-_)*O)+1)),F=i<Ln?0:Math.min(255,Math.max(1,Math.round((Math.log(i)-_)*O)+1)),T=r<Ln?0:Math.min(255,Math.max(1,Math.round((Math.log(r)-_)*O)+1)),Z=Hn(n),Y=Hn(t),eA=Hn(s),H=A*4;e[H]=p|y<<8|w<<16|m<<24,e[H+1]=Z|Y<<16,e[H+2]=eA|D<<16|N<<24,e[H+3]=V|F<<8|T<<16|M<<24}const Os=new d,Vs=new d,Zs=new $,Ws=new YA,$s={center:Os,scales:Vs,quaternion:Zs,color:Ws,opacity:0};function yt(e,A,n){const t=$s,s=A*4,a=e[s],i=e[s+1],r=e[s+2],l=e[s+3],o=(n==null?void 0:n.rgbMin)??0,g=((n==null?void 0:n.rgbMax)??1)-o;t.color.set(o+(a&255)/255*g,o+(a>>>8&255)/255*g,o+(a>>>16&255)/255*g),t.opacity=(a>>>24&255)/255,t.center.set(Kn(i&65535),Kn(i>>>16&65535),Kn(r&65535));const I=(n==null?void 0:n.lnScaleMin)??pA,C=(((n==null?void 0:n.lnScaleMax)??yA)-I)/254,h=l&255;t.scales.x=h===0?0:Math.exp(I+(h-1)*C);const u=l>>>8&255;t.scales.y=u===0?0:Math.exp(I+(u-1)*C);const E=l>>>16&255;t.scales.z=E===0?0:Math.exp(I+(E-1)*C);const Q=r>>>16&65535|l>>>8&16711680;return ia(Q,t.quaternion),t}function nA(e){const A=v,n=Math.max(vs,Math.min(FA,Math.ceil(e/A))),t=Math.ceil(e/(A*n)),s=A*n*t;return{width:A,height:n,depth:t,maxSplats:s}}function Aa(e){const A=new Ut(e.autoStart);return A.startTime=e.startTime,A.oldTime=e.oldTime,A.elapsedTime=e.elapsedTime,A.running=e.running,A}const na=j(`
  precision highp float;

  in vec3 position;

  void main() {
    gl_Position = vec4(position.xy, 0.0, 1.0);
  }
`);function ta(e){const A=new d;for(const n of e)A.add(n);return A.divideScalar(e.length)}function ea(e){if(e.length===0)return new $;const A=e[0].clone();for(let n=1;n<e.length;n++)e[n].dot(e[0])<0?(A.x-=e[n].x,A.y-=e[n].y,A.z-=e[n].z,A.w-=e[n].w):(A.x+=e[n].x,A.y+=e[n].y,A.z+=e[n].z,A.w+=e[n].w);return A.normalize()}function sa(e,A){const[n,t]=[new d,new $],[s,a]=[new d,new $];e.decompose(n,t,new d),A.decompose(s,a,new d);const i=n.distanceTo(s),r=Math.abs(t.dot(a));return{distance:i,coorient:r}}function Wn({matrix1:e,matrix2:A,maxDistance:n,minCoorient:t}){const{distance:s,coorient:a}=sa(e,A);return s<=n&&(t==null||a>=t)}function aa(e){const A=e.clone().normalize();A.w<0&&A.set(-A.x,-A.y,-A.z,-A.w);const n=2*Math.acos(A.w),t=Math.sqrt(A.x*A.x+A.y*A.y+A.z*A.z),s=t<1e-6?new d(1,0,0):new d(A.x,A.y,A.z).divideScalar(t),a=Math.abs(s.x)+Math.abs(s.y)+Math.abs(s.z);let i=s.x/a,r=s.y/a;if(s.z<0){const B=i;i=(1-Math.abs(r))*(i>=0?1:-1),r=(1-Math.abs(B))*(r>=0?1:-1)}const l=i*.5+.5,o=r*.5+.5,c=Math.round(l*255),g=Math.round(o*255);return Math.round(n*(255/Math.PI))<<16|g<<8|c}function ia(e,A){const n=e&255,t=e>>>8&255,s=e>>>16&255,a=n/255,i=t/255;let r=(a-.5)*2,l=(i-.5)*2;const o=1-(Math.abs(r)+Math.abs(l)),c=Math.max(-o,0);r+=r>=0?-c:c,l+=l>=0?-c:c;const g=new d(r,l,o).normalize(),B=s/255*Math.PI*.5,C=Math.sin(B),h=Math.cos(B);return A.set(g.x*C,g.y*C,g.z*C,h),A}function ra(e,A){const n=[];let t=0,s=null;const a=new Is((l,o)=>{if(n.push(l),t+=l.length,o||t>=A){const c=new Uint8Array(t);let g=0;for(const I of n)c.set(I,g),g+=I.length;s=c.slice(0,A)}}),i=1024;let r=0;for(;s==null&&r<e.length;){const l=e.slice(r,r+i);a.push(l,!1),r+=i}if(s==null&&(a.push(new Uint8Array,!0),s==null))throw new Error("Failed to decompress partial gzip");return s}class Ae{constructor({graph:A,inputs:n,outputs:t,template:s}){this.graph=A,this.template=s,this.inputs=n??{},this.outputs=t??{};const a=new Gs({indent:this.template.indent});for(const r in this.outputs)this.outputs[r]&&a.declares.add(this.outputs[r]);const i=A.compile({inputs:this.inputs,outputs:this.outputs,compile:a});this.shader=s.generate({globals:a.globals,statements:i}),this.uniforms=a.uniforms,this.updaters=a.updaters}prepareMaterial(){return oa(this)}update(){for(const A of this.updaters)A()}}class ne{constructor(A){const n=A.match(/^([ \t]*)\{\{\s*GLOBALS\s*\}\}/m),t=A.match(/^([ \t]*)\{\{\s*STATEMENTS\s*\}\}/m);if(!n||!t)throw new Error("Template must contain {{ GLOBALS }} and {{ STATEMENTS }}");this.before=A.substring(0,n.index),this.between=A.substring(n.index+n[0].length,t.index),this.after=A.substring(t.index+t[0].length),this.indent=t[1]}generate({globals:A,statements:n}){return this.before+Array.from(A).join(`

`)+this.between+n.map(t=>this.indent+t).join(`
`)+this.after}}const mt=new Map;function oa(e){let A=mt.get(e);return A||(A=new at({glslVersion:Gt,vertexShader:na,fragmentShader:e.shader,uniforms:e.uniforms}),mt.set(e,A),A)}function te(e,A,n="add"){const t=()=>{throw new Error(`Invalid ${n} types: ${e}, ${A}`)};if(e===A)return e;if(e==="int"){if(NA(A))return A;t()}if(A==="int"){if(NA(e))return e;t()}if(e==="uint"){if(RA(A))return A;t()}if(A==="uint"){if(RA(e))return e;t()}if(e==="float"){if(gn(A))return A;t()}if(A==="float"){if(gn(e))return e;t()}throw new Error(`Invalid ${n} types: ${e}, ${A}`)}function ga(e,A){return te(e,A,"sub")}function la(e,A){const n=()=>{throw new Error(`Invalid mul types: ${e}, ${A}`)},t=s=>s;if(e==="int"){if(NA(A))return t(A);n()}if(A==="int"){if(NA(e))return t(e);n()}if(e==="uint"){if(RA(A))return t(A);n()}if(A==="uint"){if(RA(e))return t(e);n()}if(e==="float"){if(gn(A))return t(A);n()}if(A==="float"){if(gn(e))return t(e);n()}if(NA(e)||RA(e)||NA(A)||RA(A)){if(e===A)return t(e);n()}if(e==="vec2"){if(A==="vec2"||KA(A))return t("vec2");if(A==="mat3x2")return t("vec3");if(A==="mat4x2")return t("vec4");n()}if(e==="vec3"){if(A==="mat2x3")return t("vec2");if(A==="vec3"||PA(A))return t("vec3");if(A==="mat4x3")return t("vec4");n()}if(e==="vec4"){if(A==="mat2x4")return t("vec2");if(A==="mat3x4")return t("vec3");if(A==="vec4"||XA(A))return t("vec4");n()}if(A==="vec2"){if(KA(e))return t("vec2");if(e==="mat2x3")return t("vec3");if(e==="mat2x4")return t("vec4");n()}if(A==="vec3"){if(e==="mat3x2")return t("vec2");if(PA(e))return t("vec3");if(e==="mat3x4")return t("vec4");n()}if(A==="vec4"){if(e==="mat4x2")return t("vec2");if(e==="mat4x3")return t("vec3");if(XA(e))return t("vec4");n()}if(KA(e)){if(KA(A))return t("mat2");if(A==="mat3x2")return t("mat3x2");if(A==="mat4x2")return t("mat4x2");n()}if(e==="mat2x3"){if(KA(A))return t("mat2x3");if(A==="mat3x2")return t("mat3");if(A==="mat4x2")return t("mat4x3");n()}if(e==="mat2x4"){if(KA(A))return t("mat2x4");if(A==="mat3x2")return t("mat3x4");if(A==="mat4x2")return t("mat4");n()}if(e==="mat3x2"){if(A==="mat2x3")return t("mat2");if(PA(A))return t("mat3x2");if(A==="mat4x3")return t("mat4x2");n()}if(PA(e)){if(A==="mat2x3")return t("mat2x3");if(PA(A))return t("mat3");if(A==="mat4x3")return t("mat4x3");n()}if(e==="mat3x4"){if(A==="mat2x3")return t("mat2x4");if(PA(A))return t("mat3x4");if(A==="mat4x3")return t("mat4");n()}if(e==="mat4x2"){if(A==="mat2x4")return t("mat2");if(A==="mat3x4")return t("mat3x2");if(XA(A))return t("mat4x2");n()}if(e==="mat4x3"){if(A==="mat2x4")return t("mat2x3");if(A==="mat3x4")return t("mat3");if(XA(A))return t("mat4x3");n()}if(XA(e)){if(A==="mat2x4")return t("mat2x4");if(A==="mat3x4")return t("mat3x4");if(XA(A))return t("mat4");n()}throw new Error(`Invalid mul types: ${e}, ${A}`)}const _A=(e,A)=>new ca({a:e,b:A}),wt=(e,A)=>new Ia({a:e,b:A}),nn=(e,A)=>new ha({a:e,b:A});class ca extends vn{constructor({a:A,b:n}){super({a:A,b:n,outKey:"sum",outTypeFunc:te}),this.statements=({inputs:t,outputs:s})=>[`${s.sum} = ${t.a} + ${t.b};`]}}class Ia extends vn{constructor({a:A,b:n}){super({a:A,b:n,outKey:"difference",outTypeFunc:ga}),this.statements=({inputs:t,outputs:s})=>[`${s.difference} = ${t.a} - ${t.b};`]}}class ha extends vn{constructor({a:A,b:n}){super({a:A,b:n,outKey:"product",outTypeFunc:la}),this.statements=({inputs:t,outputs:s})=>[`${s.product} = ${t.a} * ${t.b};`]}}const ua=e=>new Ca({value:e}),Ba=e=>new Ea({value:e}),xt=e=>new fa({value:e});class Ca extends Dn{constructor({value:A}){super({a:A,outKey:"uint",outTypeFunc:()=>"uint"}),this.statements=({inputs:n,outputs:t})=>[`${t.uint} = floatBitsToUint(${n.a});`]}}class Ea extends Dn{constructor({value:A}){super({a:A,outKey:"uint",outTypeFunc:()=>"uint"}),this.statements=({inputs:n,outputs:t})=>[`${t.uint} = packHalf2x16(${n.a});`]}}class fa extends Dn{constructor({value:A}){super({a:A,outKey:"rgba8",outTypeFunc:()=>"vec4"}),this.statements=({inputs:n,outputs:t})=>[`uvec4 uRgba = uvec4(${n.a} & 0xffu, (${n.a} >> 8u) & 0xffu, (${n.a} >> 16u) & 0xffu, (${n.a} >> 24u) & 0xffu);`,`${t.rgba8} = vec4(uRgba) / 255.0;`]}}const Qa=e=>new ma({a:e}),da=e=>new ba({vector:e}),pa=({vector:e,vectorType:A,x:n,y:t,z:s,w:a,r:i,g:r,b:l,a:o})=>new Da({vector:e,vectorType:A,x:n,y:t,z:s,w:a,r:i,g:r,b:l,a:o}),ya=(e,A)=>new xa({a:e,b:A});class ma extends Dn{constructor({a:A}){super({a:A,outTypeFunc:n=>n,outKey:"normalize"}),this.statements=({inputs:n,outputs:t})=>[`${t.normalize} = normalize(${n.a});`]}}function wa(e){if(e==="float")return"vec2";if(e==="vec2")return"vec3";if(e==="vec3")return"vec4";throw new Error("Invalid type")}class xa extends vn{constructor({a:A,b:n}){const t=QA(A),s=wa(t);super({a:A,b:n,outKey:"extend",outTypeFunc:()=>s}),this.statements=({inputs:a,outputs:i})=>[`${i.extend} = ${s}(${a.a}, ${a.b});`]}}function Sa(e){const A=n=>n;switch(e){case"vec2":return A({x:"float",y:"float",r:"float",g:"float"});case"vec3":return A({x:"float",y:"float",z:"float",r:"float",g:"float",b:"float"});case"vec4":return A({x:"float",y:"float",z:"float",w:"float",r:"float",g:"float",b:"float",a:"float"});case"ivec2":return A({x:"int",y:"int",r:"int",g:"int"});case"ivec3":return A({x:"int",y:"int",z:"int",r:"int",g:"int",b:"int"});case"ivec4":return A({x:"int",y:"int",z:"int",w:"int",r:"int",g:"int",b:"int",a:"int"});case"uvec2":return A({x:"uint",y:"uint",r:"uint",g:"uint"});case"uvec3":return A({x:"uint",y:"uint",z:"uint",r:"uint",g:"uint",b:"uint"});case"uvec4":return A({x:"uint",y:"uint",z:"uint",w:"uint",r:"uint",g:"uint",b:"uint",a:"uint"});default:throw new Error(`Invalid vector type: ${e}`)}}class ba extends z{constructor({vector:A}){const t={vector:QA(A)},s=Sa(t.vector);super({inTypes:t,outTypes:s,inputs:{vector:A}}),this.statements=({inputs:a,outputs:i})=>{const{x:r,y:l,z:o,w:c,r:g,g:I,b:B,a:C}=i,{vector:h}=a;return[r?`${r} = ${h}.x;`:null,l?`${l} = ${h}.y;`:null,o?`${o} = ${h}.z;`:null,c?`${c} = ${h}.w;`:null,g?`${g} = ${h}.r;`:null,I?`${I} = ${h}.g;`:null,B?`${B} = ${h}.b;`:null,C?`${C} = ${h}.a;`:null].filter(Boolean)}}}class Da extends z{constructor({vector:A,vectorType:n,x:t,y:s,z:a,w:i,r,g:l,b:o,a:c}){if(!A&&!n)throw new Error("Either vector or vectorType must be provided");const g=n??QA(A),I=Fs(g),B=Ns(g),C={vector:g,x:I,y:I,r:I,g:I},h={vector:A,x:t,y:s,r,g:l};B>=3&&(Object.assign(C,{z:I,b:I}),Object.assign(h,{z:a,b:o})),B>=4&&(Object.assign(C,{w:I,a:I}),Object.assign(h,{w:i,a:c})),super({inTypes:C,outTypes:{vector:g},inputs:h}),this.statements=({inputs:u,outputs:E})=>{const{vector:Q}=E,{vector:f,x:p,y,z:w,w:m,r:x,g:D,b:N,a:M}=u,_=[`${Q}.x = ${p??x??(f?`${f}.x`:un(I))};`,`${Q}.y = ${y??D??(f?`${f}.y`:un(I))};`];return B>=3&&_.push(`${Q}.z = ${w??N??(f?`${f}.z`:un(I))};`),B>=4&&_.push(`${Q}.w = ${m??M??(f?`${f}.w`:un(I))};`),_}}dynoOut(){return new X(this,"vector")}}const va=(e,{scale:A,scales:n,rotate:t,translate:s})=>new ka({position:e,scale:A,scales:n,rotate:t,translate:s}).outputs.position,Ma=(e,{scale:A,scales:n,rotate:t})=>new _a({dir:e,scale:A,scales:n,rotate:t}).outputs.dir;class ka extends z{constructor({position:A,scale:n,scales:t,rotate:s,translate:a}){super({inTypes:{position:"vec3",scale:"float",scales:"vec3",rotate:"vec4",translate:"vec3"},outTypes:{position:"vec3"},inputs:{position:A,scale:n,scales:t,rotate:s,translate:a},statements:({inputs:i,outputs:r})=>{const{position:l}=r;if(!l)return[];const{scale:o,scales:c,rotate:g,translate:I}=i;return[`${l} = ${i.position??"vec3(0.0, 0.0, 0.0)"};`,o?`${l} *= ${o};`:null,c?`${l} *= ${c};`:null,g?`${l} = quatVec(${g}, ${l});`:null,I?`${l} += ${I};`:null].filter(Boolean)}})}}class _a extends z{constructor({dir:A,scale:n,scales:t,rotate:s}){super({inTypes:{dir:"vec3",scale:"float",scales:"vec3",rotate:"vec4"},outTypes:{dir:"vec3"},inputs:{dir:A,scale:n,scales:t,rotate:s},statements:({inputs:a,outputs:i})=>{const{dir:r}=i;if(!r)return[];const{scale:l,scales:o,rotate:c}=a;return[`${r} = ${a.dir??"vec3(0.0, 0.0, 0.0)"};`,l?`${r} *= ${l};`:null,o?`${r} *= ${o};`:null,c?`${r} = quatVec(${c}, ${r});`:null].filter(Boolean)}})}}var Fa=`precision highp float;
precision highp int;
precision highp sampler2D;
precision highp usampler2D;
precision highp isampler2D;
precision highp sampler2DArray;
precision highp usampler2DArray;
precision highp isampler2DArray;
precision highp sampler3D;
precision highp usampler3D;
precision highp isampler3D;

#include <splatDefines>

uniform uint targetLayer;
uniform int targetBase;
uniform int targetCount;

out vec4 target;

{{ GLOBALS }}

void computeReadback(int index) {
    {{ STATEMENTS }}
}

void main() {
    int targetIndex = int(targetLayer << SPLAT_TEX_LAYER_BITS) + int(uint(gl_FragCoord.y) << SPLAT_TEX_WIDTH_BITS) + int(gl_FragCoord.x);
    int index = targetIndex - targetBase;

    if ((index >= 0) && (index < targetCount)) {
        computeReadback(index);
    } else {
        target = vec4(0.0, 0.0, 0.0, 0.0);
    }
}`;const _n=class bA{constructor({renderer:A}={}){this.renderer=A,this.capacity=0,this.count=0}dispose(){this.target&&(this.target.dispose(),this.target=void 0)}ensureBuffer(A,n){const s=Math.ceil(Math.max(1,A)/v)*v*4;if(n.byteLength>=s)return n;const a=new ArrayBuffer(s);if(n instanceof ArrayBuffer)return a;const i=n.constructor;return new i(a)}ensureCapacity(A){const{width:n,height:t,depth:s,maxSplats:a}=nA(A);(!this.target||a>this.capacity)&&(this.dispose(),this.capacity=a,this.target=new Nt(n,t,s,{depthBuffer:!1,stencilBuffer:!1,generateMipmaps:!1,magFilter:mn,minFilter:mn}),this.target.texture.format=$A,this.target.texture.type=on,this.target.texture.internalFormat="RGBA8",this.target.scissorTest=!0)}prepareProgramMaterial(A){let n=bA.readbackProgram.get(A);if(!n){const s=mA({index:"int"},{rgba8:"vec4"},({index:a})=>(A.inputs.index=a,{rgba8:new Ps({rgba8:A.outputs.rgba8})}));bA.programTemplate||(bA.programTemplate=new ne(Fa)),n=new Ae({graph:s,inputs:{index:"index"},outputs:{rgba8:"target"},template:bA.programTemplate}),Object.assign(n.uniforms,{targetLayer:{value:0},targetBase:{value:0},targetCount:{value:0}}),bA.readbackProgram.set(A,n)}const t=n.prepareMaterial();return bA.fullScreenQuad.material=t,{program:n,material:t}}saveRenderState(A){return{xrEnabled:A.xr.enabled,autoClear:A.autoClear}}resetRenderState(A,n){A.setRenderTarget(null),A.xr.enabled=n.xrEnabled,A.autoClear=n.autoClear}process({count:A,material:n}){const t=this.renderer;if(!t)throw new Error("No renderer");if(!this.target)throw new Error("No target");const s=v*FA;n.uniforms.targetBase.value=0,n.uniforms.targetCount.value=A;let a=0;for(;a<A;){const i=Math.floor(a/s),r=i*s,l=Math.min(FA,Math.ceil((A-r)/v));n.uniforms.targetLayer.value=i,this.target.scissor.set(0,0,v,l),t.setRenderTarget(this.target,i),t.xr.enabled=!1,t.autoClear=!1,bA.fullScreenQuad.render(t),a+=v*l}this.count=A}async read({readback:A}){const n=this.renderer;if(!n)throw new Error("No renderer");if(!this.target)throw new Error("No target");const t=Math.ceil(this.count/v)*v;if(A.byteLength<t*4)throw new Error(`Readback buffer too small: ${A.byteLength} < ${t*4}`);const s=new Uint8Array(A instanceof ArrayBuffer?A:A.buffer),a=v*FA;let i=0;const r=[];for(;i<this.count;){const l=Math.floor(i/a),o=l*a,c=Math.min(FA,Math.ceil((this.count-o)/v));n.setRenderTarget(this.target,l);const g=v*c*4,I=s.subarray(o*4,o*4+g),B=n==null?void 0:n.readRenderTargetPixelsAsync(this.target,0,0,v,c,I);r.push(B),i+=v*c}return Promise.all(r).then(()=>A)}render({reader:A,count:n,renderer:t}){if(this.renderer=t||this.renderer,!this.renderer)throw new Error("No renderer");this.ensureCapacity(n);const{program:s,material:a}=this.prepareProgramMaterial(A);s.update();const i=this.saveRenderState(this.renderer);this.process({count:n,material:a}),this.resetRenderState(this.renderer,i)}async readback({readback:A}){if(!this.renderer)throw new Error("No renderer");const n=this.saveRenderState(this.renderer),t=this.read({readback:A});return this.resetRenderState(this.renderer,n),t}async renderReadback({reader:A,count:n,renderer:t,readback:s}){if(this.renderer=t||this.renderer,!this.renderer)throw new Error("No renderer");this.ensureCapacity(n);const{program:a,material:i}=this.prepareProgramMaterial(A);a.update();const r=this.saveRenderState(this.renderer);this.process({count:n,material:i});const l=this.read({readback:s});return this.resetRenderState(this.renderer,r),l}getTexture(){var A;return(A=this.target)==null?void 0:A.texture}};_n.programTemplate=null;_n.readbackProgram=new Map;_n.fullScreenQuad=new Tt(new at({visible:!1}));let ee=_n;const lt=class K{constructor(A={}){this.capacity=0,this.count=0,this.array=null,this.readback=null,this.source=null,this.needsUpdate=!0,this.dyno=new lA({key:"rgbaArray",type:se,globals:()=>[ae],value:{texture:K.getEmpty(),count:0},update:n=>{var t;return n.texture=((t=this.readback)==null?void 0:t.getTexture())??this.source??K.getEmpty(),n.count=this.count,n}}),A.array?(this.array=A.array,this.capacity=Math.floor(this.array.length/4),this.capacity=Math.floor(this.capacity/v)*v,this.count=Math.min(this.capacity,A.count??Number.POSITIVE_INFINITY)):(this.capacity=A.capacity??0,this.count=0)}dispose(){this.readback&&(this.readback.dispose(),this.readback=null),this.source&&(this.source.dispose(),this.source=null)}ensureCapacity(A){var n;if(!this.array||A>(((n=this.array)==null?void 0:n.length)??0)/4){this.capacity=nA(A).maxSplats;const t=new Uint8Array(this.capacity*4);this.array&&t.set(this.array),this.array=t}return this.array}getTexture(){var A;let n=(A=this.readback)==null?void 0:A.getTexture();return(this.source||this.array)&&(n=this.maybeUpdateSource()),n??K.getEmpty()}maybeUpdateSource(){if(!this.array)throw new Error("No array");if(this.needsUpdate||!this.source){if(this.needsUpdate=!1,this.source){const{width:A,height:n,depth:t}=this.source.image;this.capacity!==A*n*t&&(this.source.dispose(),this.source=null)}if(this.source)this.array.buffer!==this.source.image.data.buffer&&(this.source.image.data=new Uint8Array(this.array.buffer));else{const{width:A,height:n,depth:t}=nA(this.capacity);this.source=new UA(this.array,A,n,t),this.source.format=$A,this.source.type=on,this.source.internalFormat="RGBA8",this.source.needsUpdate=!0}this.source.needsUpdate=!0}return this.source}render({reader:A,count:n,renderer:t}){this.readback||(this.readback=new ee({renderer:t})),this.readback.render({reader:A,count:n,renderer:t}),this.capacity=this.readback.capacity,this.count=this.readback.count}fromPackedSplats({packedSplats:A,base:n,count:t,renderer:s}){const{dynoSplats:a,dynoBase:i,dynoCount:r,reader:l}=K.makeDynos();return a.packedSplats=A,i.value=n,r.value=t,this.render({reader:l,count:t,renderer:s}),this}async read(){if(!this.readback)throw new Error("No readback");return(!this.array||this.array.length<this.count*4)&&(this.array=new Uint8Array(this.capacity*4)),(await this.readback.readback({readback:this.array})).subarray(0,this.count*4)}static getEmpty(){if(!K.emptySource){const A=new Uint8Array(4);K.emptySource=new UA(A,1,1,1),K.emptySource.format=$A,K.emptySource.type=on,K.emptySource.internalFormat="RGBA8",K.emptySource.needsUpdate=!0}return K.emptySource}static makeDynos(){if(!K.dynos){const A=new ct,n=new Zn({value:0}),t=new Zn({value:0}),s=mA({index:"int"},{rgba8:"vec4"},({index:a})=>{if(!a)throw new Error("index is undefined");a=_A(a,n);const i=Ts(A,a,n,t);return{rgba8:pn(i).outputs.rgba}});K.dynos={dynoSplats:A,dynoBase:n,dynoCount:t,reader:s}}return K.dynos}};lt.emptySource=null;lt.dynos=null;let Na=lt;const se={type:"RgbaArray"},ae=j(`
  struct RgbaArray {
    sampler2DArray texture;
    int count;
  };
`);function Ra(e,A){return new z({inTypes:{rgba:se,index:"int"},outTypes:{rgba:"vec4"},inputs:{rgba:e,index:A},globals:()=>[ae],statements:({inputs:t,outputs:s})=>BA(`
        if ((index >= 0) && (index < ${t.rgba}.count)) {
          ${s.rgba} = texelFetch(${t.rgba}.texture, splatTexCoord(index), 0);
        } else {
          ${s.rgba} = vec4(0.0, 0.0, 0.0, 0.0);
        }
      `)}).outputs.rgba}function Ga(e){switch(e){case"all":return 0;case"plane":return 1;case"sphere":return 2;case"box":return 3;case"ellipsoid":return 4;case"cylinder":return 5;case"capsule":return 6;case"infinite_cone":return 7;default:throw new Error(`Unknown SDF type: ${e}`)}}function Ua(e){switch(e){case"multiply":return 0;case"set_rgb":return 1;case"add_rgba":return 2;default:throw new Error(`Unknown blend mode: ${e}`)}}class Ta extends rt{constructor(A={}){super();const{type:n,invert:t,opacity:s,color:a,displace:i,radius:r}=A;this.type=n??"sphere",this.invert=t??!1,this.opacity=s??1,this.color=a??new YA(1,1,1),this.displace=i??new d(0,0,0),this.radius=r??0}}const ie=class re extends rt{constructor(A={}){const{name:n,rgbaBlendMode:t="multiply",sdfSmooth:s=0,softEdge:a=0,invert:i=!1,sdfs:r=null}=A;super(),this.rgbaBlendMode=t,this.sdfSmooth=s,this.softEdge=a,this.invert=i,this.sdfs=r,this.ordering=re.nextOrdering++,this.name=n??`Edit ${this.ordering}`}addSdf(A){this.sdfs==null&&(this.sdfs=[]),this.sdfs.includes(A)||this.sdfs.push(A)}removeSdf(A){this.sdfs!=null&&(this.sdfs=this.sdfs.filter(n=>n!==A))}};ie.nextOrdering=1;let oe=ie;class Ya{constructor({maxSdfs:A,maxEdits:n}){this.maxSdfs=Math.max(16,A??0),this.numSdfs=0,this.sdfData=new Uint32Array(this.maxSdfs*8*4),this.sdfFloatData=new Float32Array(this.sdfData.buffer),this.sdfTexture=this.newSdfTexture(this.sdfData,this.maxSdfs),this.dynoSdfArray=new lA({key:"sdfArray",type:ge,globals:()=>[le],value:{numSdfs:0,sdfTexture:this.sdfTexture},update:t=>(t.numSdfs=this.numSdfs,t.sdfTexture=this.sdfTexture,t)}),this.maxEdits=Math.max(16,n??0),this.numEdits=0,this.editData=new Uint32Array(this.maxEdits*4),this.editFloatData=new Float32Array(this.editData.buffer),this.dynoNumEdits=new Zn({value:0}),this.dynoEdits=this.newEdits(this.editData,this.maxEdits)}newSdfTexture(A,n){const t=new Je(A,8,n,VA,TA);return t.internalFormat="RGBA32UI",t.needsUpdate=!0,t}newEdits(A,n){return new lA({key:"edits",type:"uvec4",count:n,globals:()=>[ce],value:A})}ensureCapacity({maxSdfs:A,maxEdits:n}){let t=!1;return A>this.sdfTexture.image.height&&(this.sdfTexture.dispose(),this.maxSdfs=Math.max(this.maxSdfs*2,A),this.sdfData=new Uint32Array(this.maxSdfs*8*4),this.sdfFloatData=new Float32Array(this.sdfData.buffer),this.sdfTexture=this.newSdfTexture(this.sdfData,this.maxSdfs)),n>(this.dynoEdits.count??0)&&(this.maxEdits=Math.max(this.maxEdits*2,n),this.editData=new Uint32Array(this.maxEdits*4),this.editFloatData=new Float32Array(this.editData.buffer),this.dynoEdits=this.newEdits(this.editData,this.maxEdits),t=!0),t}updateEditData(A,n){const t=this.editData[A]!==n;return this.editData[A]=n,t}updateEditFloatData(A,n){jA[0]=n;const t=this.editFloatData[A]!==jA[0];return t&&(this.editFloatData[A]=jA[0]),t}encodeEdit(A,{sdfFirst:n,sdfCount:t,invert:s,rgbaBlendMode:a,softEdge:i,sdfSmooth:r}){const l=A*4;let o=!1;return o=this.updateEditData(l+0,a|(s?256:0))||o,o=this.updateEditData(l+1,n|t<<16)||o,o=this.updateEditFloatData(l+2,i)||o,o=this.updateEditFloatData(l+3,r)||o,o}updateSdfData(A,n){const t=this.sdfData[A]!==n;return this.sdfData[A]=n,t}updateSdfFloatData(A,n){jA[0]=n;const t=this.sdfFloatData[A]!==jA[0];return t&&(this.sdfFloatData[A]=jA[0]),t}encodeSdf(A,{sdfType:n,invert:t,center:s,quaternion:a,scale:i,sizes:r},l){const o=A*32,c=n|(t?256:0);let g=!1;g=this.updateSdfFloatData(o+0,(s==null?void 0:s.x)??0)||g,g=this.updateSdfFloatData(o+1,(s==null?void 0:s.y)??0)||g,g=this.updateSdfFloatData(o+2,(s==null?void 0:s.z)??0)||g,g=this.updateSdfData(o+3,c)||g,g=this.updateSdfFloatData(o+4,(a==null?void 0:a.x)??0)||g,g=this.updateSdfFloatData(o+5,(a==null?void 0:a.y)??0)||g,g=this.updateSdfFloatData(o+6,(a==null?void 0:a.z)??0)||g,g=this.updateSdfFloatData(o+7,(a==null?void 0:a.w)??0)||g,g=this.updateSdfFloatData(o+8,(i==null?void 0:i.x)??0)||g,g=this.updateSdfFloatData(o+9,(i==null?void 0:i.y)??0)||g,g=this.updateSdfFloatData(o+10,(i==null?void 0:i.z)??0)||g,g=this.updateSdfData(o+11,0)||g,g=this.updateSdfFloatData(o+12,(r==null?void 0:r.x)??0)||g,g=this.updateSdfFloatData(o+13,(r==null?void 0:r.y)??0)||g,g=this.updateSdfFloatData(o+14,(r==null?void 0:r.z)??0)||g,g=this.updateSdfFloatData(o+15,(r==null?void 0:r.w)??0)||g;const I=Math.min(4,l.length);for(let B=0;B<I;++B){const C=o+16+B*4;g=this.updateSdfFloatData(C+0,l[B].x)||g,g=this.updateSdfFloatData(C+1,l[B].y)||g,g=this.updateSdfFloatData(C+2,l[B].z)||g,g=this.updateSdfFloatData(C+3,l[B].w)||g}return g}update(A){const n=A.reduce((g,{sdfs:I})=>g+I.length,0),t=this.ensureCapacity({maxEdits:A.length,maxSdfs:n}),s=[new gA,new gA],a=new d,i=new $,r=new d,l=new gA;let o=0,c=t;A.length!==this.dynoNumEdits.value&&(this.dynoNumEdits.value=A.length,this.numEdits=A.length,c=!0);for(const[g,{edit:I,sdfs:B}]of A.entries()){c=this.encodeEdit(g,{sdfFirst:o,sdfCount:B.length,invert:I.invert,rgbaBlendMode:Ua(I.rgbaBlendMode),softEdge:I.softEdge,sdfSmooth:I.sdfSmooth})||c;let C=!1;for(const h of B)l.set(h.scale.x,h.scale.y,h.scale.z,h.radius),h.scale.setScalar(1),h.updateMatrixWorld(),h.matrixWorld.clone().invert().decompose(a,i,r),h.scale.set(l.x,l.y,l.z),h.updateMatrixWorld(),s[0].set(h.color.r,h.color.g,h.color.b,h.opacity),s[1].set(h.displace.x,h.displace.y,h.displace.z,1),C=this.encodeSdf(o,{sdfType:Ga(h.type),invert:h.invert,center:a,quaternion:i,scale:r,sizes:l},s)||C,o+=1;this.numSdfs=o,C&&(this.sdfTexture.needsUpdate=!0),c||(c=C)}return{updated:c,dynoUpdated:t}}modify(A){return La(A,this.dynoSdfArray,this.dynoNumEdits,this.dynoEdits)}}const ge={type:"SdfArray"},le=j(`
  struct SdfArray {
    int numSdfs;
    usampler2D sdfTexture;
  };

  void unpackSdfArray(
    usampler2D sdfTexture, int sdfIndex, out uint flags,
    out vec3 center, out vec4 quaternion, out vec3 scale, out vec4 sizes,
    int numValues, out vec4 values[4]
  ) {
    uvec4 temp = texelFetch(sdfTexture, ivec2(0, sdfIndex), 0);
    flags = temp.w;
    center = vec3(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z));

    temp = texelFetch(sdfTexture, ivec2(1, sdfIndex), 0);
    quaternion = vec4(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), uintBitsToFloat(temp.w));

    temp = texelFetch(sdfTexture, ivec2(2, sdfIndex), 0);
    scale = vec3(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z));

    temp = texelFetch(sdfTexture, ivec2(3, sdfIndex), 0);
    sizes = vec4(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), uintBitsToFloat(temp.w));

    for (int i = 0; i < numValues; ++i) {
      temp = texelFetch(sdfTexture, ivec2(4 + i, sdfIndex), 0);
      values[i] = vec4(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), uintBitsToFloat(temp.w));
    }
  }

  const uint SDF_FLAG_TYPE = 0xFFu;
  const uint SDF_FLAG_INVERT = 1u << 8u;

  const uint SDF_TYPE_ALL = 0u;
  const uint SDF_TYPE_PLANE = 1u;
  const uint SDF_TYPE_SPHERE = 2u;
  const uint SDF_TYPE_BOX = 3u;
  const uint SDF_TYPE_ELLIPSOID = 4u;
  const uint SDF_TYPE_CYLINDER = 5u;
  const uint SDF_TYPE_CAPSULE = 6u;
  const uint SDF_TYPE_INFINITE_CONE = 7u;

  float evaluateSdfArray(
    usampler2D sdfTexture, int numSdfs, int sdfFirst, int sdfCount, vec3 pos,
    float smoothK, int numValues, out vec4 outValues[4]
  ) {
    float distanceAccum = (smoothK == 0.0) ? 1.0 / 0.0 : 0.0;
    float maxExp = -1.0 / 0.0;
    for (int i = 0; i < numValues; ++i) {
        outValues[i] = vec4(0.0);
    }

    uint flags;
    vec3 center, scale;
    vec4 quaternion, sizes;
    vec4 values[4];

    int sdfLast = min(sdfFirst + sdfCount, numSdfs);
    for (int index = sdfFirst; index < sdfLast; ++index) {
      unpackSdfArray(sdfTexture, index, flags, center, quaternion, scale, sizes, numValues, values);
      uint sdfType = flags & SDF_FLAG_TYPE;
      vec3 sdfPos = quatVec(quaternion, pos * scale) + center;

      float distance;
      switch (sdfType) {
        case SDF_TYPE_ALL:
          distance = -1.0 / 0.0;
          break;
        case SDF_TYPE_PLANE: {
          distance = sdfPos.z;
          break;
        }
        case SDF_TYPE_SPHERE: {
          distance = length(sdfPos) - sizes.w;
          break;
        }
        case SDF_TYPE_BOX: {
          vec3 q = abs(sdfPos) - sizes.xyz + sizes.w;
          distance = length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0) - sizes.w;
          break;
        }
        case SDF_TYPE_ELLIPSOID: {
          vec3 sizes = sizes.xyz;
          float k0 = length(sdfPos / sizes);
          float k1 = length(sdfPos / dot(sizes, sizes));
          distance = k0 * (k0 - 1.0) / k1;
          break;
        }
        case SDF_TYPE_CYLINDER: {
          vec2 d = abs(vec2(length(sdfPos.xz), sdfPos.y)) - sizes.wy;
          distance = min(max(d.x, d.y), 0.0) + length(max(d, 0.0));
          break;
        }
        case SDF_TYPE_CAPSULE: {
          sdfPos.y -= clamp(sdfPos.y, -0.5 * sizes.y, 0.5 * sizes.y);
          distance = length(sdfPos) - sizes.w;
          break;
        }
        case SDF_TYPE_INFINITE_CONE: {
          float angle = 0.25 * PI * sizes.w;
          vec2 c = vec2(sin(angle), cos(angle));
          vec2 q = vec2(length(sdfPos.xy), -sdfPos.z);
          float d = length(q - c * max(dot(q, c), 0.0));
          distance = d * (((q.x * c.y - q.y * c.x) < 0.0) ? -1.0 : 1.0);
          break;
        }
      }

      if ((flags & SDF_FLAG_INVERT) != 0u) {
        distance = -distance;
      }

      if (smoothK == 0.0) {
        if (distance < distanceAccum) {
          distanceAccum = distance;
          for (int i = 0; i < numValues; ++i) {
            outValues[i] = values[i];
          }
        }
      } else {
        float scaledDistance = -distance / smoothK;
        if (scaledDistance > maxExp) {
          float scale = exp(maxExp - scaledDistance);
          distanceAccum *= scale;
          for (int i = 0; i < numValues; ++i) {
            outValues[i] *= scale;
          }
          maxExp = scaledDistance;
        }

        float weight = exp(scaledDistance - maxExp);
        distanceAccum += weight;
        for (int i = 0; i < numValues; ++i) {
          outValues[i] += weight * values[i];
        }
      }
    }

    if (smoothK == 0.0) {
      return distanceAccum;
    } else {
      // Very distant SDFs may result in 0 accumulation
      if (distanceAccum == 0.0) {
        return 1.0 / 0.0;
      }
      for (int i = 0; i < numValues; ++i) {
        outValues[i] /= distanceAccum;
      }
      return (-log(distanceAccum) - maxExp) * smoothK;
    }
  }

  float modulateSdfArray(
    usampler2D sdfTexture, int numSdfs, int sdfFirst, int sdfCount, vec3 pos,
    float smoothK, int numValues, out vec4 values[4],
    float softEdge, bool invert
  ) {
    float distance = evaluateSdfArray(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, smoothK, numValues, values);
    if (invert) {
      distance = -distance;
    }

    return (softEdge == 0.0) ? ((distance < 0.0) ? 1.0 : 0.0)
      : clamp(-distance / softEdge + 0.5, 0.0, 1.0);
  }
`),ce=j(`
  const uint EDIT_FLAG_BLEND = 0xFFu;
  const uint EDIT_BLEND_MULTIPLY = 0u;
  const uint EDIT_BLEND_SET_RGB = 1u;
  const uint EDIT_BLEND_ADD_RGBA = 2u;
  const uint EDIT_FLAG_INVERT = 0x100u;

  void decodeEdit(
    uvec4 packedEdit, out int sdfFirst, out int sdfCount,
    out bool invert, out uint rgbaBlendMode, out float softEdge, out float sdfSmooth
  ) {
    rgbaBlendMode = packedEdit.x & EDIT_FLAG_BLEND;
    invert = (packedEdit.x & EDIT_FLAG_INVERT) != 0u;

    sdfFirst = int(packedEdit.y & 0xFFFFu);
    sdfCount = int(packedEdit.y >> 16u);

    softEdge = uintBitsToFloat(packedEdit.z);
    sdfSmooth = uintBitsToFloat(packedEdit.w);
  }

  void applyRgbaDisplaceEdit(
    usampler2D sdfTexture, int numSdfs, int sdfFirst, int sdfCount, inout vec3 pos,
    float smoothK, float softEdge, bool invert, uint rgbaBlendMode, inout vec4 rgba
  ) {
    vec4 values[4];
    float modulate = modulateSdfArray(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, smoothK, 2, values, softEdge, invert);
    // On Android, moving values[0] is necessary to work around a compiler bug.
    vec4 sdfRgba = values[0];
    vec4 sdfDisplaceScale = values[1];

    vec4 target;
    switch (rgbaBlendMode) {
      case EDIT_BLEND_MULTIPLY:
        target = rgba * sdfRgba;
        break;
      case EDIT_BLEND_SET_RGB:
        target = vec4(sdfRgba.rgb, rgba.a * sdfRgba.a);
        break;
      case EDIT_BLEND_ADD_RGBA:
        target = rgba + sdfRgba;
        break;
      default:
        // Debug output if blend mode not set
        target = vec4(fract(pos), 1.0);
    }
    rgba = mix(rgba, target, modulate);
    pos += sdfDisplaceScale.xyz * modulate;
  }

  void applyPackedRgbaDisplaceEdit(uvec4 packedEdit, usampler2D sdfTexture, int numSdfs, inout vec3 pos, inout vec4 rgba) {
    int sdfFirst, sdfCount;
    bool invert;
    uint rgbaBlendMode;
    float softEdge, sdfSmooth;
    decodeEdit(packedEdit, sdfFirst, sdfCount, invert, rgbaBlendMode, softEdge, sdfSmooth);
    applyRgbaDisplaceEdit(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, sdfSmooth, softEdge, invert, rgbaBlendMode, rgba);
  }
`);function La(e,A,n,t){return new z({inTypes:{gsplat:U,sdfArray:ge,numEdits:"int",rgbaDisplaceEdits:"uvec4"},outTypes:{gsplat:U},globals:()=>[le,ce],inputs:{gsplat:e,sdfArray:A,numEdits:n,rgbaDisplaceEdits:t},statements:({inputs:a,outputs:i})=>{const{sdfArray:r,numEdits:l,rgbaDisplaceEdits:o}=a,{gsplat:c}=i;return BA(`
        ${c} = ${a.gsplat};
        if (isGsplatActive(${c}.flags)) {
          for (int editIndex = 0; editIndex < ${l}; ++editIndex) {
            applyPackedRgbaDisplaceEdit(
              ${o}[editIndex], ${r}.sdfTexture, ${r}.numSdfs,
              ${c}.center, ${c}.rgba
            );
          }
        }
      `)}}).outputs.gsplat}const jA=new Float32Array(1);class za{constructor(A){this.modifier=A,this.cache=new Map}apply(A){let n=this.cache.get(A);return n||(n=mA({index:"int"},{gsplat:U},({index:t})=>{const{gsplat:s}=A.apply({index:t});return this.modifier.apply({gsplat:s})}),this.cache.set(A,n)),n}}class Cn{constructor(){this.scale=new ln({value:Number.NEGATIVE_INFINITY}),this.rotate=new kn({value:new $(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY)}),this.translate=new wn({value:new d(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY)})}apply(A){return va(A,{scale:this.scale,rotate:this.rotate,translate:this.translate})}applyDir(A){return Ma(A,{rotate:this.rotate})}applyGsplat(A){return Zt(A,{scale:this.scale,rotate:this.rotate,translate:this.translate})}updateFromMatrix(A){const n=new d,t=new $,s=new d;A.decompose(s,t,n);const a=(n.x+n.y+n.z)/3;let i=!1;return a!==this.scale.value&&(this.scale.value=a,i=!0),s.equals(this.translate.value)||(this.translate.value.copy(s),i=!0),t.equals(this.rotate.value)||(this.rotate.value.copy(t),i=!0),i}update(A){return A.updateMatrixWorld(),this.updateFromMatrix(A.matrixWorld)}}class $n extends rt{constructor({numSplats:A,generator:n,construct:t,update:s}){if(super(),this.numSplats=A??0,this.generator=n,this.frameUpdate=s,this.version=0,t){const a=t(this);Object.assign(this,a)}}updateVersion(){this.version+=1}set needsUpdate(A){A&&this.updateVersion()}}const cn=class At extends $n{constructor(A={}){const n=new Cn,t=new Cn,s=new Cn,a=new Cn,i=new kn({value:new gA(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY)}),r=new ln({value:0}),l=new ln({value:0}),o={transform:n,viewToWorld:t,worldToView:s,viewToObject:a,recolor:i,time:r,deltaTime:l};if(super({update:({time:c,deltaTime:g,viewToWorld:I,globalEdits:B})=>this.update({time:c,deltaTime:g,viewToWorld:I,globalEdits:B})}),this.isInitialized=!1,this.recolor=new YA(1,1,1),this.opacity=1,this.enableViewToObject=!1,this.enableViewToWorld=!1,this.enableWorldToView=!1,this.skinning=null,this.edits=null,this.rgbaDisplaceEdits=null,this.splatRgba=null,this.maxSh=3,this.packedSplats=A.packedSplats??new LA,this.packedSplats.splatEncoding=A.splatEncoding??{...Fn},this.numSplats=this.packedSplats.numSplats,this.editable=A.editable??!0,this.onFrame=A.onFrame,this.context=o,this.objectModifier=A.objectModifier,this.worldModifier=A.worldModifier,this.updateGenerator(),A.url||A.fileBytes||A.constructSplats||A.packedSplats&&!A.packedSplats.isInitialized)this.initialized=this.asyncInitialize(A).then(async()=>{if(this.updateGenerator(),this.isInitialized=!0,A.onLoad){const c=A.onLoad(this);c instanceof Promise&&await c}return this});else if(this.isInitialized=!0,this.initialized=Promise.resolve(this),A.onLoad){const c=A.onLoad(this);c instanceof Promise&&(this.initialized=c.then(()=>this))}}async asyncInitialize(A){const{url:n,fileBytes:t,fileType:s,fileName:a,maxSplats:i,constructSplats:r,splatEncoding:l}=A;if(n||t||r){const o={url:n,fileBytes:t,fileType:s,fileName:a,maxSplats:i,construct:r,splatEncoding:l};this.packedSplats.reinitialize(o)}this.packedSplats&&(await this.packedSplats.initialized,this.numSplats=this.packedSplats.numSplats,this.updateGenerator())}static async staticInitialize(){await Ot(),At.isStaticInitialized=!0}pushSplat(A,n,t,s,a){this.packedSplats.pushSplat(A,n,t,s,a)}forEachSplat(A){this.packedSplats.forEachSplat(A)}dispose(){this.packedSplats.dispose()}getBoundingBox(A=!0){if(!this.initialized)throw new Error("Cannot get bounding box before SplatMesh is initialized");const n=new d(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY),t=new d(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY),s=new d,a=[-1,1];return this.packedSplats.forEachSplat((r,l,o,c,g,I)=>{if(A)n.min(l),t.max(l);else for(const B of a)for(const C of a)for(const h of a)s.set(B*o.x,C*o.y,h*o.z),s.applyQuaternion(c),s.add(l),n.min(s),t.max(s)}),new it(n,t)}constructGenerator(A){const{transform:n,viewToObject:t,recolor:s}=A,a=mA({index:"int"},{gsplat:U},({index:i})=>{if(!i)throw new Error("index is undefined");let r=rn(this.packedSplats.dyno,i);if(this.maxSh>=1){const{sh1Texture:o,sh2Texture:c,sh3Texture:g}=this.ensureShTextures();if(o){let I=function(f,p){const{x:y,y:w}=da(p).outputs,m=nn(_A(y,w),an("float",.5)),x=nn(wt(w,y),an("float",.5));return _A(m,nn(f,x))};const B=t.translate,{center:C}=pn(r).outputs,h=Qa(wt(C,B)),u=Ka(r,o,h);let E=I(u,this.packedSplats.dynoSh1MinMax);if(this.maxSh>=2&&c){const f=Pa(r,c,h);E=_A(E,I(f,this.packedSplats.dynoSh2MinMax))}if(this.maxSh>=3&&g){const f=Xa(r,g,h);E=_A(E,I(f,this.packedSplats.dynoSh3MinMax))}let{rgba:Q}=pn(r).outputs;Q=_A(Q,ya(E,an("float",0))),r=zn({gsplat:r,rgba:Q})}}if(this.splatRgba){const o=Ra(this.splatRgba.dyno,i);r=zn({gsplat:r,rgba:o})}this.skinning&&(r=this.skinning.modify(r)),this.objectModifier&&(r=this.objectModifier.apply({gsplat:r}).gsplat),r=n.applyGsplat(r);const l=nn(s,pn(r).outputs.rgba);return r=zn({gsplat:r,rgba:l}),this.rgbaDisplaceEdits&&(r=this.rgbaDisplaceEdits.modify(r)),this.worldModifier&&(r=this.worldModifier.apply({gsplat:r}).gsplat),{gsplat:r}});this.generator=a}updateGenerator(){this.constructGenerator(this.context)}update({time:A,viewToWorld:n,deltaTime:t,globalEdits:s}){var a;this.numSplats=this.packedSplats.numSplats,this.context.time.value=A,this.context.deltaTime.value=t,At.dynoTime.value=A;const{transform:i,viewToObject:r,recolor:l}=this.context;let o=i.update(this);this.context.viewToWorld.updateFromMatrix(n)&&this.enableViewToWorld&&(o=!0);const c=n.clone().invert();this.context.worldToView.updateFromMatrix(c)&&this.enableWorldToView&&(o=!0);const B=new DA().compose(i.translate.value,i.rotate.value,new d().setScalar(i.scale.value)).invert().multiply(n);r.updateFromMatrix(B)&&(this.enableViewToObject||this.packedSplats.extra.sh1)&&(o=!0);const C=new gA(this.recolor.r,this.recolor.g,this.recolor.b,this.opacity);C.equals(l.value)||(l.value.copy(C),o=!0);const h=this.editable?(this.edits??[]).concat(s):[];this.editable&&!this.edits&&this.traverseVisible(E=>{E instanceof oe&&h.push(E)}),h.sort((E,Q)=>E.ordering-Q.ordering);const u=h.map(E=>{if(E.sdfs!=null)return{edit:E,sdfs:E.sdfs};const Q=[];return E.traverseVisible(f=>{f instanceof Ta&&Q.push(f)}),{edit:E,sdfs:Q}});if(u.length>0&&!this.rgbaDisplaceEdits){const E=u.length,Q=u.reduce((f,p)=>f+p.sdfs.length,0);this.rgbaDisplaceEdits=new Ya({maxEdits:E,maxSdfs:Q}),this.updateGenerator()}if(this.rgbaDisplaceEdits){const E=this.rgbaDisplaceEdits.update(u);o||(o=E.updated),E.dynoUpdated&&this.updateGenerator()}o&&this.updateVersion(),(a=this.onFrame)==null||a.call(this,{mesh:this,time:A,deltaTime:t})}raycast(A,n){var t,s;if(!this.packedSplats.packedArray||!this.packedSplats.numSplats)return;const{near:a,far:i,ray:r}=A,l=this.matrixWorld.clone().invert(),o=new Ft().setFromMatrix4(l),c=r.origin.clone().applyMatrix4(l),g=r.direction.clone().applyMatrix3(o),I=new d;l.decompose(new d,new $,I),(I.x*I.y*I.z)**(1/3);const C=ys(c.x,c.y,c.z,g.x,g.y,g.z,a,i,this.packedSplats.numSplats,this.packedSplats.packedArray,!0,((t=this.packedSplats.splatEncoding)==null?void 0:t.lnScaleMin)??pA,((s=this.packedSplats.splatEncoding)==null?void 0:s.lnScaleMax)??yA);for(const h of C){const u=r.direction.clone().multiplyScalar(h).add(r.origin);n.push({distance:h,point:u,object:this})}}ensureShTextures(){if(!this.packedSplats.extra.sh1)return{};let A=this.packedSplats.extra.sh1Texture;if(!A){let s=this.packedSplats.extra.sh1;const{width:a,height:i,depth:r,maxSplats:l}=nA(s.length/2);if(s.length<l*2){const c=new Uint32Array(l*2);c.set(s),this.packedSplats.extra.sh1=c,s=c}const o=new UA(s,a,i,r);o.format=Te,o.type=TA,o.internalFormat="RG32UI",o.needsUpdate=!0,A=new qn({value:o,key:"sh1"}),this.packedSplats.extra.sh1Texture=A}if(!this.packedSplats.extra.sh2)return{sh1Texture:A};let n=this.packedSplats.extra.sh2Texture;if(!n){let s=this.packedSplats.extra.sh2;const{width:a,height:i,depth:r,maxSplats:l}=nA(s.length/4);if(s.length<l*4){const c=new Uint32Array(l*4);c.set(s),this.packedSplats.extra.sh2=c,s=c}const o=new UA(s,a,i,r);o.format=VA,o.type=TA,o.internalFormat="RGBA32UI",o.needsUpdate=!0,n=new qn({value:o,key:"sh2"}),this.packedSplats.extra.sh2Texture=n}if(!this.packedSplats.extra.sh3)return{sh1Texture:A,sh2Texture:n};let t=this.packedSplats.extra.sh3Texture;if(!t){let s=this.packedSplats.extra.sh3;const{width:a,height:i,depth:r,maxSplats:l}=nA(s.length/4);if(s.length<l*4){const c=new Uint32Array(l*4);c.set(s),this.packedSplats.extra.sh3=c,s=c}const o=new UA(s,a,i,r);o.format=VA,o.type=TA,o.internalFormat="RGBA32UI",o.needsUpdate=!0,t=new qn({value:o,key:"sh3"}),this.packedSplats.extra.sh3Texture=t}return{sh1Texture:A,sh2Texture:n,sh3Texture:t}}};cn.staticInitialized=cn.staticInitialize();cn.isStaticInitialized=!1;cn.dynoTime=new ln({value:0});let xn=cn;const Ja=j(`
  vec3 evaluateSH1(Gsplat gsplat, usampler2DArray sh1, vec3 viewDir) {
    // Extract sint7 values packed into 2 x uint32
    uvec2 packed = texelFetch(sh1, splatTexCoord(gsplat.index), 0).rg;
    vec3 sh1_0 = vec3(ivec3(
      int(packed.x << 25u) >> 25,
      int(packed.x << 18u) >> 25,
      int(packed.x << 11u) >> 25
    )) / 63.0;
    vec3 sh1_1 = vec3(ivec3(
      int(packed.x << 4u) >> 25,
      int((packed.x >> 3u) | (packed.y << 29u)) >> 25,
      int(packed.y << 22u) >> 25
    )) / 63.0;
    vec3 sh1_2 = vec3(ivec3(
      int(packed.y << 15u) >> 25,
      int(packed.y << 8u) >> 25,
      int(packed.y << 1u) >> 25
    )) / 63.0;

    return sh1_0 * (-0.4886025 * viewDir.y)
      + sh1_1 * (0.4886025 * viewDir.z)
      + sh1_2 * (-0.4886025 * viewDir.x);
  }
`),qa=j(`
  vec3 evaluateSH2(Gsplat gsplat, usampler2DArray sh2, vec3 viewDir) {
    // Extract sint8 values packed into 4 x uint32
    uvec4 packed = texelFetch(sh2, splatTexCoord(gsplat.index), 0);
    vec3 sh2_0 = vec3(ivec3(
      int(packed.x << 24u) >> 24,
      int(packed.x << 16u) >> 24,
      int(packed.x << 8u) >> 24
    )) / 127.0;
    vec3 sh2_1 = vec3(ivec3(
      int(packed.x) >> 24,
      int(packed.y << 24u) >> 24,
      int(packed.y << 16u) >> 24
    )) / 127.0;
    vec3 sh2_2 = vec3(ivec3(
      int(packed.y << 8u) >> 24,
      int(packed.y) >> 24,
      int(packed.z << 24u) >> 24
    )) / 127.0;
    vec3 sh2_3 = vec3(ivec3(
      int(packed.z << 16u) >> 24,
      int(packed.z << 8u) >> 24,
      int(packed.z) >> 24
    )) / 127.0;
    vec3 sh2_4 = vec3(ivec3(
      int(packed.w << 24u) >> 24,
      int(packed.w << 16u) >> 24,
      int(packed.w << 8u) >> 24
    )) / 127.0;

    return sh2_0 * (1.0925484 * viewDir.x * viewDir.y)
      + sh2_1 * (-1.0925484 * viewDir.y * viewDir.z)
      + sh2_2 * (0.3153915 * (2.0 * viewDir.z * viewDir.z - viewDir.x * viewDir.x - viewDir.y * viewDir.y))
      + sh2_3 * (-1.0925484 * viewDir.x * viewDir.z)
      + sh2_4 * (0.5462742 * (viewDir.x * viewDir.x - viewDir.y * viewDir.y));
  }
`),Ha=j(`
  vec3 evaluateSH3(Gsplat gsplat, usampler2DArray sh3, vec3 viewDir) {
    // Extract sint6 values packed into 4 x uint32
    uvec4 packed = texelFetch(sh3, splatTexCoord(gsplat.index), 0);
    vec3 sh3_0 = vec3(ivec3(
      int(packed.x << 26u) >> 26,
      int(packed.x << 20u) >> 26,
      int(packed.x << 14u) >> 26
    )) / 31.0;
    vec3 sh3_1 = vec3(ivec3(
      int(packed.x << 8u) >> 26,
      int(packed.x << 2u) >> 26,
      int((packed.x >> 4u) | (packed.y << 28u)) >> 26
    )) / 31.0;
    vec3 sh3_2 = vec3(ivec3(
      int(packed.y << 22u) >> 26,
      int(packed.y << 16u) >> 26,
      int(packed.y << 10u) >> 26
    )) / 31.0;
    vec3 sh3_3 = vec3(ivec3(
      int(packed.y << 4u) >> 26,
      int((packed.y >> 2u) | (packed.z << 30u)) >> 26,
      int(packed.z << 24u) >> 26
    )) / 31.0;
    vec3 sh3_4 = vec3(ivec3(
      int(packed.z << 18u) >> 26,
      int(packed.z << 12u) >> 26,
      int(packed.z << 6u) >> 26
    )) / 31.0;
    vec3 sh3_5 = vec3(ivec3(
      int(packed.z) >> 26,
      int(packed.w << 26u) >> 26,
      int(packed.w << 20u) >> 26
    )) / 31.0;
    vec3 sh3_6 = vec3(ivec3(
      int(packed.w << 14u) >> 26,
      int(packed.w << 8u) >> 26,
      int(packed.w << 2u) >> 26
    )) / 31.0;

    float xx = viewDir.x * viewDir.x;
    float yy = viewDir.y * viewDir.y;
    float zz = viewDir.z * viewDir.z;
    float xy = viewDir.x * viewDir.y;
    float yz = viewDir.y * viewDir.z;
    float zx = viewDir.z * viewDir.x;

    return sh3_0 * (-0.5900436 * viewDir.y * (3.0 * xx - yy))
      + sh3_1 * (2.8906114 * xy * viewDir.z) +
      + sh3_2 * (-0.4570458 * viewDir.y * (4.0 * zz - xx - yy))
      + sh3_3 * (0.3731763 * viewDir.z * (2.0 * zz - 3.0 * xx - 3.0 * yy))
      + sh3_4 * (-0.4570458 * viewDir.x * (4.0 * zz - xx - yy))
      + sh3_5 * (1.4453057 * viewDir.z * (xx - yy))
      + sh3_6 * (-0.5900436 * viewDir.x * (xx - 3.0 * yy));
  }
`);function Ka(e,A,n){return bn({inTypes:{gsplat:U,sh1:"usampler2DArray",viewDir:"vec3"},outTypes:{rgb:"vec3"},inputs:{gsplat:e,sh1:A,viewDir:n},globals:()=>[CA,Ja],statements:({inputs:t,outputs:s})=>BA(`
        if (isGsplatActive(${t.gsplat}.flags)) {
          ${s.rgb} = evaluateSH1(${t.gsplat}, ${t.sh1}, ${t.viewDir});
        } else {
          ${s.rgb} = vec3(0.0);
        }
      `)}).outputs.rgb}function Pa(e,A,n){return bn({inTypes:{gsplat:U,sh2:"usampler2DArray",viewDir:"vec3"},outTypes:{rgb:"vec3"},inputs:{gsplat:e,sh2:A,viewDir:n},globals:()=>[CA,qa],statements:({inputs:t,outputs:s})=>BA(`
        if (isGsplatActive(${t.gsplat}.flags)) {
          ${s.rgb} = evaluateSH2(${t.gsplat}, ${t.sh2}, ${t.viewDir});
        } else {
          ${s.rgb} = vec3(0.0);
        }
      `)}).outputs.rgb}function Xa(e,A,n){return bn({inTypes:{gsplat:U,sh3:"usampler2DArray",viewDir:"vec3"},outTypes:{rgb:"vec3"},inputs:{gsplat:e,sh3:A,viewDir:n},globals:()=>[CA,Ha],statements:({inputs:t,outputs:s})=>BA(`
        if (isGsplatActive(${t.gsplat}.flags)) {
          ${s.rgb} = evaluateSH3(${t.gsplat}, ${t.sh3}, ${t.viewDir});
        } else {
          ${s.rgb} = vec3(0.0);
        }
      `)}).outputs.rgb}const Ie=class yn{constructor({fileBytes:A}){this.header="",this.littleEndian=!0,this.elements={},this.comments=[],this.data=null,this.numSplats=0,this.fileBytes=A instanceof ArrayBuffer?new Uint8Array(A):A}async parseHeader(){const n=new ReadableStream({start:i=>{i.enqueue(this.fileBytes.slice(0,65536)),i.close()}}).pipeThrough(new TextDecoderStream).getReader();this.header="";const t=`end_header
`;for(;;){const{value:i,done:r}=await n.read();if(r)throw new Error("Failed to read header");this.header+=i;const l=this.header.indexOf(t);if(l>=0){this.header=this.header.slice(0,l+t.length);break}}const s=new TextEncoder().encode(this.header).length;this.data=new DataView(this.fileBytes.buffer,s),this.elements={};let a=null;this.comments=[],this.header.trim().split(`
`).forEach((i,r)=>{const l=i.trim();if(r===0){if(l!=="ply")throw new Error("Invalid PLY header");return}if(l.length===0)return;const o=l.split(" ");switch(o[0]){case"format":if(o[1]==="binary_little_endian")this.littleEndian=!0;else if(o[1]==="binary_big_endian")this.littleEndian=!1;else throw new Error(`Unsupported PLY format: ${o[1]}`);if(o[2]!=="1.0")throw new Error(`Unsupported PLY version: ${o[2]}`);break;case"end_header":break;case"comment":this.comments.push(l.slice(8));break;case"element":{const c=o[1];a={name:c,count:Number.parseInt(o[2]),properties:{}},this.elements[c]=a;break}case"property":if(a==null)throw new Error("Property must be inside an element");o[1]==="list"?a.properties[o[4]]={isList:!0,type:o[3],countType:o[2]}:a.properties[o[2]]={isList:!1,type:o[1]};break}}),this.elements.vertex&&(this.numSplats=this.elements.vertex.count)}parseData(A){let n=0;const t=this.data;if(t==null)throw new Error("No data to parse");for(const s in this.elements){const a=this.elements[s],{count:i,properties:r}=a,l={},o=[];for(const[g,I]of Object.entries(r))I.isList?(l[g]=[],o.push(()=>{const B=l[g];B.length=fn[I.countType](t,n,this.littleEndian),n+=OA[I.countType];for(let C=0;C<B.length;C++)B[C]=fn[I.type](t,n,this.littleEndian),n+=OA[I.type]})):(l[g]=0,o.push(()=>{l[g]=fn[I.type](t,n,this.littleEndian),n+=OA[I.type]}));const c=A(a)??(()=>{});for(let g=0;g<i;g++){for(const I of o)I();c(g,l)}}}parseSplats(A,n){if(this.elements.vertex==null)throw new Error("No vertex element found");let t=!1;const s=[];let a=0,i=[],r=[],l=[],o,c,g;function I(){const E=Va[a];i=new Array(3).fill(null).flatMap((Q,f)=>[0,1,2].map((p,y)=>`f_rest_${f+y*E/3}`)),r=new Array(5).fill(null).flatMap((Q,f)=>[0,1,2].map((p,y)=>`f_rest_${3+f+y*E/3}`)),l=new Array(7).fill(null).flatMap((Q,f)=>[0,1,2].map((p,y)=>`f_rest_${8+f+y*E/3}`)),o=a>=1?new Float32Array(9):void 0,c=a>=2?new Float32Array(15):void 0,g=a>=3?new Float32Array(21):void 0}function B(E,Q){if(!o)throw new Error("Missing sh1");for(const[f,p]of i.entries())o[f]=Q[p]*8/255-4;if(c)for(const[f,p]of r.entries())c[f]=Q[p]*8/255-4;if(g)for(const[f,p]of l.entries())g[f]=Q[p]*8/255-4;n==null||n(E,o,c,g)}function C(E){const{min_x:Q,min_y:f,min_z:p,max_x:y,max_y:w,max_z:m,min_scale_x:x,min_scale_y:D,min_scale_z:N,max_scale_x:M,max_scale_y:_,max_scale_z:tA}=E.properties;if(!Q||!f||!p||!y||!w||!m||!x||!D||!N||!M||!_||!tA)throw new Error("Missing PLY chunk properties");return t=!0,(O,V)=>{const{min_x:F,min_y:T,min_z:Z,max_x:Y,max_y:eA,max_z:H,min_scale_x:cA,min_scale_y:W,min_scale_z:EA,max_scale_x:sA,max_scale_y:IA,max_scale_z:b,min_r:hA,min_g:aA,min_b:fA,max_r:iA,max_g:wA,max_b:xA}=V;s.push({min_x:F,min_y:T,min_z:Z,max_x:Y,max_y:eA,max_z:H,min_scale_x:cA,min_scale_y:W,min_scale_z:EA,max_scale_x:sA,max_scale_y:IA,max_scale_z:b,min_r:hA,min_g:aA,min_b:fA,max_r:iA,max_g:wA,max_b:xA})}}function h(E){if(n&&E.name==="sh")return a=bt(E.properties),I(),B;if(E.name!=="vertex")return null;const{packed_position:Q,packed_rotation:f,packed_scale:p,packed_color:y}=E.properties;if(!Q||!f||!p||!y)throw new Error("Missing PLY properties: packed_position, packed_rotation, packed_scale, packed_color");const w=Math.sqrt(2);return(m,x)=>{const D=s[m>>>8];if(D==null)throw new Error("Missing PLY chunk");const{min_x:N,min_y:M,min_z:_,max_x:tA,max_y:O,max_z:V,min_scale_x:F,min_scale_y:T,min_scale_z:Z,max_scale_x:Y,max_scale_y:eA,max_scale_z:H,min_r:cA,min_g:W,min_b:EA,max_r:sA,max_g:IA,max_b:b}=D,{packed_position:hA,packed_rotation:aA,packed_scale:fA,packed_color:iA}=x,wA=(hA>>>21&2047)/2047*(tA-N)+N,xA=(hA>>>11&1023)/1023*(O-M)+M,Rn=(hA&2047)/2047*(V-_)+_,zA=((aA>>>20&1023)/1023-.5)*w,JA=((aA>>>10&1023)/1023-.5)*w,qA=((aA&1023)/1023-.5)*w,HA=Math.sqrt(Math.max(0,1-zA*zA-JA*JA-qA*qA)),AA=aA>>>30,MA=AA===0?zA:AA===1?HA:JA,we=AA<=1?JA:AA===2?HA:qA,xe=AA<=2?qA:HA,Se=AA===0?HA:zA,be=Math.exp((fA>>>21&2047)/2047*(Y-F)+F),De=Math.exp((fA>>>11&1023)/1023*(eA-T)+T),ve=Math.exp((fA&2047)/2047*(H-Z)+Z),Me=(iA>>>24&255)/255*((sA??1)-(cA??0))+(cA??0),ke=(iA>>>16&255)/255*((IA??1)-(W??0))+(W??0),_e=(iA>>>8&255)/255*((b??1)-(EA??0))+(EA??0),Fe=(iA&255)/255;A(m,wA,xA,Rn,be,De,ve,MA,we,xe,Se,Fe,Me,ke,_e)}}const u=E=>{if(E.name==="chunk")return C(E);if(t)return h(E);if(E.name!=="vertex")return null;const{x:Q,y:f,z:p,scale_0:y,scale_1:w,scale_2:m,rot_0:x,rot_1:D,rot_2:N,rot_3:M,opacity:_,f_dc_0:tA,f_dc_1:O,f_dc_2:V,red:F,green:T,blue:Z,alpha:Y}=E.properties;if(!Q||!f||!p)throw new Error("Missing PLY properties: x, y, z");const eA=y&&w&&m,H=x&&D&&N&&M,cA=Y!=null?Qn[Y.type]:1,W=F!=null?Qn[F.type]:1,EA=T!=null?Qn[T.type]:1,sA=Z!=null?Qn[Z.type]:1;return a=bt(E.properties),I(),(IA,b)=>{const hA=eA?Math.exp(b.scale_0):yn.defaultPointScale,aA=eA?Math.exp(b.scale_1):yn.defaultPointScale,fA=eA?Math.exp(b.scale_2):yn.defaultPointScale,iA=H?b.rot_1:0,wA=H?b.rot_2:0,xA=H?b.rot_3:0,Rn=H?b.rot_0:1,zA=_!=null?1/(1+Math.exp(-b.opacity)):Y!=null?b.alpha/cA:1,JA=tA!=null?b.f_dc_0*En+.5:F!=null?b.red/W:1,qA=O!=null?b.f_dc_1*En+.5:T!=null?b.green/EA:1,HA=V!=null?b.f_dc_2*En+.5:Z!=null?b.blue/sA:1;if(A(IA,b.x,b.y,b.z,hA,aA,fA,iA,wA,xA,Rn,zA,JA,qA,HA),n&&o){if(o)for(const[AA,MA]of i.entries())o[AA]=b[MA];if(c)for(const[AA,MA]of r.entries())c[AA]=b[MA];if(g)for(const[AA,MA]of l.entries())g[AA]=b[MA];n(IA,o,c,g)}}};this.parseData(u)}injectRgba(A){let n=0;const t=this.data;if(t==null)throw new Error("No parsed data");if(A.length!==this.numSplats*4)throw new Error("Invalid RGBA array length");for(const s in this.elements){const a=this.elements[s],{count:i,properties:r}=a,l=[];let o=0;const c=s==="vertex";if(c){for(const g of["opacity","f_dc_0","f_dc_1","f_dc_2"])if(!r[g]||r[g].type!=="float")throw new Error(`Can't injectRgba due to property: ${g}`)}for(const[g,I]of Object.entries(r))if(I.isList)l.push(()=>{const B=fn[I.countType](t,n,this.littleEndian);n+=OA[I.countType],n+=B*OA[I.type]});else{if(c)if(g==="f_dc_0"||g==="f_dc_1"||g==="f_dc_2"){const B=Number.parseInt(g.slice(5));l.push(()=>{const C=(A[o+B]/255-.5)/En;St[I.type](t,n,this.littleEndian,C)})}else g==="opacity"&&l.push(()=>{const B=Math.max(-100,Math.min(100,-Math.log(1/(A[o+3]/255)-1)));St[I.type](t,n,this.littleEndian,B)});l.push(()=>{n+=OA[I.type]})}for(let g=0;g<i;g++){for(const I of l)I();c&&(o+=4)}}}};Ie.defaultPointScale=.001;let ja=Ie;const En=.28209479177387814,fn={char:(e,A,n)=>e.getInt8(A),uchar:(e,A,n)=>e.getUint8(A),short:(e,A,n)=>e.getInt16(A,n),ushort:(e,A,n)=>e.getUint16(A,n),int:(e,A,n)=>e.getInt32(A,n),uint:(e,A,n)=>e.getUint32(A,n),float:(e,A,n)=>e.getFloat32(A,n),double:(e,A,n)=>e.getFloat64(A,n)},St={char:(e,A,n,t)=>{e.setInt8(A,t)},uchar:(e,A,n,t)=>{e.setUint8(A,t)},short:(e,A,n,t)=>{e.setInt16(A,t,n)},ushort:(e,A,n,t)=>{e.setUint16(A,t,n)},int:(e,A,n,t)=>{e.setInt32(A,t,n)},uint:(e,A,n,t)=>{e.setUint32(A,t,n)},float:(e,A,n,t)=>{e.setFloat32(A,t,n)},double:(e,A,n,t)=>{e.setFloat64(A,t,n)}},OA={char:1,uchar:1,short:2,ushort:2,int:4,uint:4,float:4,double:8},Qn={char:127,uchar:255,short:32767,ushort:65535,int:2147483647,uint:4294967295,float:1,double:1},Oa={0:0,9:1,24:2,45:3},Va={0:0,1:9,2:24,3:45};function bt(e){let A=0;for(;e[`f_rest_${A}`];)A+=1;const n=Oa[A];if(n==null)throw new Error(`Unsupported number of SH coefficients: ${A}`);return n}const he=`(function() {
  "use strict";
  let wasm;
  const cachedTextDecoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-8", { ignoreBOM: true, fatal: true }) : { decode: () => {
    throw Error("TextDecoder not available");
  } };
  if (typeof TextDecoder !== "undefined") {
    cachedTextDecoder.decode();
  }
  let cachedUint8ArrayMemory0 = null;
  function getUint8ArrayMemory0() {
    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {
      cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);
    }
    return cachedUint8ArrayMemory0;
  }
  function getStringFromWasm0(ptr, len) {
    ptr = ptr >>> 0;
    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));
  }
  function sort_splats(num_splats, readback, ordering) {
    const ret = wasm.sort_splats(num_splats, readback, ordering);
    return ret >>> 0;
  }
  function sort32_splats(num_splats, readback, ordering) {
    const ret = wasm.sort32_splats(num_splats, readback, ordering);
    return ret >>> 0;
  }
  async function __wbg_load(module, imports) {
    if (typeof Response === "function" && module instanceof Response) {
      if (typeof WebAssembly.instantiateStreaming === "function") {
        try {
          return await WebAssembly.instantiateStreaming(module, imports);
        } catch (e) {
          if (module.headers.get("Content-Type") != "application/wasm") {
            console.warn("\`WebAssembly.instantiateStreaming\` failed because your server does not serve Wasm with \`application/wasm\` MIME type. Falling back to \`WebAssembly.instantiate\` which is slower. Original error:\\n", e);
          } else {
            throw e;
          }
        }
      }
      const bytes = await module.arrayBuffer();
      return await WebAssembly.instantiate(bytes, imports);
    } else {
      const instance = await WebAssembly.instantiate(module, imports);
      if (instance instanceof WebAssembly.Instance) {
        return { instance, module };
      } else {
        return instance;
      }
    }
  }
  function __wbg_get_imports() {
    const imports = {};
    imports.wbg = {};
    imports.wbg.__wbg_buffer_609cc3eee51ed158 = function(arg0) {
      const ret = arg0.buffer;
      return ret;
    };
    imports.wbg.__wbg_length_3b4f022188ae8db6 = function(arg0) {
      const ret = arg0.length;
      return ret;
    };
    imports.wbg.__wbg_length_6ca527665d89694d = function(arg0) {
      const ret = arg0.length;
      return ret;
    };
    imports.wbg.__wbg_length_8cfd2c6409af88ad = function(arg0) {
      const ret = arg0.length;
      return ret;
    };
    imports.wbg.__wbg_new_9fee97a409b32b68 = function(arg0) {
      const ret = new Uint16Array(arg0);
      return ret;
    };
    imports.wbg.__wbg_new_e3b321dcfef89fc7 = function(arg0) {
      const ret = new Uint32Array(arg0);
      return ret;
    };
    imports.wbg.__wbg_newwithbyteoffsetandlength_e6b7e69acd4c7354 = function(arg0, arg1, arg2) {
      const ret = new Float32Array(arg0, arg1 >>> 0, arg2 >>> 0);
      return ret;
    };
    imports.wbg.__wbg_newwithbyteoffsetandlength_f1dead44d1fc7212 = function(arg0, arg1, arg2) {
      const ret = new Uint32Array(arg0, arg1 >>> 0, arg2 >>> 0);
      return ret;
    };
    imports.wbg.__wbg_newwithlength_5a5efe313cfd59f1 = function(arg0) {
      const ret = new Float32Array(arg0 >>> 0);
      return ret;
    };
    imports.wbg.__wbg_set_10bad9bee0e9c58b = function(arg0, arg1, arg2) {
      arg0.set(arg1, arg2 >>> 0);
    };
    imports.wbg.__wbg_set_d23661d19148b229 = function(arg0, arg1, arg2) {
      arg0.set(arg1, arg2 >>> 0);
    };
    imports.wbg.__wbg_set_f4f1f0daa30696fc = function(arg0, arg1, arg2) {
      arg0.set(arg1, arg2 >>> 0);
    };
    imports.wbg.__wbg_subarray_3aaeec89bb2544f0 = function(arg0, arg1, arg2) {
      const ret = arg0.subarray(arg1 >>> 0, arg2 >>> 0);
      return ret;
    };
    imports.wbg.__wbg_subarray_769e1e0f81bb259b = function(arg0, arg1, arg2) {
      const ret = arg0.subarray(arg1 >>> 0, arg2 >>> 0);
      return ret;
    };
    imports.wbg.__wbindgen_init_externref_table = function() {
      const table = wasm.__wbindgen_export_0;
      const offset = table.grow(4);
      table.set(0, void 0);
      table.set(offset + 0, void 0);
      table.set(offset + 1, null);
      table.set(offset + 2, true);
      table.set(offset + 3, false);
    };
    imports.wbg.__wbindgen_memory = function() {
      const ret = wasm.memory;
      return ret;
    };
    imports.wbg.__wbindgen_throw = function(arg0, arg1) {
      throw new Error(getStringFromWasm0(arg0, arg1));
    };
    return imports;
  }
  function __wbg_finalize_init(instance, module) {
    wasm = instance.exports;
    __wbg_init.__wbindgen_wasm_module = module;
    cachedUint8ArrayMemory0 = null;
    wasm.__wbindgen_start();
    return wasm;
  }
  async function __wbg_init(module_or_path) {
    if (wasm !== void 0) return wasm;
    if (typeof module_or_path !== "undefined") {
      if (Object.getPrototypeOf(module_or_path) === Object.prototype) {
        ({ module_or_path } = module_or_path);
      } else {
        console.warn("using deprecated parameters for the initialization function; pass a single object instead");
      }
    }
    if (typeof module_or_path === "undefined") {
      module_or_path = new URL("data:application/wasm;base64,", self.location.href);
    }
    const imports = __wbg_get_imports();
    if (typeof module_or_path === "string" || typeof Request === "function" && module_or_path instanceof Request || typeof URL === "function" && module_or_path instanceof URL) {
      module_or_path = fetch(module_or_path);
    }
    const { instance, module } = await __wbg_load(await module_or_path, imports);
    return __wbg_finalize_init(instance, module);
  }
  var ch2 = {};
  var wk = function(c, id, msg, transfer, cb) {
    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([
      c + ';addEventListener("error",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'
    ], { type: "text/javascript" }))));
    w.onmessage = function(e) {
      var d = e.data, ed = d.$e$;
      if (ed) {
        var err2 = new Error(ed[0]);
        err2["code"] = ed[1];
        err2.stack = ed[2];
        cb(err2, null);
      } else
        cb(null, d);
    };
    w.postMessage(msg, transfer);
    return w;
  };
  var u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;
  var fleb = new u8([
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    0,
    /* unused */
    0,
    0,
    /* impossible */
    0
  ]);
  var fdeb = new u8([
    0,
    0,
    0,
    0,
    1,
    1,
    2,
    2,
    3,
    3,
    4,
    4,
    5,
    5,
    6,
    6,
    7,
    7,
    8,
    8,
    9,
    9,
    10,
    10,
    11,
    11,
    12,
    12,
    13,
    13,
    /* unused */
    0,
    0
  ]);
  var clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
  var freb = function(eb, start) {
    var b = new u16(31);
    for (var i2 = 0; i2 < 31; ++i2) {
      b[i2] = start += 1 << eb[i2 - 1];
    }
    var r = new i32(b[30]);
    for (var i2 = 1; i2 < 30; ++i2) {
      for (var j = b[i2]; j < b[i2 + 1]; ++j) {
        r[j] = j - b[i2] << 5 | i2;
      }
    }
    return { b, r };
  };
  var _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;
  fl[28] = 258, revfl[258] = 28;
  var _b = freb(fdeb, 0), fd = _b.b;
  var rev = new u16(32768);
  for (var i = 0; i < 32768; ++i) {
    var x = (i & 43690) >> 1 | (i & 21845) << 1;
    x = (x & 52428) >> 2 | (x & 13107) << 2;
    x = (x & 61680) >> 4 | (x & 3855) << 4;
    rev[i] = ((x & 65280) >> 8 | (x & 255) << 8) >> 1;
  }
  var hMap = function(cd, mb, r) {
    var s = cd.length;
    var i2 = 0;
    var l = new u16(mb);
    for (; i2 < s; ++i2) {
      if (cd[i2])
        ++l[cd[i2] - 1];
    }
    var le = new u16(mb);
    for (i2 = 1; i2 < mb; ++i2) {
      le[i2] = le[i2 - 1] + l[i2 - 1] << 1;
    }
    var co;
    if (r) {
      co = new u16(1 << mb);
      var rvb = 15 - mb;
      for (i2 = 0; i2 < s; ++i2) {
        if (cd[i2]) {
          var sv = i2 << 4 | cd[i2];
          var r_1 = mb - cd[i2];
          var v = le[cd[i2] - 1]++ << r_1;
          for (var m = v | (1 << r_1) - 1; v <= m; ++v) {
            co[rev[v] >> rvb] = sv;
          }
        }
      }
    } else {
      co = new u16(s);
      for (i2 = 0; i2 < s; ++i2) {
        if (cd[i2]) {
          co[i2] = rev[le[cd[i2] - 1]++] >> 15 - cd[i2];
        }
      }
    }
    return co;
  };
  var flt = new u8(288);
  for (var i = 0; i < 144; ++i)
    flt[i] = 8;
  for (var i = 144; i < 256; ++i)
    flt[i] = 9;
  for (var i = 256; i < 280; ++i)
    flt[i] = 7;
  for (var i = 280; i < 288; ++i)
    flt[i] = 8;
  var fdt = new u8(32);
  for (var i = 0; i < 32; ++i)
    fdt[i] = 5;
  var flrm = /* @__PURE__ */ hMap(flt, 9, 1);
  var fdrm = /* @__PURE__ */ hMap(fdt, 5, 1);
  var max = function(a) {
    var m = a[0];
    for (var i2 = 1; i2 < a.length; ++i2) {
      if (a[i2] > m)
        m = a[i2];
    }
    return m;
  };
  var bits = function(d, p, m) {
    var o = p / 8 | 0;
    return (d[o] | d[o + 1] << 8) >> (p & 7) & m;
  };
  var bits16 = function(d, p) {
    var o = p / 8 | 0;
    return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >> (p & 7);
  };
  var shft = function(p) {
    return (p + 7) / 8 | 0;
  };
  var slc = function(v, s, e) {
    if (s == null || s < 0)
      s = 0;
    if (e == null || e > v.length)
      e = v.length;
    return new u8(v.subarray(s, e));
  };
  var ec = [
    "unexpected EOF",
    "invalid block type",
    "invalid length/literal",
    "invalid distance",
    "stream finished",
    "no stream handler",
    ,
    "no callback",
    "invalid UTF-8 data",
    "extra field too long",
    "date not in range 1980-2099",
    "filename too long",
    "stream finishing",
    "invalid zip data"
    // determined by unknown compression method
  ];
  var err = function(ind, msg, nt) {
    var e = new Error(msg || ec[ind]);
    e.code = ind;
    if (Error.captureStackTrace)
      Error.captureStackTrace(e, err);
    if (!nt)
      throw e;
    return e;
  };
  var inflt = function(dat, st, buf, dict) {
    var sl = dat.length, dl = dict ? dict.length : 0;
    if (!sl || st.f && !st.l)
      return buf || new u8(0);
    var noBuf = !buf;
    var resize = noBuf || st.i != 2;
    var noSt = st.i;
    if (noBuf)
      buf = new u8(sl * 3);
    var cbuf = function(l2) {
      var bl = buf.length;
      if (l2 > bl) {
        var nbuf = new u8(Math.max(bl * 2, l2));
        nbuf.set(buf);
        buf = nbuf;
      }
    };
    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;
    var tbts = sl * 8;
    do {
      if (!lm) {
        final = bits(dat, pos, 1);
        var type = bits(dat, pos + 1, 3);
        pos += 3;
        if (!type) {
          var s = shft(pos) + 4, l = dat[s - 4] | dat[s - 3] << 8, t = s + l;
          if (t > sl) {
            if (noSt)
              err(0);
            break;
          }
          if (resize)
            cbuf(bt + l);
          buf.set(dat.subarray(s, t), bt);
          st.b = bt += l, st.p = pos = t * 8, st.f = final;
          continue;
        } else if (type == 1)
          lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
        else if (type == 2) {
          var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
          var tl = hLit + bits(dat, pos + 5, 31) + 1;
          pos += 14;
          var ldt = new u8(tl);
          var clt = new u8(19);
          for (var i2 = 0; i2 < hcLen; ++i2) {
            clt[clim[i2]] = bits(dat, pos + i2 * 3, 7);
          }
          pos += hcLen * 3;
          var clb = max(clt), clbmsk = (1 << clb) - 1;
          var clm = hMap(clt, clb, 1);
          for (var i2 = 0; i2 < tl; ) {
            var r = clm[bits(dat, pos, clbmsk)];
            pos += r & 15;
            var s = r >> 4;
            if (s < 16) {
              ldt[i2++] = s;
            } else {
              var c = 0, n = 0;
              if (s == 16)
                n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i2 - 1];
              else if (s == 17)
                n = 3 + bits(dat, pos, 7), pos += 3;
              else if (s == 18)
                n = 11 + bits(dat, pos, 127), pos += 7;
              while (n--)
                ldt[i2++] = c;
            }
          }
          var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);
          lbt = max(lt);
          dbt = max(dt);
          lm = hMap(lt, lbt, 1);
          dm = hMap(dt, dbt, 1);
        } else
          err(1);
        if (pos > tbts) {
          if (noSt)
            err(0);
          break;
        }
      }
      if (resize)
        cbuf(bt + 131072);
      var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
      var lpos = pos;
      for (; ; lpos = pos) {
        var c = lm[bits16(dat, pos) & lms], sym = c >> 4;
        pos += c & 15;
        if (pos > tbts) {
          if (noSt)
            err(0);
          break;
        }
        if (!c)
          err(2);
        if (sym < 256)
          buf[bt++] = sym;
        else if (sym == 256) {
          lpos = pos, lm = null;
          break;
        } else {
          var add = sym - 254;
          if (sym > 264) {
            var i2 = sym - 257, b = fleb[i2];
            add = bits(dat, pos, (1 << b) - 1) + fl[i2];
            pos += b;
          }
          var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;
          if (!d)
            err(3);
          pos += d & 15;
          var dt = fd[dsym];
          if (dsym > 3) {
            var b = fdeb[dsym];
            dt += bits16(dat, pos) & (1 << b) - 1, pos += b;
          }
          if (pos > tbts) {
            if (noSt)
              err(0);
            break;
          }
          if (resize)
            cbuf(bt + 131072);
          var end = bt + add;
          if (bt < dt) {
            var shift = dl - dt, dend = Math.min(dt, end);
            if (shift + bt < 0)
              err(3);
            for (; bt < dend; ++bt)
              buf[bt] = dict[shift + bt];
          }
          for (; bt < end; ++bt)
            buf[bt] = buf[bt - dt];
        }
      }
      st.l = lm, st.p = lpos, st.b = bt, st.f = final;
      if (lm)
        final = 1, st.m = lbt, st.d = dm, st.n = dbt;
    } while (!final);
    return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);
  };
  var et = /* @__PURE__ */ new u8(0);
  var mrg = function(a, b) {
    var o = {};
    for (var k in a)
      o[k] = a[k];
    for (var k in b)
      o[k] = b[k];
    return o;
  };
  var wcln = function(fn, fnStr, td2) {
    var dt = fn();
    var st = fn.toString();
    var ks = st.slice(st.indexOf("[") + 1, st.lastIndexOf("]")).replace(/\\s+/g, "").split(",");
    for (var i2 = 0; i2 < dt.length; ++i2) {
      var v = dt[i2], k = ks[i2];
      if (typeof v == "function") {
        fnStr += ";" + k + "=";
        var st_1 = v.toString();
        if (v.prototype) {
          if (st_1.indexOf("[native code]") != -1) {
            var spInd = st_1.indexOf(" ", 8) + 1;
            fnStr += st_1.slice(spInd, st_1.indexOf("(", spInd));
          } else {
            fnStr += st_1;
            for (var t in v.prototype)
              fnStr += ";" + k + ".prototype." + t + "=" + v.prototype[t].toString();
          }
        } else
          fnStr += st_1;
      } else
        td2[k] = v;
    }
    return fnStr;
  };
  var ch = [];
  var cbfs = function(v) {
    var tl = [];
    for (var k in v) {
      if (v[k].buffer) {
        tl.push((v[k] = new v[k].constructor(v[k])).buffer);
      }
    }
    return tl;
  };
  var wrkr = function(fns, init, id, cb) {
    if (!ch[id]) {
      var fnStr = "", td_1 = {}, m = fns.length - 1;
      for (var i2 = 0; i2 < m; ++i2)
        fnStr = wcln(fns[i2], fnStr, td_1);
      ch[id] = { c: wcln(fns[m], fnStr, td_1), e: td_1 };
    }
    var td2 = mrg({}, ch[id].e);
    return wk(ch[id].c + ";onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=" + init.toString() + "}", id, td2, cbfs(td2), cb);
  };
  var bInflt = function() {
    return [u8, u16, i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gopt];
  };
  var pbf = function(msg) {
    return postMessage(msg, [msg.buffer]);
  };
  var gopt = function(o) {
    return o && {
      out: o.size && new u8(o.size),
      dictionary: o.dictionary
    };
  };
  var cbify = function(dat, opts, fns, init, id, cb) {
    var w = wrkr(fns, init, id, function(err2, dat2) {
      w.terminate();
      cb(err2, dat2);
    });
    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);
    return function() {
      w.terminate();
    };
  };
  var b2 = function(d, b) {
    return d[b] | d[b + 1] << 8;
  };
  var b4 = function(d, b) {
    return (d[b] | d[b + 1] << 8 | d[b + 2] << 16 | d[b + 3] << 24) >>> 0;
  };
  var b8 = function(d, b) {
    return b4(d, b) + b4(d, b + 4) * 4294967296;
  };
  var gzs = function(d) {
    if (d[0] != 31 || d[1] != 139 || d[2] != 8)
      err(6, "invalid gzip data");
    var flg = d[3];
    var st = 10;
    if (flg & 4)
      st += (d[10] | d[11] << 8) + 2;
    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])
      ;
    return st + (flg & 2);
  };
  var Inflate = /* @__PURE__ */ function() {
    function Inflate2(opts, cb) {
      if (typeof opts == "function")
        cb = opts, opts = {};
      this.ondata = cb;
      var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);
      this.s = { i: 0, b: dict ? dict.length : 0 };
      this.o = new u8(32768);
      this.p = new u8(0);
      if (dict)
        this.o.set(dict);
    }
    Inflate2.prototype.e = function(c) {
      if (!this.ondata)
        err(5);
      if (this.d)
        err(4);
      if (!this.p.length)
        this.p = c;
      else if (c.length) {
        var n = new u8(this.p.length + c.length);
        n.set(this.p), n.set(c, this.p.length), this.p = n;
      }
    };
    Inflate2.prototype.c = function(final) {
      this.s.i = +(this.d = final || false);
      var bts = this.s.b;
      var dt = inflt(this.p, this.s, this.o);
      this.ondata(slc(dt, bts, this.s.b), this.d);
      this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;
      this.p = slc(this.p, this.s.p / 8 | 0), this.s.p &= 7;
    };
    Inflate2.prototype.push = function(chunk, final) {
      this.e(chunk), this.c(final);
    };
    return Inflate2;
  }();
  function inflate(data, opts, cb) {
    if (!cb)
      cb = opts, opts = {};
    if (typeof cb != "function")
      err(7);
    return cbify(data, opts, [
      bInflt
    ], function(ev) {
      return pbf(inflateSync(ev.data[0], gopt(ev.data[1])));
    }, 1, cb);
  }
  function inflateSync(data, opts) {
    return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);
  }
  var Gunzip = /* @__PURE__ */ function() {
    function Gunzip2(opts, cb) {
      this.v = 1;
      this.r = 0;
      Inflate.call(this, opts, cb);
    }
    Gunzip2.prototype.push = function(chunk, final) {
      Inflate.prototype.e.call(this, chunk);
      this.r += chunk.length;
      if (this.v) {
        var p = this.p.subarray(this.v - 1);
        var s = p.length > 3 ? gzs(p) : 4;
        if (s > p.length) {
          if (!final)
            return;
        } else if (this.v > 1 && this.onmember) {
          this.onmember(this.r - p.length);
        }
        this.p = p.subarray(s), this.v = 0;
      }
      Inflate.prototype.c.call(this, final);
      if (this.s.f && !this.s.l && !final) {
        this.v = shft(this.s.p) + 9;
        this.s = { i: 0 };
        this.o = new u8(0);
        this.push(new u8(0), final);
      }
    };
    return Gunzip2;
  }();
  var td = typeof TextDecoder != "undefined" && /* @__PURE__ */ new TextDecoder();
  try {
    td.decode(et, { stream: true });
  } catch (e) {
  }
  var dutf8 = function(d) {
    for (var r = "", i2 = 0; ; ) {
      var c = d[i2++];
      var eb = (c > 127) + (c > 223) + (c > 239);
      if (i2 + eb > d.length)
        return { s: r, r: slc(d, i2 - 1) };
      if (!eb)
        r += String.fromCharCode(c);
      else if (eb == 3) {
        c = ((c & 15) << 18 | (d[i2++] & 63) << 12 | (d[i2++] & 63) << 6 | d[i2++] & 63) - 65536, r += String.fromCharCode(55296 | c >> 10, 56320 | c & 1023);
      } else if (eb & 1)
        r += String.fromCharCode((c & 31) << 6 | d[i2++] & 63);
      else
        r += String.fromCharCode((c & 15) << 12 | (d[i2++] & 63) << 6 | d[i2++] & 63);
    }
  };
  function strFromU8(dat, latin1) {
    if (latin1) {
      var r = "";
      for (var i2 = 0; i2 < dat.length; i2 += 16384)
        r += String.fromCharCode.apply(null, dat.subarray(i2, i2 + 16384));
      return r;
    } else if (td) {
      return td.decode(dat);
    } else {
      var _a2 = dutf8(dat), s = _a2.s, r = _a2.r;
      if (r.length)
        err(8);
      return s;
    }
  }
  var slzh = function(d, b) {
    return b + 30 + b2(d, b + 26) + b2(d, b + 28);
  };
  var zh = function(d, b, z) {
    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);
    var _a2 = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a2[0], su = _a2[1], off = _a2[2];
    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];
  };
  var z64e = function(d, b) {
    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))
      ;
    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];
  };
  var mt = typeof queueMicrotask == "function" ? queueMicrotask : typeof setTimeout == "function" ? setTimeout : function(fn) {
    fn();
  };
  function unzip(data, opts, cb) {
    if (!cb)
      cb = opts, opts = {};
    if (typeof cb != "function")
      err(7);
    var term = [];
    var tAll = function() {
      for (var i3 = 0; i3 < term.length; ++i3)
        term[i3]();
    };
    var files = {};
    var cbd = function(a, b) {
      mt(function() {
        cb(a, b);
      });
    };
    mt(function() {
      cbd = cb;
    });
    var e = data.length - 22;
    for (; b4(data, e) != 101010256; --e) {
      if (!e || data.length - e > 65558) {
        cbd(err(13, 0, 1), null);
        return tAll;
      }
    }
    var lft = b2(data, e + 8);
    if (lft) {
      var c = lft;
      var o = b4(data, e + 16);
      var z = o == 4294967295 || c == 65535;
      if (z) {
        var ze = b4(data, e - 12);
        z = b4(data, ze) == 101075792;
        if (z) {
          c = lft = b4(data, ze + 32);
          o = b4(data, ze + 48);
        }
      }
      var fltr = opts && opts.filter;
      var _loop_3 = function(i3) {
        var _a2 = zh(data, o, z), c_1 = _a2[0], sc = _a2[1], su = _a2[2], fn = _a2[3], no = _a2[4], off = _a2[5], b = slzh(data, off);
        o = no;
        var cbl = function(e2, d) {
          if (e2) {
            tAll();
            cbd(e2, null);
          } else {
            if (d)
              files[fn] = d;
            if (!--lft)
              cbd(null, files);
          }
        };
        if (!fltr || fltr({
          name: fn,
          size: sc,
          originalSize: su,
          compression: c_1
        })) {
          if (!c_1)
            cbl(null, slc(data, b, b + sc));
          else if (c_1 == 8) {
            var infl = data.subarray(b, b + sc);
            if (su < 524288 || sc > 0.8 * su) {
              try {
                cbl(null, inflateSync(infl, { out: new u8(su) }));
              } catch (e2) {
                cbl(e2, null);
              }
            } else
              term.push(inflate(infl, { size: su }, cbl));
          } else
            cbl(err(14, "unknown compression type " + c_1, 1), null);
        } else
          cbl(null, null);
      };
      for (var i2 = 0; i2 < c; ++i2) {
        _loop_3(i2);
      }
    } else
      cbd(null, {});
    return tAll;
  }
  function unzipSync(data, opts) {
    var files = {};
    var e = data.length - 22;
    for (; b4(data, e) != 101010256; --e) {
      if (!e || data.length - e > 65558)
        err(13);
    }
    var c = b2(data, e + 8);
    if (!c)
      return {};
    var o = b4(data, e + 16);
    var z = o == 4294967295 || c == 65535;
    if (z) {
      var ze = b4(data, e - 12);
      z = b4(data, ze) == 101075792;
      if (z) {
        c = b4(data, ze + 32);
        o = b4(data, ze + 48);
      }
    }
    var fltr = opts && opts.filter;
    for (var i2 = 0; i2 < c; ++i2) {
      var _a2 = zh(data, o, z), c_2 = _a2[0], sc = _a2[1], su = _a2[2], fn = _a2[3], no = _a2[4], off = _a2[5], b = slzh(data, off);
      o = no;
      if (!fltr || fltr({
        name: fn,
        size: sc,
        originalSize: su,
        compression: c_2
      })) {
        if (!c_2)
          files[fn] = slc(data, b, b + sc);
        else if (c_2 == 8)
          files[fn] = inflateSync(data.subarray(b, b + sc), { out: new u8(su) });
        else
          err(14, "unknown compression type " + c_2);
      }
    }
    return files;
  }
  /**
   * @license
   * Copyright 2010-2024 Three.js Authors
   * SPDX-License-Identifier: MIT
   */
  const REVISION = "172";
  const NoColorSpace = "";
  const SRGBColorSpace = "srgb";
  const LinearSRGBColorSpace = "srgb-linear";
  const LinearTransfer = "linear";
  const SRGBTransfer = "srgb";
  function clamp(value, min, max2) {
    return Math.max(min, Math.min(max2, value));
  }
  function euclideanModulo(n, m) {
    return (n % m + m) % m;
  }
  function lerp(x2, y, t) {
    return (1 - t) * x2 + t * y;
  }
  class Matrix3 {
    constructor(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
      Matrix3.prototype.isMatrix3 = true;
      this.elements = [
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1
      ];
      if (n11 !== void 0) {
        this.set(n11, n12, n13, n21, n22, n23, n31, n32, n33);
      }
    }
    set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
      const te = this.elements;
      te[0] = n11;
      te[1] = n21;
      te[2] = n31;
      te[3] = n12;
      te[4] = n22;
      te[5] = n32;
      te[6] = n13;
      te[7] = n23;
      te[8] = n33;
      return this;
    }
    identity() {
      this.set(
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1
      );
      return this;
    }
    copy(m) {
      const te = this.elements;
      const me = m.elements;
      te[0] = me[0];
      te[1] = me[1];
      te[2] = me[2];
      te[3] = me[3];
      te[4] = me[4];
      te[5] = me[5];
      te[6] = me[6];
      te[7] = me[7];
      te[8] = me[8];
      return this;
    }
    extractBasis(xAxis, yAxis, zAxis) {
      xAxis.setFromMatrix3Column(this, 0);
      yAxis.setFromMatrix3Column(this, 1);
      zAxis.setFromMatrix3Column(this, 2);
      return this;
    }
    setFromMatrix4(m) {
      const me = m.elements;
      this.set(
        me[0],
        me[4],
        me[8],
        me[1],
        me[5],
        me[9],
        me[2],
        me[6],
        me[10]
      );
      return this;
    }
    multiply(m) {
      return this.multiplyMatrices(this, m);
    }
    premultiply(m) {
      return this.multiplyMatrices(m, this);
    }
    multiplyMatrices(a, b) {
      const ae = a.elements;
      const be = b.elements;
      const te = this.elements;
      const a11 = ae[0], a12 = ae[3], a13 = ae[6];
      const a21 = ae[1], a22 = ae[4], a23 = ae[7];
      const a31 = ae[2], a32 = ae[5], a33 = ae[8];
      const b11 = be[0], b12 = be[3], b13 = be[6];
      const b21 = be[1], b22 = be[4], b23 = be[7];
      const b31 = be[2], b32 = be[5], b33 = be[8];
      te[0] = a11 * b11 + a12 * b21 + a13 * b31;
      te[3] = a11 * b12 + a12 * b22 + a13 * b32;
      te[6] = a11 * b13 + a12 * b23 + a13 * b33;
      te[1] = a21 * b11 + a22 * b21 + a23 * b31;
      te[4] = a21 * b12 + a22 * b22 + a23 * b32;
      te[7] = a21 * b13 + a22 * b23 + a23 * b33;
      te[2] = a31 * b11 + a32 * b21 + a33 * b31;
      te[5] = a31 * b12 + a32 * b22 + a33 * b32;
      te[8] = a31 * b13 + a32 * b23 + a33 * b33;
      return this;
    }
    multiplyScalar(s) {
      const te = this.elements;
      te[0] *= s;
      te[3] *= s;
      te[6] *= s;
      te[1] *= s;
      te[4] *= s;
      te[7] *= s;
      te[2] *= s;
      te[5] *= s;
      te[8] *= s;
      return this;
    }
    determinant() {
      const te = this.elements;
      const a = te[0], b = te[1], c = te[2], d = te[3], e = te[4], f = te[5], g = te[6], h = te[7], i2 = te[8];
      return a * e * i2 - a * f * h - b * d * i2 + b * f * g + c * d * h - c * e * g;
    }
    invert() {
      const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n12 = te[3], n22 = te[4], n32 = te[5], n13 = te[6], n23 = te[7], n33 = te[8], t11 = n33 * n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t12 + n31 * t13;
      if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
      const detInv = 1 / det;
      te[0] = t11 * detInv;
      te[1] = (n31 * n23 - n33 * n21) * detInv;
      te[2] = (n32 * n21 - n31 * n22) * detInv;
      te[3] = t12 * detInv;
      te[4] = (n33 * n11 - n31 * n13) * detInv;
      te[5] = (n31 * n12 - n32 * n11) * detInv;
      te[6] = t13 * detInv;
      te[7] = (n21 * n13 - n23 * n11) * detInv;
      te[8] = (n22 * n11 - n21 * n12) * detInv;
      return this;
    }
    transpose() {
      let tmp;
      const m = this.elements;
      tmp = m[1];
      m[1] = m[3];
      m[3] = tmp;
      tmp = m[2];
      m[2] = m[6];
      m[6] = tmp;
      tmp = m[5];
      m[5] = m[7];
      m[7] = tmp;
      return this;
    }
    getNormalMatrix(matrix4) {
      return this.setFromMatrix4(matrix4).invert().transpose();
    }
    transposeIntoArray(r) {
      const m = this.elements;
      r[0] = m[0];
      r[1] = m[3];
      r[2] = m[6];
      r[3] = m[1];
      r[4] = m[4];
      r[5] = m[7];
      r[6] = m[2];
      r[7] = m[5];
      r[8] = m[8];
      return this;
    }
    setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
      const c = Math.cos(rotation);
      const s = Math.sin(rotation);
      this.set(
        sx * c,
        sx * s,
        -sx * (c * cx + s * cy) + cx + tx,
        -sy * s,
        sy * c,
        -sy * (-s * cx + c * cy) + cy + ty,
        0,
        0,
        1
      );
      return this;
    }
    //
    scale(sx, sy) {
      this.premultiply(_m3.makeScale(sx, sy));
      return this;
    }
    rotate(theta) {
      this.premultiply(_m3.makeRotation(-theta));
      return this;
    }
    translate(tx, ty) {
      this.premultiply(_m3.makeTranslation(tx, ty));
      return this;
    }
    // for 2D Transforms
    makeTranslation(x2, y) {
      if (x2.isVector2) {
        this.set(
          1,
          0,
          x2.x,
          0,
          1,
          x2.y,
          0,
          0,
          1
        );
      } else {
        this.set(
          1,
          0,
          x2,
          0,
          1,
          y,
          0,
          0,
          1
        );
      }
      return this;
    }
    makeRotation(theta) {
      const c = Math.cos(theta);
      const s = Math.sin(theta);
      this.set(
        c,
        -s,
        0,
        s,
        c,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeScale(x2, y) {
      this.set(
        x2,
        0,
        0,
        0,
        y,
        0,
        0,
        0,
        1
      );
      return this;
    }
    //
    equals(matrix) {
      const te = this.elements;
      const me = matrix.elements;
      for (let i2 = 0; i2 < 9; i2++) {
        if (te[i2] !== me[i2]) return false;
      }
      return true;
    }
    fromArray(array, offset = 0) {
      for (let i2 = 0; i2 < 9; i2++) {
        this.elements[i2] = array[i2 + offset];
      }
      return this;
    }
    toArray(array = [], offset = 0) {
      const te = this.elements;
      array[offset] = te[0];
      array[offset + 1] = te[1];
      array[offset + 2] = te[2];
      array[offset + 3] = te[3];
      array[offset + 4] = te[4];
      array[offset + 5] = te[5];
      array[offset + 6] = te[6];
      array[offset + 7] = te[7];
      array[offset + 8] = te[8];
      return array;
    }
    clone() {
      return new this.constructor().fromArray(this.elements);
    }
  }
  const _m3 = /* @__PURE__ */ new Matrix3();
  const LINEAR_REC709_TO_XYZ = /* @__PURE__ */ new Matrix3().set(
    0.4123908,
    0.3575843,
    0.1804808,
    0.212639,
    0.7151687,
    0.0721923,
    0.0193308,
    0.1191948,
    0.9505322
  );
  const XYZ_TO_LINEAR_REC709 = /* @__PURE__ */ new Matrix3().set(
    3.2409699,
    -1.5373832,
    -0.4986108,
    -0.9692436,
    1.8759675,
    0.0415551,
    0.0556301,
    -0.203977,
    1.0569715
  );
  function createColorManagement() {
    const ColorManagement2 = {
      enabled: true,
      workingColorSpace: LinearSRGBColorSpace,
      /**
       * Implementations of supported color spaces.
       *
       * Required:
       *	- primaries: chromaticity coordinates [ rx ry gx gy bx by ]
       *	- whitePoint: reference white [ x y ]
       *	- transfer: transfer function (pre-defined)
       *	- toXYZ: Matrix3 RGB to XYZ transform
       *	- fromXYZ: Matrix3 XYZ to RGB transform
       *	- luminanceCoefficients: RGB luminance coefficients
       *
       * Optional:
       *  - outputColorSpaceConfig: { drawingBufferColorSpace: ColorSpace }
       *  - workingColorSpaceConfig: { unpackColorSpace: ColorSpace }
       *
       * Reference:
       * - https://www.russellcottrell.com/photo/matrixCalculator.htm
       */
      spaces: {},
      convert: function(color, sourceColorSpace, targetColorSpace) {
        if (this.enabled === false || sourceColorSpace === targetColorSpace || !sourceColorSpace || !targetColorSpace) {
          return color;
        }
        if (this.spaces[sourceColorSpace].transfer === SRGBTransfer) {
          color.r = SRGBToLinear(color.r);
          color.g = SRGBToLinear(color.g);
          color.b = SRGBToLinear(color.b);
        }
        if (this.spaces[sourceColorSpace].primaries !== this.spaces[targetColorSpace].primaries) {
          color.applyMatrix3(this.spaces[sourceColorSpace].toXYZ);
          color.applyMatrix3(this.spaces[targetColorSpace].fromXYZ);
        }
        if (this.spaces[targetColorSpace].transfer === SRGBTransfer) {
          color.r = LinearToSRGB(color.r);
          color.g = LinearToSRGB(color.g);
          color.b = LinearToSRGB(color.b);
        }
        return color;
      },
      fromWorkingColorSpace: function(color, targetColorSpace) {
        return this.convert(color, this.workingColorSpace, targetColorSpace);
      },
      toWorkingColorSpace: function(color, sourceColorSpace) {
        return this.convert(color, sourceColorSpace, this.workingColorSpace);
      },
      getPrimaries: function(colorSpace) {
        return this.spaces[colorSpace].primaries;
      },
      getTransfer: function(colorSpace) {
        if (colorSpace === NoColorSpace) return LinearTransfer;
        return this.spaces[colorSpace].transfer;
      },
      getLuminanceCoefficients: function(target, colorSpace = this.workingColorSpace) {
        return target.fromArray(this.spaces[colorSpace].luminanceCoefficients);
      },
      define: function(colorSpaces) {
        Object.assign(this.spaces, colorSpaces);
      },
      // Internal APIs
      _getMatrix: function(targetMatrix, sourceColorSpace, targetColorSpace) {
        return targetMatrix.copy(this.spaces[sourceColorSpace].toXYZ).multiply(this.spaces[targetColorSpace].fromXYZ);
      },
      _getDrawingBufferColorSpace: function(colorSpace) {
        return this.spaces[colorSpace].outputColorSpaceConfig.drawingBufferColorSpace;
      },
      _getUnpackColorSpace: function(colorSpace = this.workingColorSpace) {
        return this.spaces[colorSpace].workingColorSpaceConfig.unpackColorSpace;
      }
    };
    const REC709_PRIMARIES = [0.64, 0.33, 0.3, 0.6, 0.15, 0.06];
    const REC709_LUMINANCE_COEFFICIENTS = [0.2126, 0.7152, 0.0722];
    const D65 = [0.3127, 0.329];
    ColorManagement2.define({
      [LinearSRGBColorSpace]: {
        primaries: REC709_PRIMARIES,
        whitePoint: D65,
        transfer: LinearTransfer,
        toXYZ: LINEAR_REC709_TO_XYZ,
        fromXYZ: XYZ_TO_LINEAR_REC709,
        luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,
        workingColorSpaceConfig: { unpackColorSpace: SRGBColorSpace },
        outputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }
      },
      [SRGBColorSpace]: {
        primaries: REC709_PRIMARIES,
        whitePoint: D65,
        transfer: SRGBTransfer,
        toXYZ: LINEAR_REC709_TO_XYZ,
        fromXYZ: XYZ_TO_LINEAR_REC709,
        luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,
        outputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }
      }
    });
    return ColorManagement2;
  }
  const ColorManagement = /* @__PURE__ */ createColorManagement();
  function SRGBToLinear(c) {
    return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);
  }
  function LinearToSRGB(c) {
    return c < 31308e-7 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;
  }
  class Quaternion {
    constructor(x2 = 0, y = 0, z = 0, w = 1) {
      this.isQuaternion = true;
      this._x = x2;
      this._y = y;
      this._z = z;
      this._w = w;
    }
    static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {
      let x0 = src0[srcOffset0 + 0], y0 = src0[srcOffset0 + 1], z0 = src0[srcOffset0 + 2], w0 = src0[srcOffset0 + 3];
      const x1 = src1[srcOffset1 + 0], y1 = src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w1 = src1[srcOffset1 + 3];
      if (t === 0) {
        dst[dstOffset + 0] = x0;
        dst[dstOffset + 1] = y0;
        dst[dstOffset + 2] = z0;
        dst[dstOffset + 3] = w0;
        return;
      }
      if (t === 1) {
        dst[dstOffset + 0] = x1;
        dst[dstOffset + 1] = y1;
        dst[dstOffset + 2] = z1;
        dst[dstOffset + 3] = w1;
        return;
      }
      if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
        let s = 1 - t;
        const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1, dir = cos >= 0 ? 1 : -1, sqrSin = 1 - cos * cos;
        if (sqrSin > Number.EPSILON) {
          const sin = Math.sqrt(sqrSin), len = Math.atan2(sin, cos * dir);
          s = Math.sin(s * len) / sin;
          t = Math.sin(t * len) / sin;
        }
        const tDir = t * dir;
        x0 = x0 * s + x1 * tDir;
        y0 = y0 * s + y1 * tDir;
        z0 = z0 * s + z1 * tDir;
        w0 = w0 * s + w1 * tDir;
        if (s === 1 - t) {
          const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
          x0 *= f;
          y0 *= f;
          z0 *= f;
          w0 *= f;
        }
      }
      dst[dstOffset] = x0;
      dst[dstOffset + 1] = y0;
      dst[dstOffset + 2] = z0;
      dst[dstOffset + 3] = w0;
    }
    static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
      const x0 = src0[srcOffset0];
      const y0 = src0[srcOffset0 + 1];
      const z0 = src0[srcOffset0 + 2];
      const w0 = src0[srcOffset0 + 3];
      const x1 = src1[srcOffset1];
      const y1 = src1[srcOffset1 + 1];
      const z1 = src1[srcOffset1 + 2];
      const w1 = src1[srcOffset1 + 3];
      dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
      dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
      dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
      dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
      return dst;
    }
    get x() {
      return this._x;
    }
    set x(value) {
      this._x = value;
      this._onChangeCallback();
    }
    get y() {
      return this._y;
    }
    set y(value) {
      this._y = value;
      this._onChangeCallback();
    }
    get z() {
      return this._z;
    }
    set z(value) {
      this._z = value;
      this._onChangeCallback();
    }
    get w() {
      return this._w;
    }
    set w(value) {
      this._w = value;
      this._onChangeCallback();
    }
    set(x2, y, z, w) {
      this._x = x2;
      this._y = y;
      this._z = z;
      this._w = w;
      this._onChangeCallback();
      return this;
    }
    clone() {
      return new this.constructor(this._x, this._y, this._z, this._w);
    }
    copy(quaternion) {
      this._x = quaternion.x;
      this._y = quaternion.y;
      this._z = quaternion.z;
      this._w = quaternion.w;
      this._onChangeCallback();
      return this;
    }
    setFromEuler(euler, update = true) {
      const x2 = euler._x, y = euler._y, z = euler._z, order = euler._order;
      const cos = Math.cos;
      const sin = Math.sin;
      const c1 = cos(x2 / 2);
      const c2 = cos(y / 2);
      const c3 = cos(z / 2);
      const s1 = sin(x2 / 2);
      const s2 = sin(y / 2);
      const s3 = sin(z / 2);
      switch (order) {
        case "XYZ":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "YXZ":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        case "ZXY":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "ZYX":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        case "YZX":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "XZY":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        default:
          console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + order);
      }
      if (update === true) this._onChangeCallback();
      return this;
    }
    setFromAxisAngle(axis, angle) {
      const halfAngle = angle / 2, s = Math.sin(halfAngle);
      this._x = axis.x * s;
      this._y = axis.y * s;
      this._z = axis.z * s;
      this._w = Math.cos(halfAngle);
      this._onChangeCallback();
      return this;
    }
    setFromRotationMatrix(m) {
      const te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10], trace = m11 + m22 + m33;
      if (trace > 0) {
        const s = 0.5 / Math.sqrt(trace + 1);
        this._w = 0.25 / s;
        this._x = (m32 - m23) * s;
        this._y = (m13 - m31) * s;
        this._z = (m21 - m12) * s;
      } else if (m11 > m22 && m11 > m33) {
        const s = 2 * Math.sqrt(1 + m11 - m22 - m33);
        this._w = (m32 - m23) / s;
        this._x = 0.25 * s;
        this._y = (m12 + m21) / s;
        this._z = (m13 + m31) / s;
      } else if (m22 > m33) {
        const s = 2 * Math.sqrt(1 + m22 - m11 - m33);
        this._w = (m13 - m31) / s;
        this._x = (m12 + m21) / s;
        this._y = 0.25 * s;
        this._z = (m23 + m32) / s;
      } else {
        const s = 2 * Math.sqrt(1 + m33 - m11 - m22);
        this._w = (m21 - m12) / s;
        this._x = (m13 + m31) / s;
        this._y = (m23 + m32) / s;
        this._z = 0.25 * s;
      }
      this._onChangeCallback();
      return this;
    }
    setFromUnitVectors(vFrom, vTo) {
      let r = vFrom.dot(vTo) + 1;
      if (r < Number.EPSILON) {
        r = 0;
        if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
          this._x = -vFrom.y;
          this._y = vFrom.x;
          this._z = 0;
          this._w = r;
        } else {
          this._x = 0;
          this._y = -vFrom.z;
          this._z = vFrom.y;
          this._w = r;
        }
      } else {
        this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
        this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
        this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
        this._w = r;
      }
      return this.normalize();
    }
    angleTo(q) {
      return 2 * Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));
    }
    rotateTowards(q, step) {
      const angle = this.angleTo(q);
      if (angle === 0) return this;
      const t = Math.min(1, step / angle);
      this.slerp(q, t);
      return this;
    }
    identity() {
      return this.set(0, 0, 0, 1);
    }
    invert() {
      return this.conjugate();
    }
    conjugate() {
      this._x *= -1;
      this._y *= -1;
      this._z *= -1;
      this._onChangeCallback();
      return this;
    }
    dot(v) {
      return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
    }
    lengthSq() {
      return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
    }
    length() {
      return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
    }
    normalize() {
      let l = this.length();
      if (l === 0) {
        this._x = 0;
        this._y = 0;
        this._z = 0;
        this._w = 1;
      } else {
        l = 1 / l;
        this._x = this._x * l;
        this._y = this._y * l;
        this._z = this._z * l;
        this._w = this._w * l;
      }
      this._onChangeCallback();
      return this;
    }
    multiply(q) {
      return this.multiplyQuaternions(this, q);
    }
    premultiply(q) {
      return this.multiplyQuaternions(q, this);
    }
    multiplyQuaternions(a, b) {
      const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
      const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
      this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
      this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
      this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
      this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
      this._onChangeCallback();
      return this;
    }
    slerp(qb, t) {
      if (t === 0) return this;
      if (t === 1) return this.copy(qb);
      const x2 = this._x, y = this._y, z = this._z, w = this._w;
      let cosHalfTheta = w * qb._w + x2 * qb._x + y * qb._y + z * qb._z;
      if (cosHalfTheta < 0) {
        this._w = -qb._w;
        this._x = -qb._x;
        this._y = -qb._y;
        this._z = -qb._z;
        cosHalfTheta = -cosHalfTheta;
      } else {
        this.copy(qb);
      }
      if (cosHalfTheta >= 1) {
        this._w = w;
        this._x = x2;
        this._y = y;
        this._z = z;
        return this;
      }
      const sqrSinHalfTheta = 1 - cosHalfTheta * cosHalfTheta;
      if (sqrSinHalfTheta <= Number.EPSILON) {
        const s = 1 - t;
        this._w = s * w + t * this._w;
        this._x = s * x2 + t * this._x;
        this._y = s * y + t * this._y;
        this._z = s * z + t * this._z;
        this.normalize();
        return this;
      }
      const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
      const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
      const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
      this._w = w * ratioA + this._w * ratioB;
      this._x = x2 * ratioA + this._x * ratioB;
      this._y = y * ratioA + this._y * ratioB;
      this._z = z * ratioA + this._z * ratioB;
      this._onChangeCallback();
      return this;
    }
    slerpQuaternions(qa, qb, t) {
      return this.copy(qa).slerp(qb, t);
    }
    random() {
      const theta1 = 2 * Math.PI * Math.random();
      const theta2 = 2 * Math.PI * Math.random();
      const x0 = Math.random();
      const r1 = Math.sqrt(1 - x0);
      const r2 = Math.sqrt(x0);
      return this.set(
        r1 * Math.sin(theta1),
        r1 * Math.cos(theta1),
        r2 * Math.sin(theta2),
        r2 * Math.cos(theta2)
      );
    }
    equals(quaternion) {
      return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
    }
    fromArray(array, offset = 0) {
      this._x = array[offset];
      this._y = array[offset + 1];
      this._z = array[offset + 2];
      this._w = array[offset + 3];
      this._onChangeCallback();
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this._x;
      array[offset + 1] = this._y;
      array[offset + 2] = this._z;
      array[offset + 3] = this._w;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this._x = attribute.getX(index);
      this._y = attribute.getY(index);
      this._z = attribute.getZ(index);
      this._w = attribute.getW(index);
      this._onChangeCallback();
      return this;
    }
    toJSON() {
      return this.toArray();
    }
    _onChange(callback) {
      this._onChangeCallback = callback;
      return this;
    }
    _onChangeCallback() {
    }
    *[Symbol.iterator]() {
      yield this._x;
      yield this._y;
      yield this._z;
      yield this._w;
    }
  }
  class Vector3 {
    constructor(x2 = 0, y = 0, z = 0) {
      Vector3.prototype.isVector3 = true;
      this.x = x2;
      this.y = y;
      this.z = z;
    }
    set(x2, y, z) {
      if (z === void 0) z = this.z;
      this.x = x2;
      this.y = y;
      this.z = z;
      return this;
    }
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      this.z = scalar;
      return this;
    }
    setX(x2) {
      this.x = x2;
      return this;
    }
    setY(y) {
      this.y = y;
      return this;
    }
    setZ(z) {
      this.z = z;
      return this;
    }
    setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;
        case 1:
          this.y = value;
          break;
        case 2:
          this.z = value;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        case 2:
          return this.z;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y, this.z);
    }
    copy(v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
      return this;
    }
    add(v) {
      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
      return this;
    }
    addScalar(s) {
      this.x += s;
      this.y += s;
      this.z += s;
      return this;
    }
    addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      this.z = a.z + b.z;
      return this;
    }
    addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      this.z += v.z * s;
      return this;
    }
    sub(v) {
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
      return this;
    }
    subScalar(s) {
      this.x -= s;
      this.y -= s;
      this.z -= s;
      return this;
    }
    subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      this.z = a.z - b.z;
      return this;
    }
    multiply(v) {
      this.x *= v.x;
      this.y *= v.y;
      this.z *= v.z;
      return this;
    }
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      this.z *= scalar;
      return this;
    }
    multiplyVectors(a, b) {
      this.x = a.x * b.x;
      this.y = a.y * b.y;
      this.z = a.z * b.z;
      return this;
    }
    applyEuler(euler) {
      return this.applyQuaternion(_quaternion$4.setFromEuler(euler));
    }
    applyAxisAngle(axis, angle) {
      return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));
    }
    applyMatrix3(m) {
      const x2 = this.x, y = this.y, z = this.z;
      const e = m.elements;
      this.x = e[0] * x2 + e[3] * y + e[6] * z;
      this.y = e[1] * x2 + e[4] * y + e[7] * z;
      this.z = e[2] * x2 + e[5] * y + e[8] * z;
      return this;
    }
    applyNormalMatrix(m) {
      return this.applyMatrix3(m).normalize();
    }
    applyMatrix4(m) {
      const x2 = this.x, y = this.y, z = this.z;
      const e = m.elements;
      const w = 1 / (e[3] * x2 + e[7] * y + e[11] * z + e[15]);
      this.x = (e[0] * x2 + e[4] * y + e[8] * z + e[12]) * w;
      this.y = (e[1] * x2 + e[5] * y + e[9] * z + e[13]) * w;
      this.z = (e[2] * x2 + e[6] * y + e[10] * z + e[14]) * w;
      return this;
    }
    applyQuaternion(q) {
      const vx = this.x, vy = this.y, vz = this.z;
      const qx = q.x, qy = q.y, qz = q.z, qw = q.w;
      const tx = 2 * (qy * vz - qz * vy);
      const ty = 2 * (qz * vx - qx * vz);
      const tz = 2 * (qx * vy - qy * vx);
      this.x = vx + qw * tx + qy * tz - qz * ty;
      this.y = vy + qw * ty + qz * tx - qx * tz;
      this.z = vz + qw * tz + qx * ty - qy * tx;
      return this;
    }
    project(camera) {
      return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);
    }
    unproject(camera) {
      return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);
    }
    transformDirection(m) {
      const x2 = this.x, y = this.y, z = this.z;
      const e = m.elements;
      this.x = e[0] * x2 + e[4] * y + e[8] * z;
      this.y = e[1] * x2 + e[5] * y + e[9] * z;
      this.z = e[2] * x2 + e[6] * y + e[10] * z;
      return this.normalize();
    }
    divide(v) {
      this.x /= v.x;
      this.y /= v.y;
      this.z /= v.z;
      return this;
    }
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      this.z = Math.min(this.z, v.z);
      return this;
    }
    max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      this.z = Math.max(this.z, v.z);
      return this;
    }
    clamp(min, max2) {
      this.x = clamp(this.x, min.x, max2.x);
      this.y = clamp(this.y, min.y, max2.y);
      this.z = clamp(this.z, min.z, max2.z);
      return this;
    }
    clampScalar(minVal, maxVal) {
      this.x = clamp(this.x, minVal, maxVal);
      this.y = clamp(this.y, minVal, maxVal);
      this.z = clamp(this.z, minVal, maxVal);
      return this;
    }
    clampLength(min, max2) {
      const length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(clamp(length, min, max2));
    }
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      this.z = Math.floor(this.z);
      return this;
    }
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      this.z = Math.ceil(this.z);
      return this;
    }
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      this.z = Math.round(this.z);
      return this;
    }
    roundToZero() {
      this.x = Math.trunc(this.x);
      this.y = Math.trunc(this.y);
      this.z = Math.trunc(this.z);
      return this;
    }
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      this.z = -this.z;
      return this;
    }
    dot(v) {
      return this.x * v.x + this.y * v.y + this.z * v.z;
    }
    // TODO lengthSquared?
    lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      this.z += (v.z - this.z) * alpha;
      return this;
    }
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      this.z = v1.z + (v2.z - v1.z) * alpha;
      return this;
    }
    cross(v) {
      return this.crossVectors(this, v);
    }
    crossVectors(a, b) {
      const ax = a.x, ay = a.y, az = a.z;
      const bx = b.x, by = b.y, bz = b.z;
      this.x = ay * bz - az * by;
      this.y = az * bx - ax * bz;
      this.z = ax * by - ay * bx;
      return this;
    }
    projectOnVector(v) {
      const denominator = v.lengthSq();
      if (denominator === 0) return this.set(0, 0, 0);
      const scalar = v.dot(this) / denominator;
      return this.copy(v).multiplyScalar(scalar);
    }
    projectOnPlane(planeNormal) {
      _vector$c.copy(this).projectOnVector(planeNormal);
      return this.sub(_vector$c);
    }
    reflect(normal) {
      return this.sub(_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));
    }
    angleTo(v) {
      const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
      if (denominator === 0) return Math.PI / 2;
      const theta = this.dot(v) / denominator;
      return Math.acos(clamp(theta, -1, 1));
    }
    distanceTo(v) {
      return Math.sqrt(this.distanceToSquared(v));
    }
    distanceToSquared(v) {
      const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
      return dx * dx + dy * dy + dz * dz;
    }
    manhattanDistanceTo(v) {
      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);
    }
    setFromSpherical(s) {
      return this.setFromSphericalCoords(s.radius, s.phi, s.theta);
    }
    setFromSphericalCoords(radius, phi, theta) {
      const sinPhiRadius = Math.sin(phi) * radius;
      this.x = sinPhiRadius * Math.sin(theta);
      this.y = Math.cos(phi) * radius;
      this.z = sinPhiRadius * Math.cos(theta);
      return this;
    }
    setFromCylindrical(c) {
      return this.setFromCylindricalCoords(c.radius, c.theta, c.y);
    }
    setFromCylindricalCoords(radius, theta, y) {
      this.x = radius * Math.sin(theta);
      this.y = y;
      this.z = radius * Math.cos(theta);
      return this;
    }
    setFromMatrixPosition(m) {
      const e = m.elements;
      this.x = e[12];
      this.y = e[13];
      this.z = e[14];
      return this;
    }
    setFromMatrixScale(m) {
      const sx = this.setFromMatrixColumn(m, 0).length();
      const sy = this.setFromMatrixColumn(m, 1).length();
      const sz = this.setFromMatrixColumn(m, 2).length();
      this.x = sx;
      this.y = sy;
      this.z = sz;
      return this;
    }
    setFromMatrixColumn(m, index) {
      return this.fromArray(m.elements, index * 4);
    }
    setFromMatrix3Column(m, index) {
      return this.fromArray(m.elements, index * 3);
    }
    setFromEuler(e) {
      this.x = e._x;
      this.y = e._y;
      this.z = e._z;
      return this;
    }
    setFromColor(c) {
      this.x = c.r;
      this.y = c.g;
      this.z = c.b;
      return this;
    }
    equals(v) {
      return v.x === this.x && v.y === this.y && v.z === this.z;
    }
    fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      this.z = array[offset + 2];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      array[offset + 2] = this.z;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      this.z = attribute.getZ(index);
      return this;
    }
    random() {
      this.x = Math.random();
      this.y = Math.random();
      this.z = Math.random();
      return this;
    }
    randomDirection() {
      const theta = Math.random() * Math.PI * 2;
      const u = Math.random() * 2 - 1;
      const c = Math.sqrt(1 - u * u);
      this.x = c * Math.cos(theta);
      this.y = u;
      this.z = c * Math.sin(theta);
      return this;
    }
    *[Symbol.iterator]() {
      yield this.x;
      yield this.y;
      yield this.z;
    }
  }
  const _vector$c = /* @__PURE__ */ new Vector3();
  const _quaternion$4 = /* @__PURE__ */ new Quaternion();
  class Box3 {
    constructor(min = new Vector3(Infinity, Infinity, Infinity), max2 = new Vector3(-Infinity, -Infinity, -Infinity)) {
      this.isBox3 = true;
      this.min = min;
      this.max = max2;
    }
    set(min, max2) {
      this.min.copy(min);
      this.max.copy(max2);
      return this;
    }
    setFromArray(array) {
      this.makeEmpty();
      for (let i2 = 0, il = array.length; i2 < il; i2 += 3) {
        this.expandByPoint(_vector$b.fromArray(array, i2));
      }
      return this;
    }
    setFromBufferAttribute(attribute) {
      this.makeEmpty();
      for (let i2 = 0, il = attribute.count; i2 < il; i2++) {
        this.expandByPoint(_vector$b.fromBufferAttribute(attribute, i2));
      }
      return this;
    }
    setFromPoints(points) {
      this.makeEmpty();
      for (let i2 = 0, il = points.length; i2 < il; i2++) {
        this.expandByPoint(points[i2]);
      }
      return this;
    }
    setFromCenterAndSize(center, size) {
      const halfSize = _vector$b.copy(size).multiplyScalar(0.5);
      this.min.copy(center).sub(halfSize);
      this.max.copy(center).add(halfSize);
      return this;
    }
    setFromObject(object, precise = false) {
      this.makeEmpty();
      return this.expandByObject(object, precise);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(box) {
      this.min.copy(box.min);
      this.max.copy(box.max);
      return this;
    }
    makeEmpty() {
      this.min.x = this.min.y = this.min.z = Infinity;
      this.max.x = this.max.y = this.max.z = -Infinity;
      return this;
    }
    isEmpty() {
      return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
    }
    getCenter(target) {
      return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
    }
    getSize(target) {
      return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
    }
    expandByPoint(point) {
      this.min.min(point);
      this.max.max(point);
      return this;
    }
    expandByVector(vector) {
      this.min.sub(vector);
      this.max.add(vector);
      return this;
    }
    expandByScalar(scalar) {
      this.min.addScalar(-scalar);
      this.max.addScalar(scalar);
      return this;
    }
    expandByObject(object, precise = false) {
      object.updateWorldMatrix(false, false);
      const geometry = object.geometry;
      if (geometry !== void 0) {
        const positionAttribute = geometry.getAttribute("position");
        if (precise === true && positionAttribute !== void 0 && object.isInstancedMesh !== true) {
          for (let i2 = 0, l = positionAttribute.count; i2 < l; i2++) {
            if (object.isMesh === true) {
              object.getVertexPosition(i2, _vector$b);
            } else {
              _vector$b.fromBufferAttribute(positionAttribute, i2);
            }
            _vector$b.applyMatrix4(object.matrixWorld);
            this.expandByPoint(_vector$b);
          }
        } else {
          if (object.boundingBox !== void 0) {
            if (object.boundingBox === null) {
              object.computeBoundingBox();
            }
            _box$4.copy(object.boundingBox);
          } else {
            if (geometry.boundingBox === null) {
              geometry.computeBoundingBox();
            }
            _box$4.copy(geometry.boundingBox);
          }
          _box$4.applyMatrix4(object.matrixWorld);
          this.union(_box$4);
        }
      }
      const children = object.children;
      for (let i2 = 0, l = children.length; i2 < l; i2++) {
        this.expandByObject(children[i2], precise);
      }
      return this;
    }
    containsPoint(point) {
      return point.x >= this.min.x && point.x <= this.max.x && point.y >= this.min.y && point.y <= this.max.y && point.z >= this.min.z && point.z <= this.max.z;
    }
    containsBox(box) {
      return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
    }
    getParameter(point, target) {
      return target.set(
        (point.x - this.min.x) / (this.max.x - this.min.x),
        (point.y - this.min.y) / (this.max.y - this.min.y),
        (point.z - this.min.z) / (this.max.z - this.min.z)
      );
    }
    intersectsBox(box) {
      return box.max.x >= this.min.x && box.min.x <= this.max.x && box.max.y >= this.min.y && box.min.y <= this.max.y && box.max.z >= this.min.z && box.min.z <= this.max.z;
    }
    intersectsSphere(sphere) {
      this.clampPoint(sphere.center, _vector$b);
      return _vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
    }
    intersectsPlane(plane) {
      let min, max2;
      if (plane.normal.x > 0) {
        min = plane.normal.x * this.min.x;
        max2 = plane.normal.x * this.max.x;
      } else {
        min = plane.normal.x * this.max.x;
        max2 = plane.normal.x * this.min.x;
      }
      if (plane.normal.y > 0) {
        min += plane.normal.y * this.min.y;
        max2 += plane.normal.y * this.max.y;
      } else {
        min += plane.normal.y * this.max.y;
        max2 += plane.normal.y * this.min.y;
      }
      if (plane.normal.z > 0) {
        min += plane.normal.z * this.min.z;
        max2 += plane.normal.z * this.max.z;
      } else {
        min += plane.normal.z * this.max.z;
        max2 += plane.normal.z * this.min.z;
      }
      return min <= -plane.constant && max2 >= -plane.constant;
    }
    intersectsTriangle(triangle) {
      if (this.isEmpty()) {
        return false;
      }
      this.getCenter(_center);
      _extents.subVectors(this.max, _center);
      _v0$2.subVectors(triangle.a, _center);
      _v1$7.subVectors(triangle.b, _center);
      _v2$4.subVectors(triangle.c, _center);
      _f0.subVectors(_v1$7, _v0$2);
      _f1.subVectors(_v2$4, _v1$7);
      _f2.subVectors(_v0$2, _v2$4);
      let axes = [
        0,
        -_f0.z,
        _f0.y,
        0,
        -_f1.z,
        _f1.y,
        0,
        -_f2.z,
        _f2.y,
        _f0.z,
        0,
        -_f0.x,
        _f1.z,
        0,
        -_f1.x,
        _f2.z,
        0,
        -_f2.x,
        -_f0.y,
        _f0.x,
        0,
        -_f1.y,
        _f1.x,
        0,
        -_f2.y,
        _f2.x,
        0
      ];
      if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {
        return false;
      }
      axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];
      if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {
        return false;
      }
      _triangleNormal.crossVectors(_f0, _f1);
      axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];
      return satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents);
    }
    clampPoint(point, target) {
      return target.copy(point).clamp(this.min, this.max);
    }
    distanceToPoint(point) {
      return this.clampPoint(point, _vector$b).distanceTo(point);
    }
    getBoundingSphere(target) {
      if (this.isEmpty()) {
        target.makeEmpty();
      } else {
        this.getCenter(target.center);
        target.radius = this.getSize(_vector$b).length() * 0.5;
      }
      return target;
    }
    intersect(box) {
      this.min.max(box.min);
      this.max.min(box.max);
      if (this.isEmpty()) this.makeEmpty();
      return this;
    }
    union(box) {
      this.min.min(box.min);
      this.max.max(box.max);
      return this;
    }
    applyMatrix4(matrix) {
      if (this.isEmpty()) return this;
      _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix);
      _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix);
      _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix);
      _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix);
      _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix);
      _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix);
      _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix);
      _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix);
      this.setFromPoints(_points);
      return this;
    }
    translate(offset) {
      this.min.add(offset);
      this.max.add(offset);
      return this;
    }
    equals(box) {
      return box.min.equals(this.min) && box.max.equals(this.max);
    }
  }
  const _points = [
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3()
  ];
  const _vector$b = /* @__PURE__ */ new Vector3();
  const _box$4 = /* @__PURE__ */ new Box3();
  const _v0$2 = /* @__PURE__ */ new Vector3();
  const _v1$7 = /* @__PURE__ */ new Vector3();
  const _v2$4 = /* @__PURE__ */ new Vector3();
  const _f0 = /* @__PURE__ */ new Vector3();
  const _f1 = /* @__PURE__ */ new Vector3();
  const _f2 = /* @__PURE__ */ new Vector3();
  const _center = /* @__PURE__ */ new Vector3();
  const _extents = /* @__PURE__ */ new Vector3();
  const _triangleNormal = /* @__PURE__ */ new Vector3();
  const _testAxis = /* @__PURE__ */ new Vector3();
  function satForAxes(axes, v0, v1, v2, extents) {
    for (let i2 = 0, j = axes.length - 3; i2 <= j; i2 += 3) {
      _testAxis.fromArray(axes, i2);
      const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z);
      const p0 = v0.dot(_testAxis);
      const p1 = v1.dot(_testAxis);
      const p2 = v2.dot(_testAxis);
      if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {
        return false;
      }
    }
    return true;
  }
  const _colorKeywords = {
    "aliceblue": 15792383,
    "antiquewhite": 16444375,
    "aqua": 65535,
    "aquamarine": 8388564,
    "azure": 15794175,
    "beige": 16119260,
    "bisque": 16770244,
    "black": 0,
    "blanchedalmond": 16772045,
    "blue": 255,
    "blueviolet": 9055202,
    "brown": 10824234,
    "burlywood": 14596231,
    "cadetblue": 6266528,
    "chartreuse": 8388352,
    "chocolate": 13789470,
    "coral": 16744272,
    "cornflowerblue": 6591981,
    "cornsilk": 16775388,
    "crimson": 14423100,
    "cyan": 65535,
    "darkblue": 139,
    "darkcyan": 35723,
    "darkgoldenrod": 12092939,
    "darkgray": 11119017,
    "darkgreen": 25600,
    "darkgrey": 11119017,
    "darkkhaki": 12433259,
    "darkmagenta": 9109643,
    "darkolivegreen": 5597999,
    "darkorange": 16747520,
    "darkorchid": 10040012,
    "darkred": 9109504,
    "darksalmon": 15308410,
    "darkseagreen": 9419919,
    "darkslateblue": 4734347,
    "darkslategray": 3100495,
    "darkslategrey": 3100495,
    "darkturquoise": 52945,
    "darkviolet": 9699539,
    "deeppink": 16716947,
    "deepskyblue": 49151,
    "dimgray": 6908265,
    "dimgrey": 6908265,
    "dodgerblue": 2003199,
    "firebrick": 11674146,
    "floralwhite": 16775920,
    "forestgreen": 2263842,
    "fuchsia": 16711935,
    "gainsboro": 14474460,
    "ghostwhite": 16316671,
    "gold": 16766720,
    "goldenrod": 14329120,
    "gray": 8421504,
    "green": 32768,
    "greenyellow": 11403055,
    "grey": 8421504,
    "honeydew": 15794160,
    "hotpink": 16738740,
    "indianred": 13458524,
    "indigo": 4915330,
    "ivory": 16777200,
    "khaki": 15787660,
    "lavender": 15132410,
    "lavenderblush": 16773365,
    "lawngreen": 8190976,
    "lemonchiffon": 16775885,
    "lightblue": 11393254,
    "lightcoral": 15761536,
    "lightcyan": 14745599,
    "lightgoldenrodyellow": 16448210,
    "lightgray": 13882323,
    "lightgreen": 9498256,
    "lightgrey": 13882323,
    "lightpink": 16758465,
    "lightsalmon": 16752762,
    "lightseagreen": 2142890,
    "lightskyblue": 8900346,
    "lightslategray": 7833753,
    "lightslategrey": 7833753,
    "lightsteelblue": 11584734,
    "lightyellow": 16777184,
    "lime": 65280,
    "limegreen": 3329330,
    "linen": 16445670,
    "magenta": 16711935,
    "maroon": 8388608,
    "mediumaquamarine": 6737322,
    "mediumblue": 205,
    "mediumorchid": 12211667,
    "mediumpurple": 9662683,
    "mediumseagreen": 3978097,
    "mediumslateblue": 8087790,
    "mediumspringgreen": 64154,
    "mediumturquoise": 4772300,
    "mediumvioletred": 13047173,
    "midnightblue": 1644912,
    "mintcream": 16121850,
    "mistyrose": 16770273,
    "moccasin": 16770229,
    "navajowhite": 16768685,
    "navy": 128,
    "oldlace": 16643558,
    "olive": 8421376,
    "olivedrab": 7048739,
    "orange": 16753920,
    "orangered": 16729344,
    "orchid": 14315734,
    "palegoldenrod": 15657130,
    "palegreen": 10025880,
    "paleturquoise": 11529966,
    "palevioletred": 14381203,
    "papayawhip": 16773077,
    "peachpuff": 16767673,
    "peru": 13468991,
    "pink": 16761035,
    "plum": 14524637,
    "powderblue": 11591910,
    "purple": 8388736,
    "rebeccapurple": 6697881,
    "red": 16711680,
    "rosybrown": 12357519,
    "royalblue": 4286945,
    "saddlebrown": 9127187,
    "salmon": 16416882,
    "sandybrown": 16032864,
    "seagreen": 3050327,
    "seashell": 16774638,
    "sienna": 10506797,
    "silver": 12632256,
    "skyblue": 8900331,
    "slateblue": 6970061,
    "slategray": 7372944,
    "slategrey": 7372944,
    "snow": 16775930,
    "springgreen": 65407,
    "steelblue": 4620980,
    "tan": 13808780,
    "teal": 32896,
    "thistle": 14204888,
    "tomato": 16737095,
    "turquoise": 4251856,
    "violet": 15631086,
    "wheat": 16113331,
    "white": 16777215,
    "whitesmoke": 16119285,
    "yellow": 16776960,
    "yellowgreen": 10145074
  };
  const _hslA = { h: 0, s: 0, l: 0 };
  const _hslB = { h: 0, s: 0, l: 0 };
  function hue2rgb(p, q, t) {
    if (t < 0) t += 1;
    if (t > 1) t -= 1;
    if (t < 1 / 6) return p + (q - p) * 6 * t;
    if (t < 1 / 2) return q;
    if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);
    return p;
  }
  class Color {
    constructor(r, g, b) {
      this.isColor = true;
      this.r = 1;
      this.g = 1;
      this.b = 1;
      return this.set(r, g, b);
    }
    set(r, g, b) {
      if (g === void 0 && b === void 0) {
        const value = r;
        if (value && value.isColor) {
          this.copy(value);
        } else if (typeof value === "number") {
          this.setHex(value);
        } else if (typeof value === "string") {
          this.setStyle(value);
        }
      } else {
        this.setRGB(r, g, b);
      }
      return this;
    }
    setScalar(scalar) {
      this.r = scalar;
      this.g = scalar;
      this.b = scalar;
      return this;
    }
    setHex(hex, colorSpace = SRGBColorSpace) {
      hex = Math.floor(hex);
      this.r = (hex >> 16 & 255) / 255;
      this.g = (hex >> 8 & 255) / 255;
      this.b = (hex & 255) / 255;
      ColorManagement.toWorkingColorSpace(this, colorSpace);
      return this;
    }
    setRGB(r, g, b, colorSpace = ColorManagement.workingColorSpace) {
      this.r = r;
      this.g = g;
      this.b = b;
      ColorManagement.toWorkingColorSpace(this, colorSpace);
      return this;
    }
    setHSL(h, s, l, colorSpace = ColorManagement.workingColorSpace) {
      h = euclideanModulo(h, 1);
      s = clamp(s, 0, 1);
      l = clamp(l, 0, 1);
      if (s === 0) {
        this.r = this.g = this.b = l;
      } else {
        const p = l <= 0.5 ? l * (1 + s) : l + s - l * s;
        const q = 2 * l - p;
        this.r = hue2rgb(q, p, h + 1 / 3);
        this.g = hue2rgb(q, p, h);
        this.b = hue2rgb(q, p, h - 1 / 3);
      }
      ColorManagement.toWorkingColorSpace(this, colorSpace);
      return this;
    }
    setStyle(style, colorSpace = SRGBColorSpace) {
      function handleAlpha(string) {
        if (string === void 0) return;
        if (parseFloat(string) < 1) {
          console.warn("THREE.Color: Alpha component of " + style + " will be ignored.");
        }
      }
      let m;
      if (m = /^(\\w+)\\(([^\\)]*)\\)/.exec(style)) {
        let color;
        const name = m[1];
        const components = m[2];
        switch (name) {
          case "rgb":
          case "rgba":
            if (color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {
              handleAlpha(color[4]);
              return this.setRGB(
                Math.min(255, parseInt(color[1], 10)) / 255,
                Math.min(255, parseInt(color[2], 10)) / 255,
                Math.min(255, parseInt(color[3], 10)) / 255,
                colorSpace
              );
            }
            if (color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {
              handleAlpha(color[4]);
              return this.setRGB(
                Math.min(100, parseInt(color[1], 10)) / 100,
                Math.min(100, parseInt(color[2], 10)) / 100,
                Math.min(100, parseInt(color[3], 10)) / 100,
                colorSpace
              );
            }
            break;
          case "hsl":
          case "hsla":
            if (color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {
              handleAlpha(color[4]);
              return this.setHSL(
                parseFloat(color[1]) / 360,
                parseFloat(color[2]) / 100,
                parseFloat(color[3]) / 100,
                colorSpace
              );
            }
            break;
          default:
            console.warn("THREE.Color: Unknown color model " + style);
        }
      } else if (m = /^\\#([A-Fa-f\\d]+)$/.exec(style)) {
        const hex = m[1];
        const size = hex.length;
        if (size === 3) {
          return this.setRGB(
            parseInt(hex.charAt(0), 16) / 15,
            parseInt(hex.charAt(1), 16) / 15,
            parseInt(hex.charAt(2), 16) / 15,
            colorSpace
          );
        } else if (size === 6) {
          return this.setHex(parseInt(hex, 16), colorSpace);
        } else {
          console.warn("THREE.Color: Invalid hex color " + style);
        }
      } else if (style && style.length > 0) {
        return this.setColorName(style, colorSpace);
      }
      return this;
    }
    setColorName(style, colorSpace = SRGBColorSpace) {
      const hex = _colorKeywords[style.toLowerCase()];
      if (hex !== void 0) {
        this.setHex(hex, colorSpace);
      } else {
        console.warn("THREE.Color: Unknown color " + style);
      }
      return this;
    }
    clone() {
      return new this.constructor(this.r, this.g, this.b);
    }
    copy(color) {
      this.r = color.r;
      this.g = color.g;
      this.b = color.b;
      return this;
    }
    copySRGBToLinear(color) {
      this.r = SRGBToLinear(color.r);
      this.g = SRGBToLinear(color.g);
      this.b = SRGBToLinear(color.b);
      return this;
    }
    copyLinearToSRGB(color) {
      this.r = LinearToSRGB(color.r);
      this.g = LinearToSRGB(color.g);
      this.b = LinearToSRGB(color.b);
      return this;
    }
    convertSRGBToLinear() {
      this.copySRGBToLinear(this);
      return this;
    }
    convertLinearToSRGB() {
      this.copyLinearToSRGB(this);
      return this;
    }
    getHex(colorSpace = SRGBColorSpace) {
      ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
      return Math.round(clamp(_color.r * 255, 0, 255)) * 65536 + Math.round(clamp(_color.g * 255, 0, 255)) * 256 + Math.round(clamp(_color.b * 255, 0, 255));
    }
    getHexString(colorSpace = SRGBColorSpace) {
      return ("000000" + this.getHex(colorSpace).toString(16)).slice(-6);
    }
    getHSL(target, colorSpace = ColorManagement.workingColorSpace) {
      ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
      const r = _color.r, g = _color.g, b = _color.b;
      const max2 = Math.max(r, g, b);
      const min = Math.min(r, g, b);
      let hue, saturation;
      const lightness = (min + max2) / 2;
      if (min === max2) {
        hue = 0;
        saturation = 0;
      } else {
        const delta = max2 - min;
        saturation = lightness <= 0.5 ? delta / (max2 + min) : delta / (2 - max2 - min);
        switch (max2) {
          case r:
            hue = (g - b) / delta + (g < b ? 6 : 0);
            break;
          case g:
            hue = (b - r) / delta + 2;
            break;
          case b:
            hue = (r - g) / delta + 4;
            break;
        }
        hue /= 6;
      }
      target.h = hue;
      target.s = saturation;
      target.l = lightness;
      return target;
    }
    getRGB(target, colorSpace = ColorManagement.workingColorSpace) {
      ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
      target.r = _color.r;
      target.g = _color.g;
      target.b = _color.b;
      return target;
    }
    getStyle(colorSpace = SRGBColorSpace) {
      ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
      const r = _color.r, g = _color.g, b = _color.b;
      if (colorSpace !== SRGBColorSpace) {
        return \`color(\${colorSpace} \${r.toFixed(3)} \${g.toFixed(3)} \${b.toFixed(3)})\`;
      }
      return \`rgb(\${Math.round(r * 255)},\${Math.round(g * 255)},\${Math.round(b * 255)})\`;
    }
    offsetHSL(h, s, l) {
      this.getHSL(_hslA);
      return this.setHSL(_hslA.h + h, _hslA.s + s, _hslA.l + l);
    }
    add(color) {
      this.r += color.r;
      this.g += color.g;
      this.b += color.b;
      return this;
    }
    addColors(color1, color2) {
      this.r = color1.r + color2.r;
      this.g = color1.g + color2.g;
      this.b = color1.b + color2.b;
      return this;
    }
    addScalar(s) {
      this.r += s;
      this.g += s;
      this.b += s;
      return this;
    }
    sub(color) {
      this.r = Math.max(0, this.r - color.r);
      this.g = Math.max(0, this.g - color.g);
      this.b = Math.max(0, this.b - color.b);
      return this;
    }
    multiply(color) {
      this.r *= color.r;
      this.g *= color.g;
      this.b *= color.b;
      return this;
    }
    multiplyScalar(s) {
      this.r *= s;
      this.g *= s;
      this.b *= s;
      return this;
    }
    lerp(color, alpha) {
      this.r += (color.r - this.r) * alpha;
      this.g += (color.g - this.g) * alpha;
      this.b += (color.b - this.b) * alpha;
      return this;
    }
    lerpColors(color1, color2, alpha) {
      this.r = color1.r + (color2.r - color1.r) * alpha;
      this.g = color1.g + (color2.g - color1.g) * alpha;
      this.b = color1.b + (color2.b - color1.b) * alpha;
      return this;
    }
    lerpHSL(color, alpha) {
      this.getHSL(_hslA);
      color.getHSL(_hslB);
      const h = lerp(_hslA.h, _hslB.h, alpha);
      const s = lerp(_hslA.s, _hslB.s, alpha);
      const l = lerp(_hslA.l, _hslB.l, alpha);
      this.setHSL(h, s, l);
      return this;
    }
    setFromVector3(v) {
      this.r = v.x;
      this.g = v.y;
      this.b = v.z;
      return this;
    }
    applyMatrix3(m) {
      const r = this.r, g = this.g, b = this.b;
      const e = m.elements;
      this.r = e[0] * r + e[3] * g + e[6] * b;
      this.g = e[1] * r + e[4] * g + e[7] * b;
      this.b = e[2] * r + e[5] * g + e[8] * b;
      return this;
    }
    equals(c) {
      return c.r === this.r && c.g === this.g && c.b === this.b;
    }
    fromArray(array, offset = 0) {
      this.r = array[offset];
      this.g = array[offset + 1];
      this.b = array[offset + 2];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.r;
      array[offset + 1] = this.g;
      array[offset + 2] = this.b;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.r = attribute.getX(index);
      this.g = attribute.getY(index);
      this.b = attribute.getZ(index);
      return this;
    }
    toJSON() {
      return this.getHex();
    }
    *[Symbol.iterator]() {
      yield this.r;
      yield this.g;
      yield this.b;
    }
  }
  const _color = /* @__PURE__ */ new Color();
  Color.NAMES = _colorKeywords;
  if (typeof __THREE_DEVTOOLS__ !== "undefined") {
    __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
      revision: REVISION
    } }));
  }
  if (typeof window !== "undefined") {
    if (window.__THREE__) {
      console.warn("WARNING: Multiple instances of Three.js being imported.");
    } else {
      window.__THREE__ = REVISION;
    }
  }
  const LN_SCALE_MIN = -12;
  const LN_SCALE_MAX = 9;
  const LN_SCALE_ZERO = -30;
  const SCALE_ZERO = Math.exp(LN_SCALE_ZERO);
  const SPLAT_TEX_WIDTH_BITS = 11;
  const SPLAT_TEX_HEIGHT_BITS = 11;
  const SPLAT_TEX_WIDTH = 1 << SPLAT_TEX_WIDTH_BITS;
  const SPLAT_TEX_HEIGHT = 1 << SPLAT_TEX_HEIGHT_BITS;
  const SPLAT_TEX_MIN_HEIGHT = 1;
  function unindentLines(s) {
    var _a2;
    let seenNonEmpty = false;
    const lines = s.split("\\n").map((line) => {
      const trimmedLine = line.trimEnd();
      if (seenNonEmpty) {
        return trimmedLine;
      }
      if (trimmedLine.length > 0) {
        seenNonEmpty = true;
        return trimmedLine;
      }
      return null;
    }).filter((line) => line != null);
    while (lines.length > 0 && lines[lines.length - 1].length === 0) {
      lines.pop();
    }
    if (lines.length === 0) {
      return [];
    }
    const indent = (_a2 = lines[0].match(/^\\s*/)) == null ? void 0 : _a2[0];
    if (!indent) {
      return lines;
    }
    const regex = new RegExp(\`^\${indent}\`);
    return lines.map((line) => line.replace(regex, ""));
  }
  function unindent(s) {
    return unindentLines(s).join("\\n");
  }
  const f32buffer = new Float32Array(1);
  const u32buffer = new Uint32Array(f32buffer.buffer);
  function toHalf(f) {
    f32buffer[0] = f;
    const bits2 = u32buffer[0];
    const sign = bits2 >> 31 & 1;
    const exp = bits2 >> 23 & 255;
    const frac = bits2 & 8388607;
    const halfSign = sign << 15;
    if (exp === 255) {
      if (frac !== 0) {
        return halfSign | 32767;
      }
      return halfSign | 31744;
    }
    const newExp = exp - 127 + 15;
    if (newExp >= 31) {
      return halfSign | 31744;
    }
    if (newExp <= 0) {
      if (newExp < -10) {
        return halfSign;
      }
      const subFrac = (frac | 8388608) >> 1 - newExp + 13;
      return halfSign | subFrac;
    }
    const halfFrac = frac >> 13;
    return halfSign | newExp << 10 | halfFrac;
  }
  function fromHalf(h) {
    const sign = h >> 15 & 1;
    const exp = h >> 10 & 31;
    const frac = h & 1023;
    let f32bits;
    if (exp === 0) {
      if (frac === 0) {
        f32bits = sign << 31;
      } else {
        let mant = frac;
        let e = -14;
        while ((mant & 1024) === 0) {
          mant <<= 1;
          e--;
        }
        mant &= 1023;
        const newExp = e + 127;
        const newFrac = mant << 13;
        f32bits = sign << 31 | newExp << 23 | newFrac;
      }
    } else if (exp === 31) {
      if (frac === 0) {
        f32bits = sign << 31 | 2139095040;
      } else {
        f32bits = sign << 31 | 2143289344;
      }
    } else {
      const newExp = exp - 15 + 127;
      const newFrac = frac << 13;
      f32bits = sign << 31 | newExp << 23 | newFrac;
    }
    u32buffer[0] = f32bits;
    return f32buffer[0];
  }
  function floatToUint8(v) {
    return Math.max(0, Math.min(255, Math.round(v * 255)));
  }
  function getArrayBuffers(ctx) {
    const buffers = [];
    const seen = /* @__PURE__ */ new Set();
    function traverse(obj) {
      if (obj && typeof obj === "object" && !seen.has(obj)) {
        seen.add(obj);
        if (obj instanceof ArrayBuffer) {
          buffers.push(obj);
        } else if (ArrayBuffer.isView(obj)) {
          buffers.push(obj.buffer);
        } else if (Array.isArray(obj)) {
          obj.forEach(traverse);
        } else {
          Object.values(obj).forEach(traverse);
        }
      }
    }
    traverse(ctx);
    return buffers;
  }
  function setPackedSplat(packedSplats, index, x2, y, z, scaleX, scaleY, scaleZ, quatX, quatY, quatZ, quatW, opacity, r, g, b, encoding) {
    const rgbMin = (encoding == null ? void 0 : encoding.rgbMin) ?? 0;
    const rgbMax = (encoding == null ? void 0 : encoding.rgbMax) ?? 1;
    const rgbRange = rgbMax - rgbMin;
    const uR = floatToUint8((r - rgbMin) / rgbRange);
    const uG = floatToUint8((g - rgbMin) / rgbRange);
    const uB = floatToUint8((b - rgbMin) / rgbRange);
    const uA = floatToUint8(opacity);
    const uQuat = encodeQuatOctXy88R8(
      new Quaternion(quatX, quatY, quatZ, quatW)
    );
    const uQuatX = uQuat & 255;
    const uQuatY = uQuat >>> 8 & 255;
    const uQuatZ = uQuat >>> 16 & 255;
    const lnScaleMin = (encoding == null ? void 0 : encoding.lnScaleMin) ?? LN_SCALE_MIN;
    const lnScaleMax = (encoding == null ? void 0 : encoding.lnScaleMax) ?? LN_SCALE_MAX;
    const lnScaleScale = 254 / (lnScaleMax - lnScaleMin);
    const uScaleX = scaleX < SCALE_ZERO ? 0 : Math.min(
      255,
      Math.max(
        1,
        Math.round((Math.log(scaleX) - lnScaleMin) * lnScaleScale) + 1
      )
    );
    const uScaleY = scaleY < SCALE_ZERO ? 0 : Math.min(
      255,
      Math.max(
        1,
        Math.round((Math.log(scaleY) - lnScaleMin) * lnScaleScale) + 1
      )
    );
    const uScaleZ = scaleZ < SCALE_ZERO ? 0 : Math.min(
      255,
      Math.max(
        1,
        Math.round((Math.log(scaleZ) - lnScaleMin) * lnScaleScale) + 1
      )
    );
    const uCenterX = toHalf(x2);
    const uCenterY = toHalf(y);
    const uCenterZ = toHalf(z);
    const i4 = index * 4;
    packedSplats[i4] = uR | uG << 8 | uB << 16 | uA << 24;
    packedSplats[i4 + 1] = uCenterX | uCenterY << 16;
    packedSplats[i4 + 2] = uCenterZ | uQuatX << 16 | uQuatY << 24;
    packedSplats[i4 + 3] = uScaleX | uScaleY << 8 | uScaleZ << 16 | uQuatZ << 24;
  }
  function setPackedSplatCenter(packedSplats, index, x2, y, z) {
    const uCenterX = toHalf(x2);
    const uCenterY = toHalf(y);
    const uCenterZ = toHalf(z);
    const i4 = index * 4;
    packedSplats[i4 + 1] = uCenterX | uCenterY << 16;
    packedSplats[i4 + 2] = uCenterZ | packedSplats[i4 + 2] & 4294901760;
  }
  function setPackedSplatScales(packedSplats, index, scaleX, scaleY, scaleZ, encoding) {
    const lnScaleMin = (encoding == null ? void 0 : encoding.lnScaleMin) ?? LN_SCALE_MIN;
    const lnScaleMax = (encoding == null ? void 0 : encoding.lnScaleMax) ?? LN_SCALE_MAX;
    const lnScaleScale = 254 / (lnScaleMax - lnScaleMin);
    const uScaleX = scaleX < SCALE_ZERO ? 0 : Math.min(
      255,
      Math.max(
        1,
        Math.round((Math.log(scaleX) - lnScaleMin) * lnScaleScale) + 1
      )
    );
    const uScaleY = scaleY < SCALE_ZERO ? 0 : Math.min(
      255,
      Math.max(
        1,
        Math.round((Math.log(scaleY) - lnScaleMin) * lnScaleScale) + 1
      )
    );
    const uScaleZ = scaleZ < SCALE_ZERO ? 0 : Math.min(
      255,
      Math.max(
        1,
        Math.round((Math.log(scaleZ) - lnScaleMin) * lnScaleScale) + 1
      )
    );
    const i4 = index * 4;
    packedSplats[i4 + 3] = uScaleX | uScaleY << 8 | uScaleZ << 16 | packedSplats[i4 + 3] & 4278190080;
  }
  function setPackedSplatQuat(packedSplats, index, quatX, quatY, quatZ, quatW) {
    const uQuat = encodeQuatOctXy88R8(
      new Quaternion(quatX, quatY, quatZ, quatW)
    );
    const uQuatX = uQuat & 255;
    const uQuatY = uQuat >>> 8 & 255;
    const uQuatZ = uQuat >>> 16 & 255;
    const i4 = index * 4;
    packedSplats[i4 + 2] = packedSplats[i4 + 2] & 65535 | uQuatX << 16 | uQuatY << 24;
    packedSplats[i4 + 3] = packedSplats[i4 + 3] & 16777215 | uQuatZ << 24;
  }
  function setPackedSplatRgba(packedSplats, index, r, g, b, a, encoding) {
    const rgbMin = (encoding == null ? void 0 : encoding.rgbMin) ?? 0;
    const rgbMax = (encoding == null ? void 0 : encoding.rgbMax) ?? 1;
    const rgbRange = rgbMax - rgbMin;
    const uR = floatToUint8((r - rgbMin) / rgbRange);
    const uG = floatToUint8((g - rgbMin) / rgbRange);
    const uB = floatToUint8((b - rgbMin) / rgbRange);
    const uA = floatToUint8(a);
    const i4 = index * 4;
    packedSplats[i4] = uR | uG << 8 | uB << 16 | uA << 24;
  }
  function setPackedSplatRgb(packedSplats, index, r, g, b, encoding) {
    const rgbMin = (encoding == null ? void 0 : encoding.rgbMin) ?? 0;
    const rgbMax = (encoding == null ? void 0 : encoding.rgbMax) ?? 1;
    const rgbRange = rgbMax - rgbMin;
    const uR = floatToUint8((r - rgbMin) / rgbRange);
    const uG = floatToUint8((g - rgbMin) / rgbRange);
    const uB = floatToUint8((b - rgbMin) / rgbRange);
    const i4 = index * 4;
    packedSplats[i4] = uR | uG << 8 | uB << 16 | packedSplats[i4] & 4278190080;
  }
  function setPackedSplatOpacity(packedSplats, index, opacity) {
    const uA = floatToUint8(opacity);
    const i4 = index * 4;
    packedSplats[i4] = packedSplats[i4] & 16777215 | uA << 24;
  }
  new Vector3();
  new Vector3();
  new Color();
  function getTextureSize(numSplats) {
    const width = SPLAT_TEX_WIDTH;
    const height = Math.max(
      SPLAT_TEX_MIN_HEIGHT,
      Math.min(SPLAT_TEX_HEIGHT, Math.ceil(numSplats / width))
    );
    const depth = Math.ceil(numSplats / (width * height));
    const maxSplats = width * height * depth;
    return { width, height, depth, maxSplats };
  }
  function computeMaxSplats(numSplats) {
    const width = SPLAT_TEX_WIDTH;
    const height = Math.max(
      SPLAT_TEX_MIN_HEIGHT,
      Math.min(SPLAT_TEX_HEIGHT, Math.ceil(numSplats / width))
    );
    const depth = Math.ceil(numSplats / (width * height));
    return width * height * depth;
  }
  unindent(\`
  precision highp float;

  in vec3 position;

  void main() {
    gl_Position = vec4(position.xy, 0.0, 1.0);
  }
\`);
  function encodeQuatOctXy88R8(q) {
    const qnorm = q.clone().normalize();
    if (qnorm.w < 0) {
      qnorm.set(-qnorm.x, -qnorm.y, -qnorm.z, -qnorm.w);
    }
    const theta = 2 * Math.acos(qnorm.w);
    const xyz_norm = Math.sqrt(
      qnorm.x * qnorm.x + qnorm.y * qnorm.y + qnorm.z * qnorm.z
    );
    const axis = xyz_norm < 1e-6 ? new Vector3(1, 0, 0) : new Vector3(qnorm.x, qnorm.y, qnorm.z).divideScalar(xyz_norm);
    const sum = Math.abs(axis.x) + Math.abs(axis.y) + Math.abs(axis.z);
    let p_x = axis.x / sum;
    let p_y = axis.y / sum;
    if (axis.z < 0) {
      const tmp = p_x;
      p_x = (1 - Math.abs(p_y)) * (p_x >= 0 ? 1 : -1);
      p_y = (1 - Math.abs(tmp)) * (p_y >= 0 ? 1 : -1);
    }
    const u_f = p_x * 0.5 + 0.5;
    const v_f = p_y * 0.5 + 0.5;
    const quantU = Math.round(u_f * 255);
    const quantV = Math.round(v_f * 255);
    const angleInt = Math.round(theta * (255 / Math.PI));
    return angleInt << 16 | quantV << 8 | quantU;
  }
  function packSint8Bytes(b0, b1, b22, b3) {
    const clampedB0 = Math.max(-127, Math.min(127, b0 * 127));
    const clampedB1 = Math.max(-127, Math.min(127, b1 * 127));
    const clampedB2 = Math.max(-127, Math.min(127, b22 * 127));
    const clampedB3 = Math.max(-127, Math.min(127, b3 * 127));
    return clampedB0 & 255 | (clampedB1 & 255) << 8 | (clampedB2 & 255) << 16 | (clampedB3 & 255) << 24;
  }
  function encodeSh1Rgb(sh1Array, index, sh1Rgb, encoding) {
    const sh1Min = (encoding == null ? void 0 : encoding.sh1Min) ?? -1;
    const sh1Max = (encoding == null ? void 0 : encoding.sh1Max) ?? 1;
    const sh1Mid = 0.5 * (sh1Min + sh1Max);
    const sh1Scale = 126 / (sh1Max - sh1Min);
    const base = index * 2;
    for (let i2 = 0; i2 < 9; ++i2) {
      const s = (sh1Rgb[i2] - sh1Mid) * sh1Scale;
      const value = Math.round(Math.max(-63, Math.min(63, s))) & 127;
      const bitStart = i2 * 7;
      const bitEnd = bitStart + 7;
      const wordStart = Math.floor(bitStart / 32);
      const bitOffset = bitStart - wordStart * 32;
      const firstWord = value << bitOffset & 4294967295;
      sh1Array[base + wordStart] |= firstWord;
      if (bitEnd > wordStart * 32 + 32) {
        const secondWord = value >>> 32 - bitOffset & 4294967295;
        sh1Array[base + wordStart + 1] |= secondWord;
      }
    }
  }
  function encodeSh2Rgb(sh2Array, index, sh2Rgb, encoding) {
    const sh2Min = (encoding == null ? void 0 : encoding.sh2Min) ?? -1;
    const sh2Max = (encoding == null ? void 0 : encoding.sh2Max) ?? 1;
    const sh2Mid = 0.5 * (sh2Min + sh2Max);
    const sh2Scale = 2 / (sh2Max - sh2Min);
    sh2Array[index * 4 + 0] = packSint8Bytes(
      (sh2Rgb[0] - sh2Mid) * sh2Scale,
      (sh2Rgb[1] - sh2Mid) * sh2Scale,
      (sh2Rgb[2] - sh2Mid) * sh2Scale,
      (sh2Rgb[3] - sh2Mid) * sh2Scale
    );
    sh2Array[index * 4 + 1] = packSint8Bytes(
      (sh2Rgb[4] - sh2Mid) * sh2Scale,
      (sh2Rgb[5] - sh2Mid) * sh2Scale,
      (sh2Rgb[6] - sh2Mid) * sh2Scale,
      (sh2Rgb[7] - sh2Mid) * sh2Scale
    );
    sh2Array[index * 4 + 2] = packSint8Bytes(
      (sh2Rgb[8] - sh2Mid) * sh2Scale,
      (sh2Rgb[9] - sh2Mid) * sh2Scale,
      (sh2Rgb[10] - sh2Mid) * sh2Scale,
      (sh2Rgb[11] - sh2Mid) * sh2Scale
    );
    sh2Array[index * 4 + 3] = packSint8Bytes(
      (sh2Rgb[12] - sh2Mid) * sh2Scale,
      (sh2Rgb[13] - sh2Mid) * sh2Scale,
      (sh2Rgb[14] - sh2Mid) * sh2Scale,
      0
    );
  }
  function encodeSh3Rgb(sh3Array, index, sh3Rgb, encoding) {
    const sh3Min = (encoding == null ? void 0 : encoding.sh3Min) ?? -1;
    const sh3Max = (encoding == null ? void 0 : encoding.sh3Max) ?? 1;
    const sh3Mid = 0.5 * (sh3Min + sh3Max);
    const sh3Scale = 62 / (sh3Max - sh3Min);
    const base = index * 4;
    for (let i2 = 0; i2 < 21; ++i2) {
      const s = (sh3Rgb[i2] - sh3Mid) * sh3Scale;
      const value = Math.round(Math.max(-31, Math.min(31, s))) & 63;
      const bitStart = i2 * 6;
      const bitEnd = bitStart + 6;
      const wordStart = Math.floor(bitStart / 32);
      const bitOffset = bitStart - wordStart * 32;
      const firstWord = value << bitOffset & 4294967295;
      sh3Array[base + wordStart] |= firstWord;
      if (bitEnd > wordStart * 32 + 32) {
        const secondWord = value >>> 32 - bitOffset & 4294967295;
        sh3Array[base + wordStart + 1] |= secondWord;
      }
    }
  }
  function decompressPartialGzip(fileBytes, numBytes) {
    const chunks = [];
    let totalBytes = 0;
    let result = null;
    const gunzip = new Gunzip((data, final) => {
      chunks.push(data);
      totalBytes += data.length;
      if (final || totalBytes >= numBytes) {
        const allBytes = new Uint8Array(totalBytes);
        let offset2 = 0;
        for (const chunk of chunks) {
          allBytes.set(chunk, offset2);
          offset2 += chunk.length;
        }
        result = allBytes.slice(0, numBytes);
      }
    });
    const CHUNK_SIZE = 1024;
    let offset = 0;
    while (result == null && offset < fileBytes.length) {
      const chunk = fileBytes.slice(offset, offset + CHUNK_SIZE);
      gunzip.push(chunk, false);
      offset += CHUNK_SIZE;
    }
    if (result == null) {
      gunzip.push(new Uint8Array(), true);
      if (result == null) {
        throw new Error("Failed to decompress partial gzip");
      }
    }
    return result;
  }
  class GunzipReader {
    constructor({
      fileBytes,
      chunkBytes = 64 * 1024
    }) {
      this.fileBytes = fileBytes;
      this.chunkBytes = chunkBytes;
      this.offset = 0;
      this.chunks = [];
      this.totalBytes = 0;
      this.gunzip = new Gunzip((chunk, _final) => {
        this.chunks.push(chunk);
        this.totalBytes += chunk.length;
      });
    }
    read(numBytes) {
      while (this.totalBytes < numBytes && this.offset < this.fileBytes.length) {
        const end = Math.min(
          this.offset + this.chunkBytes,
          this.fileBytes.length
        );
        this.gunzip.push(this.fileBytes.subarray(this.offset, end), false);
        this.offset = end;
      }
      if (this.totalBytes < numBytes && this.offset >= this.fileBytes.length) {
        this.gunzip.push(new Uint8Array(0), true);
      }
      if (this.totalBytes < numBytes) {
        throw new Error(
          \`Unexpected EOF: needed \${numBytes}, got \${this.totalBytes}\`
        );
      }
      const allBytes = new Uint8Array(this.totalBytes);
      let outOffset = 0;
      for (const chunk of this.chunks) {
        allBytes.set(chunk, outOffset);
        outOffset += chunk.length;
      }
      const result = allBytes.subarray(0, numBytes);
      this.chunks = [allBytes.subarray(numBytes)];
      this.totalBytes -= numBytes;
      return result;
    }
  }
  function decodeAntiSplat(fileBytes, initNumSplats, splatCallback) {
    const numSplats = Math.floor(fileBytes.length / 32);
    if (numSplats * 32 !== fileBytes.length) {
      throw new Error("Invalid .splat file size");
    }
    initNumSplats(numSplats);
    const f32 = new Float32Array(fileBytes.buffer);
    for (let i2 = 0; i2 < numSplats; ++i2) {
      const i322 = i2 * 32;
      const i8 = i2 * 8;
      const x2 = f32[i8 + 0];
      const y = f32[i8 + 1];
      const z = f32[i8 + 2];
      const scaleX = f32[i8 + 3];
      const scaleY = f32[i8 + 4];
      const scaleZ = f32[i8 + 5];
      const r = fileBytes[i322 + 24] / 255;
      const g = fileBytes[i322 + 25] / 255;
      const b = fileBytes[i322 + 26] / 255;
      const opacity = fileBytes[i322 + 27] / 255;
      const quatW = (fileBytes[i322 + 28] - 128) / 128;
      const quatX = (fileBytes[i322 + 29] - 128) / 128;
      const quatY = (fileBytes[i322 + 30] - 128) / 128;
      const quatZ = (fileBytes[i322 + 31] - 128) / 128;
      splatCallback(
        i2,
        x2,
        y,
        z,
        scaleX,
        scaleY,
        scaleZ,
        quatX,
        quatY,
        quatZ,
        quatW,
        opacity,
        r,
        g,
        b
      );
    }
  }
  function unpackAntiSplat(fileBytes, splatEncoding) {
    let numSplats = 0;
    let maxSplats = 0;
    let packedArray = new Uint32Array(0);
    decodeAntiSplat(
      fileBytes,
      (cbNumSplats) => {
        numSplats = cbNumSplats;
        maxSplats = computeMaxSplats(numSplats);
        packedArray = new Uint32Array(maxSplats * 4);
      },
      (index, x2, y, z, scaleX, scaleY, scaleZ, quatX, quatY, quatZ, quatW, opacity, r, g, b) => {
        setPackedSplat(
          packedArray,
          index,
          x2,
          y,
          z,
          scaleX,
          scaleY,
          scaleZ,
          quatX,
          quatY,
          quatZ,
          quatW,
          opacity,
          r,
          g,
          b,
          splatEncoding
        );
      }
    );
    return { packedArray, numSplats };
  }
  const KSPLAT_COMPRESSION = {
    0: {
      bytesPerCenter: 12,
      bytesPerScale: 12,
      bytesPerRotation: 16,
      bytesPerColor: 4,
      bytesPerSphericalHarmonicsComponent: 4,
      scaleOffsetBytes: 12,
      rotationOffsetBytes: 24,
      colorOffsetBytes: 40,
      sphericalHarmonicsOffsetBytes: 44,
      scaleRange: 1
    },
    1: {
      bytesPerCenter: 6,
      bytesPerScale: 6,
      bytesPerRotation: 8,
      bytesPerColor: 4,
      bytesPerSphericalHarmonicsComponent: 2,
      scaleOffsetBytes: 6,
      rotationOffsetBytes: 12,
      colorOffsetBytes: 20,
      sphericalHarmonicsOffsetBytes: 24,
      scaleRange: 32767
    },
    2: {
      bytesPerCenter: 6,
      bytesPerScale: 6,
      bytesPerRotation: 8,
      bytesPerColor: 4,
      bytesPerSphericalHarmonicsComponent: 1,
      scaleOffsetBytes: 6,
      rotationOffsetBytes: 12,
      colorOffsetBytes: 20,
      sphericalHarmonicsOffsetBytes: 24,
      scaleRange: 32767
    }
  };
  const KSPLAT_SH_DEGREE_TO_COMPONENTS = {
    0: 0,
    1: 9,
    2: 24,
    3: 45
  };
  function decodeKsplat(fileBytes, initNumSplats, splatCallback, shCallback) {
    var _a2;
    const HEADER_BYTES = 4096;
    const SECTION_BYTES = 1024;
    let headerOffset = 0;
    const header = new DataView(fileBytes.buffer, headerOffset, HEADER_BYTES);
    headerOffset += HEADER_BYTES;
    const versionMajor = header.getUint8(0);
    const versionMinor = header.getUint8(1);
    if (versionMajor !== 0 || versionMinor < 1) {
      throw new Error(
        \`Unsupported .ksplat version: \${versionMajor}.\${versionMinor}\`
      );
    }
    const maxSectionCount = header.getUint32(4, true);
    header.getUint32(16, true);
    const compressionLevel = header.getUint16(20, true);
    if (compressionLevel < 0 || compressionLevel > 2) {
      throw new Error(\`Invalid .ksplat compression level: \${compressionLevel}\`);
    }
    const minSphericalHarmonicsCoeff = header.getFloat32(36, true) || -1.5;
    const maxSphericalHarmonicsCoeff = header.getFloat32(40, true) || 1.5;
    let sectionBase = HEADER_BYTES + maxSectionCount * SECTION_BYTES;
    for (let section = 0; section < maxSectionCount; ++section) {
      let getSh = function(splatOffset, component) {
        if (compressionLevel === 0) {
          return data.getFloat32(
            splatOffset + sphericalHarmonicsOffsetBytes + component * 4,
            true
          );
        }
        if (compressionLevel === 1) {
          return fromHalf(
            data.getUint16(
              splatOffset + sphericalHarmonicsOffsetBytes + component * 2,
              true
            )
          );
        }
        const t = data.getUint8(splatOffset + sphericalHarmonicsOffsetBytes + component) / 255;
        return minSphericalHarmonicsCoeff + t * (maxSphericalHarmonicsCoeff - minSphericalHarmonicsCoeff);
      };
      const section2 = new DataView(fileBytes.buffer, headerOffset, SECTION_BYTES);
      headerOffset += SECTION_BYTES;
      const sectionSplatCount = section2.getUint32(0, true);
      const sectionMaxSplatCount = section2.getUint32(4, true);
      const bucketSize = section2.getUint32(8, true);
      const bucketCount = section2.getUint32(12, true);
      const bucketBlockSize = section2.getFloat32(16, true);
      const bucketStorageSizeBytes = section2.getUint16(20, true);
      const compressionScaleRange = (section2.getUint32(24, true) || ((_a2 = KSPLAT_COMPRESSION[compressionLevel]) == null ? void 0 : _a2.scaleRange)) ?? 1;
      const fullBucketCount = section2.getUint32(32, true);
      const fullBucketSplats = fullBucketCount * bucketSize;
      const partiallyFilledBucketCount = section2.getUint32(36, true);
      const bucketsMetaDataSizeBytes = partiallyFilledBucketCount * 4;
      const bucketsStorageSizeBytes = bucketStorageSizeBytes * bucketCount + bucketsMetaDataSizeBytes;
      const sphericalHarmonicsDegree = section2.getUint16(40, true);
      const shComponents = KSPLAT_SH_DEGREE_TO_COMPONENTS[sphericalHarmonicsDegree];
      const {
        bytesPerCenter,
        bytesPerScale,
        bytesPerRotation,
        bytesPerColor,
        bytesPerSphericalHarmonicsComponent,
        scaleOffsetBytes,
        rotationOffsetBytes,
        colorOffsetBytes,
        sphericalHarmonicsOffsetBytes
      } = KSPLAT_COMPRESSION[compressionLevel];
      const bytesPerSplat = bytesPerCenter + bytesPerScale + bytesPerRotation + bytesPerColor + shComponents * bytesPerSphericalHarmonicsComponent;
      const splatDataStorageSizeBytes = bytesPerSplat * sectionMaxSplatCount;
      const storageSizeBytes = splatDataStorageSizeBytes + bucketsStorageSizeBytes;
      const sh1Index = [0, 3, 6, 1, 4, 7, 2, 5, 8];
      const sh2Index = [
        9,
        14,
        19,
        10,
        15,
        20,
        11,
        16,
        21,
        12,
        17,
        22,
        13,
        18,
        23
      ];
      const sh3Index = [
        24,
        31,
        38,
        25,
        32,
        39,
        26,
        33,
        40,
        27,
        34,
        41,
        28,
        35,
        42,
        29,
        36,
        43,
        30,
        37,
        44
      ];
      const sh1 = sphericalHarmonicsDegree >= 1 ? new Float32Array(3 * 3) : void 0;
      const sh2 = sphericalHarmonicsDegree >= 2 ? new Float32Array(5 * 3) : void 0;
      const sh3 = sphericalHarmonicsDegree >= 3 ? new Float32Array(7 * 3) : void 0;
      const compressionScaleFactor = bucketBlockSize / 2 / compressionScaleRange;
      const bucketsBase = sectionBase + bucketsMetaDataSizeBytes;
      const dataBase = sectionBase + bucketsStorageSizeBytes;
      const data = new DataView(
        fileBytes.buffer,
        dataBase,
        splatDataStorageSizeBytes
      );
      const bucketArray = new Float32Array(
        fileBytes.buffer,
        bucketsBase,
        bucketCount * 3
      );
      const partiallyFilledBucketLengths = new Uint32Array(
        fileBytes.buffer,
        sectionBase,
        partiallyFilledBucketCount
      );
      let partialBucketIndex = fullBucketCount;
      let partialBucketBase = fullBucketSplats;
      for (let i2 = 0; i2 < sectionSplatCount; ++i2) {
        const splatOffset = i2 * bytesPerSplat;
        let bucketIndex;
        if (i2 < fullBucketSplats) {
          bucketIndex = Math.floor(i2 / bucketSize);
        } else {
          const bucketLength = partiallyFilledBucketLengths[partialBucketIndex - fullBucketCount];
          if (i2 >= partialBucketBase + bucketLength) {
            partialBucketIndex += 1;
            partialBucketBase += bucketLength;
          }
          bucketIndex = partialBucketIndex;
        }
        const x2 = compressionLevel === 0 ? data.getFloat32(splatOffset + 0, true) : (data.getUint16(splatOffset + 0, true) - compressionScaleRange) * compressionScaleFactor + bucketArray[3 * bucketIndex + 0];
        const y = compressionLevel === 0 ? data.getFloat32(splatOffset + 4, true) : (data.getUint16(splatOffset + 2, true) - compressionScaleRange) * compressionScaleFactor + bucketArray[3 * bucketIndex + 1];
        const z = compressionLevel === 0 ? data.getFloat32(splatOffset + 8, true) : (data.getUint16(splatOffset + 4, true) - compressionScaleRange) * compressionScaleFactor + bucketArray[3 * bucketIndex + 2];
        const scaleX = compressionLevel === 0 ? data.getFloat32(splatOffset + scaleOffsetBytes + 0, true) : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 0, true));
        const scaleY = compressionLevel === 0 ? data.getFloat32(splatOffset + scaleOffsetBytes + 4, true) : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 2, true));
        const scaleZ = compressionLevel === 0 ? data.getFloat32(splatOffset + scaleOffsetBytes + 8, true) : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 4, true));
        const quatW = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 0, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 0, true)
        );
        const quatX = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 4, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 2, true)
        );
        const quatY = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 8, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 4, true)
        );
        const quatZ = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 12, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 6, true)
        );
        const r = data.getUint8(splatOffset + colorOffsetBytes + 0) / 255;
        const g = data.getUint8(splatOffset + colorOffsetBytes + 1) / 255;
        const b = data.getUint8(splatOffset + colorOffsetBytes + 2) / 255;
        const opacity = data.getUint8(splatOffset + colorOffsetBytes + 3) / 255;
        splatCallback(
          i2,
          x2,
          y,
          z,
          scaleX,
          scaleY,
          scaleZ,
          quatX,
          quatY,
          quatZ,
          quatW,
          opacity,
          r,
          g,
          b
        );
        if (sphericalHarmonicsDegree >= 1 && sh1) {
          for (const [i22, key] of sh1Index.entries()) {
            sh1[i22] = getSh(splatOffset, key);
          }
          if (sh2) {
            for (const [i22, key] of sh2Index.entries()) {
              sh2[i22] = getSh(splatOffset, key);
            }
          }
          if (sh3) {
            for (const [i22, key] of sh3Index.entries()) {
              sh3[i22] = getSh(splatOffset, key);
            }
          }
          shCallback == null ? void 0 : shCallback(i2, sh1, sh2, sh3);
        }
      }
      sectionBase += storageSizeBytes;
    }
  }
  function unpackKsplat(fileBytes, splatEncoding) {
    var _a2;
    const HEADER_BYTES = 4096;
    const SECTION_BYTES = 1024;
    let headerOffset = 0;
    const header = new DataView(fileBytes.buffer, headerOffset, HEADER_BYTES);
    headerOffset += HEADER_BYTES;
    const versionMajor = header.getUint8(0);
    const versionMinor = header.getUint8(1);
    if (versionMajor !== 0 || versionMinor < 1) {
      throw new Error(
        \`Unsupported .ksplat version: \${versionMajor}.\${versionMinor}\`
      );
    }
    const maxSectionCount = header.getUint32(4, true);
    const splatCount = header.getUint32(16, true);
    const compressionLevel = header.getUint16(20, true);
    if (compressionLevel < 0 || compressionLevel > 2) {
      throw new Error(\`Invalid .ksplat compression level: \${compressionLevel}\`);
    }
    const minSphericalHarmonicsCoeff = header.getFloat32(36, true) || -1.5;
    const maxSphericalHarmonicsCoeff = header.getFloat32(40, true) || 1.5;
    const numSplats = splatCount;
    const maxSplats = computeMaxSplats(numSplats);
    const packedArray = new Uint32Array(maxSplats * 4);
    const extra = {};
    let sectionBase = HEADER_BYTES + maxSectionCount * SECTION_BYTES;
    for (let section = 0; section < maxSectionCount; ++section) {
      let getSh = function(splatOffset, component) {
        if (compressionLevel === 0) {
          return data.getFloat32(
            splatOffset + sphericalHarmonicsOffsetBytes + component * 4,
            true
          );
        }
        if (compressionLevel === 1) {
          return fromHalf(
            data.getUint16(
              splatOffset + sphericalHarmonicsOffsetBytes + component * 2,
              true
            )
          );
        }
        const t = data.getUint8(splatOffset + sphericalHarmonicsOffsetBytes + component) / 255;
        return minSphericalHarmonicsCoeff + t * (maxSphericalHarmonicsCoeff - minSphericalHarmonicsCoeff);
      };
      const section2 = new DataView(fileBytes.buffer, headerOffset, SECTION_BYTES);
      headerOffset += SECTION_BYTES;
      const sectionSplatCount = section2.getUint32(0, true);
      const sectionMaxSplatCount = section2.getUint32(4, true);
      const bucketSize = section2.getUint32(8, true);
      const bucketCount = section2.getUint32(12, true);
      const bucketBlockSize = section2.getFloat32(16, true);
      const bucketStorageSizeBytes = section2.getUint16(20, true);
      const compressionScaleRange = (section2.getUint32(24, true) || ((_a2 = KSPLAT_COMPRESSION[compressionLevel]) == null ? void 0 : _a2.scaleRange)) ?? 1;
      const fullBucketCount = section2.getUint32(32, true);
      const fullBucketSplats = fullBucketCount * bucketSize;
      const partiallyFilledBucketCount = section2.getUint32(36, true);
      const bucketsMetaDataSizeBytes = partiallyFilledBucketCount * 4;
      const bucketsStorageSizeBytes = bucketStorageSizeBytes * bucketCount + bucketsMetaDataSizeBytes;
      const sphericalHarmonicsDegree = section2.getUint16(40, true);
      const shComponents = KSPLAT_SH_DEGREE_TO_COMPONENTS[sphericalHarmonicsDegree];
      const {
        bytesPerCenter,
        bytesPerScale,
        bytesPerRotation,
        bytesPerColor,
        bytesPerSphericalHarmonicsComponent,
        scaleOffsetBytes,
        rotationOffsetBytes,
        colorOffsetBytes,
        sphericalHarmonicsOffsetBytes
      } = KSPLAT_COMPRESSION[compressionLevel];
      const bytesPerSplat = bytesPerCenter + bytesPerScale + bytesPerRotation + bytesPerColor + shComponents * bytesPerSphericalHarmonicsComponent;
      const splatDataStorageSizeBytes = bytesPerSplat * sectionMaxSplatCount;
      const storageSizeBytes = splatDataStorageSizeBytes + bucketsStorageSizeBytes;
      const sh1Index = [0, 3, 6, 1, 4, 7, 2, 5, 8];
      const sh2Index = [
        9,
        14,
        19,
        10,
        15,
        20,
        11,
        16,
        21,
        12,
        17,
        22,
        13,
        18,
        23
      ];
      const sh3Index = [
        24,
        31,
        38,
        25,
        32,
        39,
        26,
        33,
        40,
        27,
        34,
        41,
        28,
        35,
        42,
        29,
        36,
        43,
        30,
        37,
        44
      ];
      const sh1 = sphericalHarmonicsDegree >= 1 ? new Float32Array(3 * 3) : void 0;
      const sh2 = sphericalHarmonicsDegree >= 2 ? new Float32Array(5 * 3) : void 0;
      const sh3 = sphericalHarmonicsDegree >= 3 ? new Float32Array(7 * 3) : void 0;
      const compressionScaleFactor = bucketBlockSize / 2 / compressionScaleRange;
      const bucketsBase = sectionBase + bucketsMetaDataSizeBytes;
      const dataBase = sectionBase + bucketsStorageSizeBytes;
      const data = new DataView(
        fileBytes.buffer,
        dataBase,
        splatDataStorageSizeBytes
      );
      const bucketArray = new Float32Array(
        fileBytes.buffer,
        bucketsBase,
        bucketCount * 3
      );
      const partiallyFilledBucketLengths = new Uint32Array(
        fileBytes.buffer,
        sectionBase,
        partiallyFilledBucketCount
      );
      let partialBucketIndex = fullBucketCount;
      let partialBucketBase = fullBucketSplats;
      for (let i2 = 0; i2 < sectionSplatCount; ++i2) {
        const splatOffset = i2 * bytesPerSplat;
        let bucketIndex;
        if (i2 < fullBucketSplats) {
          bucketIndex = Math.floor(i2 / bucketSize);
        } else {
          const bucketLength = partiallyFilledBucketLengths[partialBucketIndex - fullBucketCount];
          if (i2 >= partialBucketBase + bucketLength) {
            partialBucketIndex += 1;
            partialBucketBase += bucketLength;
          }
          bucketIndex = partialBucketIndex;
        }
        const x2 = compressionLevel === 0 ? data.getFloat32(splatOffset + 0, true) : (data.getUint16(splatOffset + 0, true) - compressionScaleRange) * compressionScaleFactor + bucketArray[3 * bucketIndex + 0];
        const y = compressionLevel === 0 ? data.getFloat32(splatOffset + 4, true) : (data.getUint16(splatOffset + 2, true) - compressionScaleRange) * compressionScaleFactor + bucketArray[3 * bucketIndex + 1];
        const z = compressionLevel === 0 ? data.getFloat32(splatOffset + 8, true) : (data.getUint16(splatOffset + 4, true) - compressionScaleRange) * compressionScaleFactor + bucketArray[3 * bucketIndex + 2];
        const scaleX = compressionLevel === 0 ? data.getFloat32(splatOffset + scaleOffsetBytes + 0, true) : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 0, true));
        const scaleY = compressionLevel === 0 ? data.getFloat32(splatOffset + scaleOffsetBytes + 4, true) : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 2, true));
        const scaleZ = compressionLevel === 0 ? data.getFloat32(splatOffset + scaleOffsetBytes + 8, true) : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 4, true));
        const quatW = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 0, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 0, true)
        );
        const quatX = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 4, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 2, true)
        );
        const quatY = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 8, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 4, true)
        );
        const quatZ = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 12, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 6, true)
        );
        const r = data.getUint8(splatOffset + colorOffsetBytes + 0) / 255;
        const g = data.getUint8(splatOffset + colorOffsetBytes + 1) / 255;
        const b = data.getUint8(splatOffset + colorOffsetBytes + 2) / 255;
        const opacity = data.getUint8(splatOffset + colorOffsetBytes + 3) / 255;
        setPackedSplat(
          packedArray,
          i2,
          x2,
          y,
          z,
          scaleX,
          scaleY,
          scaleZ,
          quatX,
          quatY,
          quatZ,
          quatW,
          opacity,
          r,
          g,
          b,
          splatEncoding
        );
        if (sphericalHarmonicsDegree >= 1) {
          if (sh1) {
            if (!extra.sh1) {
              extra.sh1 = new Uint32Array(numSplats * 2);
            }
            for (const [i22, key] of sh1Index.entries()) {
              sh1[i22] = getSh(splatOffset, key);
            }
            encodeSh1Rgb(extra.sh1, i2, sh1, splatEncoding);
          }
          if (sh2) {
            if (!extra.sh2) {
              extra.sh2 = new Uint32Array(numSplats * 4);
            }
            for (const [i22, key] of sh2Index.entries()) {
              sh2[i22] = getSh(splatOffset, key);
            }
            encodeSh2Rgb(extra.sh2, i2, sh2, splatEncoding);
          }
          if (sh3) {
            if (!extra.sh3) {
              extra.sh3 = new Uint32Array(numSplats * 4);
            }
            for (const [i22, key] of sh3Index.entries()) {
              sh3[i22] = getSh(splatOffset, key);
            }
            encodeSh3Rgb(extra.sh3, i2, sh3, splatEncoding);
          }
        }
      }
      sectionBase += storageSizeBytes;
    }
    return { packedArray, numSplats, extra };
  }
  const _PlyReader = class _PlyReader {
    // Create a PlyReader from a Uint8Array/ArrayBuffer, no parsing done yet
    constructor({ fileBytes }) {
      this.header = "";
      this.littleEndian = true;
      this.elements = {};
      this.comments = [];
      this.data = null;
      this.numSplats = 0;
      this.fileBytes = fileBytes instanceof ArrayBuffer ? new Uint8Array(fileBytes) : fileBytes;
    }
    // Identify and parse the PLY text header (assumed to be <64KB in size).
    // this.elements will contain all the elements in the file, typically
    // "vertex" contains the Gsplat data.
    async parseHeader() {
      const bufferStream = new ReadableStream({
        start: (controller) => {
          controller.enqueue(this.fileBytes.slice(0, 65536));
          controller.close();
        }
      });
      const decoder = bufferStream.pipeThrough(new TextDecoderStream()).getReader();
      this.header = "";
      const headerTerminator = "end_header\\n";
      while (true) {
        const { value, done } = await decoder.read();
        if (done) {
          throw new Error("Failed to read header");
        }
        this.header += value;
        const endHeader = this.header.indexOf(headerTerminator);
        if (endHeader >= 0) {
          this.header = this.header.slice(0, endHeader + headerTerminator.length);
          break;
        }
      }
      const headerLen = new TextEncoder().encode(this.header).length;
      this.data = new DataView(this.fileBytes.buffer, headerLen);
      this.elements = {};
      let curElement = null;
      this.comments = [];
      this.header.trim().split("\\n").forEach((line, lineIndex) => {
        const trimmedLine = line.trim();
        if (lineIndex === 0) {
          if (trimmedLine !== "ply") {
            throw new Error("Invalid PLY header");
          }
          return;
        }
        if (trimmedLine.length === 0) {
          return;
        }
        const fields = trimmedLine.split(" ");
        switch (fields[0]) {
          case "format":
            if (fields[1] === "binary_little_endian") {
              this.littleEndian = true;
            } else if (fields[1] === "binary_big_endian") {
              this.littleEndian = false;
            } else {
              throw new Error(\`Unsupported PLY format: \${fields[1]}\`);
            }
            if (fields[2] !== "1.0") {
              throw new Error(\`Unsupported PLY version: \${fields[2]}\`);
            }
            break;
          case "end_header":
            break;
          case "comment":
            this.comments.push(trimmedLine.slice("comment ".length));
            break;
          case "element": {
            const name = fields[1];
            curElement = {
              name,
              count: Number.parseInt(fields[2]),
              properties: {}
            };
            this.elements[name] = curElement;
            break;
          }
          case "property":
            if (curElement == null) {
              throw new Error("Property must be inside an element");
            }
            if (fields[1] === "list") {
              curElement.properties[fields[4]] = {
                isList: true,
                type: fields[3],
                countType: fields[2]
              };
            } else {
              curElement.properties[fields[2]] = {
                isList: false,
                type: fields[1]
              };
            }
            break;
        }
      });
      if (this.elements.vertex) {
        this.numSplats = this.elements.vertex.count;
      }
    }
    parseData(elementCallback) {
      let offset = 0;
      const data = this.data;
      if (data == null) {
        throw new Error("No data to parse");
      }
      for (const elementName in this.elements) {
        const element = this.elements[elementName];
        const { count, properties } = element;
        const item = {};
        const parsers = [];
        for (const [propertyName, property] of Object.entries(properties)) {
          if (!property.isList) {
            item[propertyName] = 0;
            parsers.push(() => {
              item[propertyName] = PARSE_FIELD[property.type](
                data,
                offset,
                this.littleEndian
              );
              offset += FIELD_BYTES[property.type];
            });
          } else {
            item[propertyName] = [];
            parsers.push(() => {
              const list = item[propertyName];
              list.length = PARSE_FIELD[property.countType](
                data,
                offset,
                this.littleEndian
              );
              offset += FIELD_BYTES[property.countType];
              for (let i2 = 0; i2 < list.length; i2++) {
                list[i2] = PARSE_FIELD[property.type](
                  data,
                  offset,
                  this.littleEndian
                );
                offset += FIELD_BYTES[property.type];
              }
            });
          }
        }
        const callback = elementCallback(element) ?? (() => {
        });
        for (let index = 0; index < count; index++) {
          for (const parser of parsers) {
            parser();
          }
          callback(index, item);
        }
      }
    }
    // Parse all the Gsplat data in the PLY file in go, invoking the given
    // callbacks for each Gsplat.
    parseSplats(splatCallback, shCallback) {
      if (this.elements.vertex == null) {
        throw new Error("No vertex element found");
      }
      let isSuperSplat = false;
      const ssChunks = [];
      let numSh = 0;
      let sh1Props = [];
      let sh2Props = [];
      let sh3Props = [];
      let sh1 = void 0;
      let sh2 = void 0;
      let sh3 = void 0;
      function prepareSh() {
        const num_f_rest = NUM_SH_TO_NUM_F_REST[numSh];
        sh1Props = new Array(3).fill(null).flatMap(
          (_, k) => [0, 1, 2].map((_2, d) => \`f_rest_\${k + d * num_f_rest / 3}\`)
        );
        sh2Props = new Array(5).fill(null).flatMap(
          (_, k) => [0, 1, 2].map((_2, d) => \`f_rest_\${3 + k + d * num_f_rest / 3}\`)
        );
        sh3Props = new Array(7).fill(null).flatMap(
          (_, k) => [0, 1, 2].map((_2, d) => \`f_rest_\${8 + k + d * num_f_rest / 3}\`)
        );
        sh1 = numSh >= 1 ? new Float32Array(3 * 3) : void 0;
        sh2 = numSh >= 2 ? new Float32Array(5 * 3) : void 0;
        sh3 = numSh >= 3 ? new Float32Array(7 * 3) : void 0;
      }
      function ssShCallback(index, item) {
        if (!sh1) {
          throw new Error("Missing sh1");
        }
        for (const [i2, key] of sh1Props.entries()) {
          sh1[i2] = item[key] * 8 / 255 - 4;
        }
        if (sh2) {
          for (const [i2, key] of sh2Props.entries()) {
            sh2[i2] = item[key] * 8 / 255 - 4;
          }
        }
        if (sh3) {
          for (const [i2, key] of sh3Props.entries()) {
            sh3[i2] = item[key] * 8 / 255 - 4;
          }
        }
        shCallback == null ? void 0 : shCallback(index, sh1, sh2, sh3);
      }
      function initSuperSplat(element) {
        const {
          min_x,
          min_y,
          min_z,
          max_x,
          max_y,
          max_z,
          min_scale_x,
          min_scale_y,
          min_scale_z,
          max_scale_x,
          max_scale_y,
          max_scale_z
        } = element.properties;
        if (!min_x || !min_y || !min_z || !max_x || !max_y || !max_z || !min_scale_x || !min_scale_y || !min_scale_z || !max_scale_x || !max_scale_y || !max_scale_z) {
          throw new Error("Missing PLY chunk properties");
        }
        isSuperSplat = true;
        return (index, item) => {
          const {
            min_x: min_x2,
            min_y: min_y2,
            min_z: min_z2,
            max_x: max_x2,
            max_y: max_y2,
            max_z: max_z2,
            min_scale_x: min_scale_x2,
            min_scale_y: min_scale_y2,
            min_scale_z: min_scale_z2,
            max_scale_x: max_scale_x2,
            max_scale_y: max_scale_y2,
            max_scale_z: max_scale_z2,
            min_r,
            min_g,
            min_b,
            max_r,
            max_g,
            max_b
          } = item;
          ssChunks.push({
            min_x: min_x2,
            min_y: min_y2,
            min_z: min_z2,
            max_x: max_x2,
            max_y: max_y2,
            max_z: max_z2,
            min_scale_x: min_scale_x2,
            min_scale_y: min_scale_y2,
            min_scale_z: min_scale_z2,
            max_scale_x: max_scale_x2,
            max_scale_y: max_scale_y2,
            max_scale_z: max_scale_z2,
            min_r,
            min_g,
            min_b,
            max_r,
            max_g,
            max_b
          });
        };
      }
      function decodeSuperSplat(element) {
        if (shCallback && element.name === "sh") {
          numSh = getNumSh(element.properties);
          prepareSh();
          return ssShCallback;
        }
        if (element.name !== "vertex") {
          return null;
        }
        const { packed_position, packed_rotation, packed_scale, packed_color } = element.properties;
        if (!packed_position || !packed_rotation || !packed_scale || !packed_color) {
          throw new Error(
            "Missing PLY properties: packed_position, packed_rotation, packed_scale, packed_color"
          );
        }
        const SQRT2 = Math.sqrt(2);
        return (index, item) => {
          const chunk = ssChunks[index >>> 8];
          if (chunk == null) {
            throw new Error("Missing PLY chunk");
          }
          const {
            min_x,
            min_y,
            min_z,
            max_x,
            max_y,
            max_z,
            min_scale_x,
            min_scale_y,
            min_scale_z,
            max_scale_x,
            max_scale_y,
            max_scale_z,
            min_r,
            min_g,
            min_b,
            max_r,
            max_g,
            max_b
          } = chunk;
          const { packed_position: packed_position2, packed_rotation: packed_rotation2, packed_scale: packed_scale2, packed_color: packed_color2 } = item;
          const x2 = (packed_position2 >>> 21 & 2047) / 2047 * (max_x - min_x) + min_x;
          const y = (packed_position2 >>> 11 & 1023) / 1023 * (max_y - min_y) + min_y;
          const z = (packed_position2 & 2047) / 2047 * (max_z - min_z) + min_z;
          const r0 = ((packed_rotation2 >>> 20 & 1023) / 1023 - 0.5) * SQRT2;
          const r1 = ((packed_rotation2 >>> 10 & 1023) / 1023 - 0.5) * SQRT2;
          const r2 = ((packed_rotation2 & 1023) / 1023 - 0.5) * SQRT2;
          const rr = Math.sqrt(Math.max(0, 1 - r0 * r0 - r1 * r1 - r2 * r2));
          const rOrder = packed_rotation2 >>> 30;
          const quatX = rOrder === 0 ? r0 : rOrder === 1 ? rr : r1;
          const quatY = rOrder <= 1 ? r1 : rOrder === 2 ? rr : r2;
          const quatZ = rOrder <= 2 ? r2 : rr;
          const quatW = rOrder === 0 ? rr : r0;
          const scaleX = Math.exp(
            (packed_scale2 >>> 21 & 2047) / 2047 * (max_scale_x - min_scale_x) + min_scale_x
          );
          const scaleY = Math.exp(
            (packed_scale2 >>> 11 & 1023) / 1023 * (max_scale_y - min_scale_y) + min_scale_y
          );
          const scaleZ = Math.exp(
            (packed_scale2 & 2047) / 2047 * (max_scale_z - min_scale_z) + min_scale_z
          );
          const r = (packed_color2 >>> 24 & 255) / 255 * ((max_r ?? 1) - (min_r ?? 0)) + (min_r ?? 0);
          const g = (packed_color2 >>> 16 & 255) / 255 * ((max_g ?? 1) - (min_g ?? 0)) + (min_g ?? 0);
          const b = (packed_color2 >>> 8 & 255) / 255 * ((max_b ?? 1) - (min_b ?? 0)) + (min_b ?? 0);
          const opacity = (packed_color2 & 255) / 255;
          splatCallback(
            index,
            x2,
            y,
            z,
            scaleX,
            scaleY,
            scaleZ,
            quatX,
            quatY,
            quatZ,
            quatW,
            opacity,
            r,
            g,
            b
          );
        };
      }
      const elementCallback = (element) => {
        if (element.name === "chunk") {
          return initSuperSplat(element);
        }
        if (isSuperSplat) {
          return decodeSuperSplat(element);
        }
        if (element.name !== "vertex") {
          return null;
        }
        const {
          x: x2,
          y,
          z,
          scale_0,
          scale_1,
          scale_2,
          rot_0,
          rot_1,
          rot_2,
          rot_3,
          opacity,
          f_dc_0,
          f_dc_1,
          f_dc_2,
          red,
          green,
          blue,
          alpha
        } = element.properties;
        if (!x2 || !y || !z) {
          throw new Error("Missing PLY properties: x, y, z");
        }
        const hasScales = scale_0 && scale_1 && scale_2;
        const hasRots = rot_0 && rot_1 && rot_2 && rot_3;
        const alphaDiv = alpha != null ? FIELD_SCALE[alpha.type] : 1;
        const redDiv = red != null ? FIELD_SCALE[red.type] : 1;
        const greenDiv = green != null ? FIELD_SCALE[green.type] : 1;
        const blueDiv = blue != null ? FIELD_SCALE[blue.type] : 1;
        numSh = getNumSh(element.properties);
        prepareSh();
        return (index, item) => {
          const scaleX = hasScales ? Math.exp(item.scale_0) : _PlyReader.defaultPointScale;
          const scaleY = hasScales ? Math.exp(item.scale_1) : _PlyReader.defaultPointScale;
          const scaleZ = hasScales ? Math.exp(item.scale_2) : _PlyReader.defaultPointScale;
          const quatX = hasRots ? item.rot_1 : 0;
          const quatY = hasRots ? item.rot_2 : 0;
          const quatZ = hasRots ? item.rot_3 : 0;
          const quatW = hasRots ? item.rot_0 : 1;
          const op = opacity != null ? 1 / (1 + Math.exp(-item.opacity)) : alpha != null ? item.alpha / alphaDiv : 1;
          const r = f_dc_0 != null ? item.f_dc_0 * SH_C0$1 + 0.5 : red != null ? item.red / redDiv : 1;
          const g = f_dc_1 != null ? item.f_dc_1 * SH_C0$1 + 0.5 : green != null ? item.green / greenDiv : 1;
          const b = f_dc_2 != null ? item.f_dc_2 * SH_C0$1 + 0.5 : blue != null ? item.blue / blueDiv : 1;
          splatCallback(
            index,
            item.x,
            item.y,
            item.z,
            scaleX,
            scaleY,
            scaleZ,
            quatX,
            quatY,
            quatZ,
            quatW,
            op,
            r,
            g,
            b
          );
          if (shCallback && sh1) {
            if (sh1) {
              for (const [i2, key] of sh1Props.entries()) {
                sh1[i2] = item[key];
              }
            }
            if (sh2) {
              for (const [i2, key] of sh2Props.entries()) {
                sh2[i2] = item[key];
              }
            }
            if (sh3) {
              for (const [i2, key] of sh3Props.entries()) {
                sh3[i2] = item[key];
              }
            }
            shCallback(index, sh1, sh2, sh3);
          }
        };
      };
      this.parseData(elementCallback);
    }
    // Inject RGBA values into original PLY file, which can be used to modify
    // the color/opacity of the Gsplats and write out the modified PLY file.
    injectRgba(rgba) {
      let offset = 0;
      const data = this.data;
      if (data == null) {
        throw new Error("No parsed data");
      }
      if (rgba.length !== this.numSplats * 4) {
        throw new Error("Invalid RGBA array length");
      }
      for (const elementName in this.elements) {
        const element = this.elements[elementName];
        const { count, properties } = element;
        const parsers = [];
        let rgbaOffset = 0;
        const isVertex = elementName === "vertex";
        if (isVertex) {
          for (const name of ["opacity", "f_dc_0", "f_dc_1", "f_dc_2"]) {
            if (!properties[name] || properties[name].type !== "float") {
              throw new Error(\`Can't injectRgba due to property: \${name}\`);
            }
          }
        }
        for (const [propertyName, property] of Object.entries(properties)) {
          if (!property.isList) {
            if (isVertex) {
              if (propertyName === "f_dc_0" || propertyName === "f_dc_1" || propertyName === "f_dc_2") {
                const component = Number.parseInt(
                  propertyName.slice("f_dc_".length)
                );
                parsers.push(() => {
                  const value = (rgba[rgbaOffset + component] / 255 - 0.5) / SH_C0$1;
                  SET_FIELD[property.type](
                    data,
                    offset,
                    this.littleEndian,
                    value
                  );
                });
              } else if (propertyName === "opacity") {
                parsers.push(() => {
                  const value = Math.max(
                    -100,
                    Math.min(
                      100,
                      -Math.log(1 / (rgba[rgbaOffset + 3] / 255) - 1)
                    )
                  );
                  SET_FIELD[property.type](
                    data,
                    offset,
                    this.littleEndian,
                    value
                  );
                });
              }
            }
            parsers.push(() => {
              offset += FIELD_BYTES[property.type];
            });
          } else {
            parsers.push(() => {
              const length = PARSE_FIELD[property.countType](
                data,
                offset,
                this.littleEndian
              );
              offset += FIELD_BYTES[property.countType];
              offset += length * FIELD_BYTES[property.type];
            });
          }
        }
        for (let index = 0; index < count; index++) {
          for (const parser of parsers) {
            parser();
          }
          if (isVertex) {
            rgbaOffset += 4;
          }
        }
      }
    }
  };
  _PlyReader.defaultPointScale = 1e-3;
  let PlyReader = _PlyReader;
  const SH_C0$1 = 0.28209479177387814;
  const PARSE_FIELD = {
    char: (data, offset, littleEndian) => {
      return data.getInt8(offset);
    },
    uchar: (data, offset, littleEndian) => {
      return data.getUint8(offset);
    },
    short: (data, offset, littleEndian) => {
      return data.getInt16(offset, littleEndian);
    },
    ushort: (data, offset, littleEndian) => {
      return data.getUint16(offset, littleEndian);
    },
    int: (data, offset, littleEndian) => {
      return data.getInt32(offset, littleEndian);
    },
    uint: (data, offset, littleEndian) => {
      return data.getUint32(offset, littleEndian);
    },
    float: (data, offset, littleEndian) => {
      return data.getFloat32(offset, littleEndian);
    },
    double: (data, offset, littleEndian) => {
      return data.getFloat64(offset, littleEndian);
    }
  };
  const SET_FIELD = {
    char: (data, offset, littleEndian, value) => {
      data.setInt8(offset, value);
    },
    uchar: (data, offset, littleEndian, value) => {
      data.setUint8(offset, value);
    },
    short: (data, offset, littleEndian, value) => {
      data.setInt16(offset, value, littleEndian);
    },
    ushort: (data, offset, littleEndian, value) => {
      data.setUint16(offset, value, littleEndian);
    },
    int: (data, offset, littleEndian, value) => {
      data.setInt32(offset, value, littleEndian);
    },
    uint: (data, offset, littleEndian, value) => {
      data.setUint32(offset, value, littleEndian);
    },
    float: (data, offset, littleEndian, value) => {
      data.setFloat32(offset, value, littleEndian);
    },
    double: (data, offset, littleEndian, value) => {
      data.setFloat64(offset, value, littleEndian);
    }
  };
  const FIELD_BYTES = {
    char: 1,
    uchar: 1,
    short: 2,
    ushort: 2,
    int: 4,
    uint: 4,
    float: 4,
    double: 8
  };
  const FIELD_SCALE = {
    char: 127,
    uchar: 255,
    short: 32767,
    ushort: 65535,
    int: 2147483647,
    uint: 4294967295,
    float: 1,
    double: 1
  };
  const NUM_F_REST_TO_NUM_SH = {
    0: 0,
    9: 1,
    24: 2,
    45: 3
  };
  const NUM_SH_TO_NUM_F_REST = {
    0: 0,
    1: 9,
    2: 24,
    3: 45
  };
  function getNumSh(properties) {
    let num_f_rest = 0;
    while (properties[\`f_rest_\${num_f_rest}\`]) {
      num_f_rest += 1;
    }
    const numSh = NUM_F_REST_TO_NUM_SH[num_f_rest];
    if (numSh == null) {
      throw new Error(\`Unsupported number of SH coefficients: \${num_f_rest}\`);
    }
    return numSh;
  }
  var SplatFileType = /* @__PURE__ */ ((SplatFileType2) => {
    SplatFileType2["PLY"] = "ply";
    SplatFileType2["SPZ"] = "spz";
    SplatFileType2["SPLAT"] = "splat";
    SplatFileType2["KSPLAT"] = "ksplat";
    SplatFileType2["PCSOGS"] = "pcsogs";
    SplatFileType2["PCSOGSZIP"] = "pcsogszip";
    return SplatFileType2;
  })(SplatFileType || {});
  function getSplatFileType(fileBytes) {
    const view = new DataView(fileBytes.buffer);
    if ((view.getUint32(0, true) & 16777215) === 7957616) {
      return "ply";
    }
    if ((view.getUint32(0, true) & 16777215) === 559903) {
      const header = decompressPartialGzip(fileBytes, 4);
      const gView = new DataView(header.buffer);
      if (gView.getUint32(0, true) === 1347635022) {
        return "spz";
      }
      return void 0;
    }
    if (view.getUint32(0, true) === 67324752) {
      if (tryPcSogsZip(fileBytes)) {
        return "pcsogszip";
      }
      return void 0;
    }
    return void 0;
  }
  function getFileExtension(pathOrUrl) {
    const noTrailing = pathOrUrl.split(/[?#]/, 1)[0];
    const lastSlash = Math.max(
      noTrailing.lastIndexOf("/"),
      noTrailing.lastIndexOf("\\\\")
    );
    const filename = noTrailing.slice(lastSlash + 1);
    const lastDot = filename.lastIndexOf(".");
    if (lastDot <= 0 || lastDot === filename.length - 1) {
      return "";
    }
    return filename.slice(lastDot + 1).toLowerCase();
  }
  function getSplatFileTypeFromPath(pathOrUrl) {
    const extension = getFileExtension(pathOrUrl);
    if (extension === "ply") {
      return "ply";
    }
    if (extension === "spz") {
      return "spz";
    }
    if (extension === "splat") {
      return "splat";
    }
    if (extension === "ksplat") {
      return "ksplat";
    }
    return void 0;
  }
  function tryPcSogs(input) {
    try {
      let text;
      if (typeof input === "string") {
        text = input;
      } else {
        const fileBytes = input instanceof ArrayBuffer ? new Uint8Array(input) : input;
        if (fileBytes.length > 65536) {
          return void 0;
        }
        text = new TextDecoder().decode(fileBytes);
      }
      const json = JSON.parse(text);
      if (!json || typeof json !== "object" || Array.isArray(json)) {
        return void 0;
      }
      for (const key of ["means", "scales", "quats", "sh0"]) {
        if (!json[key] || typeof json[key] !== "object" || Array.isArray(json[key])) {
          return void 0;
        }
        if (!json[key].shape || !json[key].files) {
          return void 0;
        }
        if (key !== "quats" && (!json[key].mins || !json[key].maxs)) {
          return void 0;
        }
      }
      return json;
    } catch {
      return void 0;
    }
  }
  function tryPcSogsZip(input) {
    try {
      const fileBytes = input instanceof ArrayBuffer ? new Uint8Array(input) : input;
      let metaFilename = null;
      const unzipped = unzipSync(fileBytes, {
        filter: ({ name }) => {
          const filename = name.split(/[\\\\/]/).pop();
          if (filename === "meta.json") {
            metaFilename = name;
            return true;
          }
          return false;
        }
      });
      if (!metaFilename) {
        return void 0;
      }
      const json = tryPcSogs(unzipped[metaFilename]);
      if (!json) {
        return void 0;
      }
      return { name: metaFilename, json };
    } catch {
      return void 0;
    }
  }
  class SplatData {
    constructor({ maxSplats = 1 } = {}) {
      this.numSplats = 0;
      this.maxSplats = getTextureSize(maxSplats).maxSplats;
      this.centers = new Float32Array(this.maxSplats * 3);
      this.scales = new Float32Array(this.maxSplats * 3);
      this.quaternions = new Float32Array(this.maxSplats * 4);
      this.opacities = new Float32Array(this.maxSplats);
      this.colors = new Float32Array(this.maxSplats * 3);
    }
    pushSplat() {
      const index = this.numSplats;
      this.ensureIndex(index);
      this.numSplats += 1;
      return index;
    }
    unpushSplat(index) {
      if (index === this.numSplats - 1) {
        this.numSplats -= 1;
      } else {
        throw new Error("Cannot unpush splat from non-last position");
      }
    }
    ensureCapacity(numSplats) {
      if (numSplats > this.maxSplats) {
        const targetSplats = Math.max(numSplats, this.maxSplats * 2);
        const newCenters = new Float32Array(targetSplats * 3);
        const newScales = new Float32Array(targetSplats * 3);
        const newQuaternions = new Float32Array(targetSplats * 4);
        const newOpacities = new Float32Array(targetSplats);
        const newColors = new Float32Array(targetSplats * 3);
        newCenters.set(this.centers);
        newScales.set(this.scales);
        newQuaternions.set(this.quaternions);
        newOpacities.set(this.opacities);
        newColors.set(this.colors);
        this.centers = newCenters;
        this.scales = newScales;
        this.quaternions = newQuaternions;
        this.opacities = newOpacities;
        this.colors = newColors;
        if (this.sh1) {
          const newSh1 = new Float32Array(targetSplats * 9);
          newSh1.set(this.sh1);
          this.sh1 = newSh1;
        }
        if (this.sh2) {
          const newSh2 = new Float32Array(targetSplats * 15);
          newSh2.set(this.sh2);
          this.sh2 = newSh2;
        }
        if (this.sh3) {
          const newSh3 = new Float32Array(targetSplats * 21);
          newSh3.set(this.sh3);
          this.sh3 = newSh3;
        }
        this.maxSplats = targetSplats;
      }
    }
    ensureIndex(index) {
      this.ensureCapacity(index + 1);
    }
    setCenter(index, x2, y, z) {
      this.centers[index * 3] = x2;
      this.centers[index * 3 + 1] = y;
      this.centers[index * 3 + 2] = z;
    }
    setScale(index, scaleX, scaleY, scaleZ) {
      this.scales[index * 3] = scaleX;
      this.scales[index * 3 + 1] = scaleY;
      this.scales[index * 3 + 2] = scaleZ;
    }
    setQuaternion(index, x2, y, z, w) {
      this.quaternions[index * 4] = x2;
      this.quaternions[index * 4 + 1] = y;
      this.quaternions[index * 4 + 2] = z;
      this.quaternions[index * 4 + 3] = w;
    }
    setOpacity(index, opacity) {
      this.opacities[index] = opacity;
    }
    setColor(index, r, g, b) {
      this.colors[index * 3] = r;
      this.colors[index * 3 + 1] = g;
      this.colors[index * 3 + 2] = b;
    }
    setSh1(index, sh1) {
      if (!this.sh1) {
        this.sh1 = new Float32Array(this.maxSplats * 9);
      }
      for (let j = 0; j < 9; ++j) {
        this.sh1[index * 9 + j] = sh1[j];
      }
    }
    setSh2(index, sh2) {
      if (!this.sh2) {
        this.sh2 = new Float32Array(this.maxSplats * 15);
      }
      for (let j = 0; j < 15; ++j) {
        this.sh2[index * 15 + j] = sh2[j];
      }
    }
    setSh3(index, sh3) {
      if (!this.sh3) {
        this.sh3 = new Float32Array(this.maxSplats * 21);
      }
      for (let j = 0; j < 21; ++j) {
        this.sh3[index * 21 + j] = sh3[j];
      }
    }
  }
  async function unpackPcSogs(json, extraFiles, splatEncoding) {
    if (json.quats.encoding !== "quaternion_packed") {
      throw new Error("Unsupported quaternion encoding");
    }
    const numSplats = json.means.shape[0];
    const maxSplats = computeMaxSplats(numSplats);
    const packedArray = new Uint32Array(maxSplats * 4);
    const extra = {};
    const meansPromise = Promise.all([
      decodeImageRgba(extraFiles[json.means.files[0]]),
      decodeImageRgba(extraFiles[json.means.files[1]])
    ]).then((means) => {
      for (let i2 = 0; i2 < numSplats; ++i2) {
        const i4 = i2 * 4;
        const fx = (means[0][i4 + 0] + (means[1][i4 + 0] << 8)) / 65535;
        const fy = (means[0][i4 + 1] + (means[1][i4 + 1] << 8)) / 65535;
        const fz = (means[0][i4 + 2] + (means[1][i4 + 2] << 8)) / 65535;
        let x2 = json.means.mins[0] + (json.means.maxs[0] - json.means.mins[0]) * fx;
        let y = json.means.mins[1] + (json.means.maxs[1] - json.means.mins[1]) * fy;
        let z = json.means.mins[2] + (json.means.maxs[2] - json.means.mins[2]) * fz;
        x2 = Math.sign(x2) * (Math.exp(Math.abs(x2)) - 1);
        y = Math.sign(y) * (Math.exp(Math.abs(y)) - 1);
        z = Math.sign(z) * (Math.exp(Math.abs(z)) - 1);
        setPackedSplatCenter(packedArray, i2, x2, y, z);
      }
    });
    const scalesPromise = decodeImageRgba(extraFiles[json.scales.files[0]]).then(
      (scales) => {
        for (let i2 = 0; i2 < numSplats; ++i2) {
          const i4 = i2 * 4;
          const fx = scales[i4 + 0] / 255;
          const fy = scales[i4 + 1] / 255;
          const fz = scales[i4 + 2] / 255;
          const x2 = json.scales.mins[0] + (json.scales.maxs[0] - json.scales.mins[0]) * fx;
          const y = json.scales.mins[1] + (json.scales.maxs[1] - json.scales.mins[1]) * fy;
          const z = json.scales.mins[2] + (json.scales.maxs[2] - json.scales.mins[2]) * fz;
          setPackedSplatScales(
            packedArray,
            i2,
            Math.exp(x2),
            Math.exp(y),
            Math.exp(z),
            splatEncoding
          );
        }
      }
    );
    const quatsPromise = decodeImageRgba(extraFiles[json.quats.files[0]]).then(
      (quats) => {
        const SQRT2 = Math.sqrt(2);
        for (let i2 = 0; i2 < numSplats; ++i2) {
          const i4 = i2 * 4;
          const r0 = (quats[i4 + 0] / 255 - 0.5) * SQRT2;
          const r1 = (quats[i4 + 1] / 255 - 0.5) * SQRT2;
          const r2 = (quats[i4 + 2] / 255 - 0.5) * SQRT2;
          const rr = Math.sqrt(Math.max(0, 1 - r0 * r0 - r1 * r1 - r2 * r2));
          const rOrder = quats[i4 + 3] - 252;
          const quatX = rOrder === 0 ? r0 : rOrder === 1 ? rr : r1;
          const quatY = rOrder <= 1 ? r1 : rOrder === 2 ? rr : r2;
          const quatZ = rOrder <= 2 ? r2 : rr;
          const quatW = rOrder === 0 ? rr : r0;
          setPackedSplatQuat(packedArray, i2, quatX, quatY, quatZ, quatW);
        }
      }
    );
    const sh0Promise = decodeImageRgba(extraFiles[json.sh0.files[0]]).then(
      (sh0) => {
        const SH_C02 = 0.28209479177387814;
        for (let i2 = 0; i2 < numSplats; ++i2) {
          const i4 = i2 * 4;
          const f0 = sh0[i4 + 0] / 255;
          const f1 = sh0[i4 + 1] / 255;
          const f2 = sh0[i4 + 2] / 255;
          const f3 = sh0[i4 + 3] / 255;
          const dc0 = json.sh0.mins[0] + (json.sh0.maxs[0] - json.sh0.mins[0]) * f0;
          const dc1 = json.sh0.mins[1] + (json.sh0.maxs[1] - json.sh0.mins[1]) * f1;
          const dc2 = json.sh0.mins[2] + (json.sh0.maxs[2] - json.sh0.mins[2]) * f2;
          const opa = json.sh0.mins[3] + (json.sh0.maxs[3] - json.sh0.mins[3]) * f3;
          const r = SH_C02 * dc0 + 0.5;
          const g = SH_C02 * dc1 + 0.5;
          const b = SH_C02 * dc2 + 0.5;
          const a = 1 / (1 + Math.exp(-opa));
          setPackedSplatRgba(packedArray, i2, r, g, b, a, splatEncoding);
        }
      }
    );
    const promises = [meansPromise, scalesPromise, quatsPromise, sh0Promise];
    if (json.shN) {
      const useSH3 = json.shN.shape[1] >= 48 - 3;
      const useSH2 = json.shN.shape[1] >= 27 - 3;
      const useSH1 = json.shN.shape[1] >= 12 - 3;
      if (useSH1) extra.sh1 = new Uint32Array(numSplats * 2);
      if (useSH2) extra.sh2 = new Uint32Array(numSplats * 4);
      if (useSH3) extra.sh3 = new Uint32Array(numSplats * 4);
      const sh1 = new Float32Array(9);
      const sh2 = new Float32Array(15);
      const sh3 = new Float32Array(21);
      const shN = json.shN;
      const shNPromise = Promise.all([
        decodeImage(extraFiles[json.shN.files[0]]),
        decodeImage(extraFiles[json.shN.files[1]])
      ]).then(([centroids, labels]) => {
        for (let i2 = 0; i2 < numSplats; ++i2) {
          const i4 = i2 * 4;
          const label = labels.rgba[i4 + 0] + (labels.rgba[i4 + 1] << 8);
          const col = (label & 63) * 15;
          const row = label >>> 6;
          const offset = row * centroids.width + col;
          for (let d = 0; d < 3; ++d) {
            if (useSH1) {
              for (let k = 0; k < 3; ++k) {
                sh1[k * 3 + d] = shN.mins + (shN.maxs - shN.mins) * centroids.rgba[(offset + k) * 4 + d] / 255;
              }
            }
            if (useSH2) {
              for (let k = 0; k < 5; ++k) {
                sh2[k * 3 + d] = shN.mins + (shN.maxs - shN.mins) * centroids.rgba[(offset + 3 + k) * 4 + d] / 255;
              }
            }
            if (useSH3) {
              for (let k = 0; k < 7; ++k) {
                sh3[k * 3 + d] = shN.mins + (shN.maxs - shN.mins) * centroids.rgba[(offset + 8 + k) * 4 + d] / 255;
              }
            }
          }
          if (useSH1)
            encodeSh1Rgb(extra.sh1, i2, sh1, splatEncoding);
          if (useSH2)
            encodeSh2Rgb(extra.sh2, i2, sh2, splatEncoding);
          if (useSH3)
            encodeSh3Rgb(extra.sh3, i2, sh3, splatEncoding);
        }
      });
      promises.push(shNPromise);
    }
    await Promise.all(promises);
    return { packedArray, numSplats, extra };
  }
  let offscreenGlContext = null;
  async function decodeImage(fileBytes) {
    if (!offscreenGlContext) {
      const canvas = new OffscreenCanvas(1, 1);
      offscreenGlContext = canvas.getContext("webgl2");
      if (!offscreenGlContext) {
        throw new Error("Failed to create WebGL2 context");
      }
    }
    const imageBlob = new Blob([fileBytes]);
    const bitmap = await createImageBitmap(imageBlob, {
      premultiplyAlpha: "none"
    });
    const gl = offscreenGlContext;
    const texture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, texture);
    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, bitmap);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    const framebuffer = gl.createFramebuffer();
    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
    gl.framebufferTexture2D(
      gl.FRAMEBUFFER,
      gl.COLOR_ATTACHMENT0,
      gl.TEXTURE_2D,
      texture,
      0
    );
    const data = new Uint8Array(bitmap.width * bitmap.height * 4);
    gl.readPixels(
      0,
      0,
      bitmap.width,
      bitmap.height,
      gl.RGBA,
      gl.UNSIGNED_BYTE,
      data
    );
    gl.deleteTexture(texture);
    gl.deleteFramebuffer(framebuffer);
    return { rgba: data, width: bitmap.width, height: bitmap.height };
  }
  async function decodeImageRgba(fileBytes) {
    const { rgba } = await decodeImage(fileBytes);
    return rgba;
  }
  async function unpackPcSogsZip(fileBytes, splatEncoding) {
    var _a2;
    const nameJson = tryPcSogsZip(fileBytes);
    if (!nameJson) {
      throw new Error("Invalid PC SOGS zip file");
    }
    const { name, json } = nameJson;
    const lastSlash = name.lastIndexOf("/");
    const lastBackslash = name.lastIndexOf("\\\\");
    const prefix = name.slice(0, Math.max(lastSlash, lastBackslash) + 1);
    const fileMap = /* @__PURE__ */ new Map();
    const refFiles = [
      ...json.means.files,
      ...json.scales.files,
      ...json.quats.files,
      ...json.sh0.files,
      ...((_a2 = json.shN) == null ? void 0 : _a2.files) ?? []
    ];
    for (const file of refFiles) {
      fileMap.set(prefix + file, file);
    }
    const unzipped = await new Promise(
      (resolve, reject) => {
        unzip(
          fileBytes,
          {
            filter: ({ name: name2 }) => {
              return fileMap.has(name2);
            }
          },
          (err2, files) => {
            if (err2) {
              reject(err2);
            } else {
              resolve(files);
            }
          }
        );
      }
    );
    const extraFiles = {};
    for (const [full, name2] of fileMap.entries()) {
      extraFiles[name2] = unzipped[full];
    }
    return await unpackPcSogs(json, extraFiles, splatEncoding);
  }
  class SpzReader {
    constructor({ fileBytes }) {
      this.fileBytes = fileBytes instanceof ArrayBuffer ? new Uint8Array(fileBytes) : fileBytes;
      this.reader = new GunzipReader({ fileBytes: this.fileBytes });
      const header = new DataView(this.reader.read(16).buffer);
      if (header.getUint32(0, true) !== 1347635022) {
        throw new Error("Invalid SPZ file");
      }
      this.version = header.getUint32(4, true);
      if (this.version < 1 || this.version > 2) {
        throw new Error(\`Unsupported SPZ version: \${this.version}\`);
      }
      this.numSplats = header.getUint32(8, true);
      this.shDegree = header.getUint8(12);
      this.fractionalBits = header.getUint8(13);
      this.flags = header.getUint8(14);
      this.flagAntiAlias = (this.flags & 1) !== 0;
      this.reserved = header.getUint8(15);
      this.parsed = false;
    }
    parseSplats(centerCallback, alphaCallback, rgbCallback, scalesCallback, quatCallback, shCallback) {
      if (this.parsed) {
        throw new Error("SPZ file already parsed");
      }
      this.parsed = true;
      if (this.version === 1) {
        const centerBytes = this.reader.read(this.numSplats * 3 * 2);
        const centerUint16 = new Uint16Array(centerBytes.buffer);
        for (let i2 = 0; i2 < this.numSplats; i2++) {
          const i3 = i2 * 3;
          const x2 = fromHalf(centerUint16[i3]);
          const y = fromHalf(centerUint16[i3 + 1]);
          const z = fromHalf(centerUint16[i3 + 2]);
          centerCallback == null ? void 0 : centerCallback(i2, x2, y, z);
        }
      } else if (this.version === 2) {
        const fixed = 1 << this.fractionalBits;
        const centerBytes = this.reader.read(this.numSplats * 3 * 3);
        for (let i2 = 0; i2 < this.numSplats; i2++) {
          const i9 = i2 * 9;
          const x2 = ((centerBytes[i9 + 2] << 24 | centerBytes[i9 + 1] << 16 | centerBytes[i9] << 8) >> 8) / fixed;
          const y = ((centerBytes[i9 + 5] << 24 | centerBytes[i9 + 4] << 16 | centerBytes[i9 + 3] << 8) >> 8) / fixed;
          const z = ((centerBytes[i9 + 8] << 24 | centerBytes[i9 + 7] << 16 | centerBytes[i9 + 6] << 8) >> 8) / fixed;
          centerCallback == null ? void 0 : centerCallback(i2, x2, y, z);
        }
      } else {
        throw new Error("Unreachable");
      }
      {
        const bytes = this.reader.read(this.numSplats);
        for (let i2 = 0; i2 < this.numSplats; i2++) {
          alphaCallback == null ? void 0 : alphaCallback(i2, bytes[i2] / 255);
        }
      }
      {
        const rgbBytes = this.reader.read(this.numSplats * 3);
        const scale = SH_C0 / 0.15;
        for (let i2 = 0; i2 < this.numSplats; i2++) {
          const i3 = i2 * 3;
          const r = (rgbBytes[i3] / 255 - 0.5) * scale + 0.5;
          const g = (rgbBytes[i3 + 1] / 255 - 0.5) * scale + 0.5;
          const b = (rgbBytes[i3 + 2] / 255 - 0.5) * scale + 0.5;
          rgbCallback == null ? void 0 : rgbCallback(i2, r, g, b);
        }
      }
      {
        const scalesBytes = this.reader.read(this.numSplats * 3);
        for (let i2 = 0; i2 < this.numSplats; i2++) {
          const i3 = i2 * 3;
          const scaleX = Math.exp(scalesBytes[i3] / 16 - 10);
          const scaleY = Math.exp(scalesBytes[i3 + 1] / 16 - 10);
          const scaleZ = Math.exp(scalesBytes[i3 + 2] / 16 - 10);
          scalesCallback == null ? void 0 : scalesCallback(i2, scaleX, scaleY, scaleZ);
        }
      }
      {
        const quatBytes = this.reader.read(this.numSplats * 3);
        for (let i2 = 0; i2 < this.numSplats; i2++) {
          const i3 = i2 * 3;
          const quatX = quatBytes[i3] / 127.5 - 1;
          const quatY = quatBytes[i3 + 1] / 127.5 - 1;
          const quatZ = quatBytes[i3 + 2] / 127.5 - 1;
          const quatW = Math.sqrt(
            Math.max(0, 1 - quatX * quatX - quatY * quatY - quatZ * quatZ)
          );
          quatCallback == null ? void 0 : quatCallback(i2, quatX, quatY, quatZ, quatW);
        }
      }
      if (shCallback && this.shDegree >= 1) {
        const sh1 = new Float32Array(3 * 3);
        const sh2 = this.shDegree >= 2 ? new Float32Array(5 * 3) : void 0;
        const sh3 = this.shDegree >= 3 ? new Float32Array(7 * 3) : void 0;
        const shBytes = this.reader.read(
          this.numSplats * SH_DEGREE_TO_VECS[this.shDegree] * 3
        );
        let offset = 0;
        for (let i2 = 0; i2 < this.numSplats; i2++) {
          for (let j = 0; j < 9; ++j) {
            sh1[j] = (shBytes[offset + j] - 128) / 128;
          }
          offset += 9;
          if (sh2) {
            for (let j = 0; j < 15; ++j) {
              sh2[j] = (shBytes[offset + j] - 128) / 128;
            }
            offset += 15;
          }
          if (sh3) {
            for (let j = 0; j < 21; ++j) {
              sh3[j] = (shBytes[offset + j] - 128) / 128;
            }
            offset += 21;
          }
          shCallback == null ? void 0 : shCallback(i2, sh1, sh2, sh3);
        }
      }
    }
  }
  const SH_DEGREE_TO_VECS = { 1: 3, 2: 8, 3: 15 };
  const SH_C0 = 0.28209479177387814;
  const SPZ_MAGIC = 1347635022;
  const SPZ_VERSION = 2;
  const FLAG_ANTIALIASED = 1;
  class SpzWriter {
    constructor({
      numSplats,
      shDegree,
      fractionalBits = 12,
      flagAntiAlias = true
    }) {
      this.clippedCount = 0;
      const splatSize = 9 + 1 + 3 + 3 + 3 + (shDegree >= 1 ? 9 : 0) + (shDegree >= 2 ? 15 : 0) + (shDegree >= 3 ? 21 : 0);
      const bufferSize = 16 + numSplats * splatSize;
      this.buffer = new ArrayBuffer(bufferSize);
      this.view = new DataView(this.buffer);
      this.view.setUint32(0, SPZ_MAGIC, true);
      this.view.setUint32(4, SPZ_VERSION, true);
      this.view.setUint32(8, numSplats, true);
      this.view.setUint8(12, shDegree);
      this.view.setUint8(13, fractionalBits);
      this.view.setUint8(14, flagAntiAlias ? FLAG_ANTIALIASED : 0);
      this.view.setUint8(15, 0);
      this.numSplats = numSplats;
      this.shDegree = shDegree;
      this.fractionalBits = fractionalBits;
      this.fraction = 1 << fractionalBits;
      this.flagAntiAlias = flagAntiAlias;
    }
    setCenter(index, x2, y, z) {
      const xRounded = Math.round(x2 * this.fraction);
      const xInt = Math.max(-8388607, Math.min(8388607, xRounded));
      const yRounded = Math.round(y * this.fraction);
      const yInt = Math.max(-8388607, Math.min(8388607, yRounded));
      const zRounded = Math.round(z * this.fraction);
      const zInt = Math.max(-8388607, Math.min(8388607, zRounded));
      const clipped = xRounded !== xInt || yRounded !== yInt || zRounded !== zInt;
      if (clipped) {
        this.clippedCount += 1;
      }
      const i9 = index * 9;
      const base = 16 + i9;
      this.view.setUint8(base, xInt & 255);
      this.view.setUint8(base + 1, xInt >> 8 & 255);
      this.view.setUint8(base + 2, xInt >> 16 & 255);
      this.view.setUint8(base + 3, yInt & 255);
      this.view.setUint8(base + 4, yInt >> 8 & 255);
      this.view.setUint8(base + 5, yInt >> 16 & 255);
      this.view.setUint8(base + 6, zInt & 255);
      this.view.setUint8(base + 7, zInt >> 8 & 255);
      this.view.setUint8(base + 8, zInt >> 16 & 255);
    }
    setAlpha(index, alpha) {
      const base = 16 + this.numSplats * 9 + index;
      this.view.setUint8(
        base,
        Math.max(0, Math.min(255, Math.round(alpha * 255)))
      );
    }
    static scaleRgb(r) {
      const v = ((r - 0.5) / (SH_C0 / 0.15) + 0.5) * 255;
      return Math.max(0, Math.min(255, Math.round(v)));
    }
    setRgb(index, r, g, b) {
      const base = 16 + this.numSplats * 10 + index * 3;
      this.view.setUint8(base, SpzWriter.scaleRgb(r));
      this.view.setUint8(base + 1, SpzWriter.scaleRgb(g));
      this.view.setUint8(base + 2, SpzWriter.scaleRgb(b));
    }
    setScale(index, scaleX, scaleY, scaleZ) {
      const base = 16 + this.numSplats * 13 + index * 3;
      this.view.setUint8(
        base,
        Math.max(0, Math.min(255, Math.round((Math.log(scaleX) + 10) * 16)))
      );
      this.view.setUint8(
        base + 1,
        Math.max(0, Math.min(255, Math.round((Math.log(scaleY) + 10) * 16)))
      );
      this.view.setUint8(
        base + 2,
        Math.max(0, Math.min(255, Math.round((Math.log(scaleZ) + 10) * 16)))
      );
    }
    setQuat(index, quatX, quatY, quatZ, quatW) {
      const base = 16 + this.numSplats * 16 + index * 3;
      const quatNeg = quatW < 0;
      this.view.setUint8(
        base,
        Math.max(
          0,
          Math.min(255, Math.round(((quatNeg ? -quatX : quatX) + 1) * 127.5))
        )
      );
      this.view.setUint8(
        base + 1,
        Math.max(
          0,
          Math.min(255, Math.round(((quatNeg ? -quatY : quatY) + 1) * 127.5))
        )
      );
      this.view.setUint8(
        base + 2,
        Math.max(
          0,
          Math.min(255, Math.round(((quatNeg ? -quatZ : quatZ) + 1) * 127.5))
        )
      );
    }
    static quantizeSh(sh, bits2) {
      const value = Math.round(sh * 128) + 128;
      const bucketSize = 1 << 8 - bits2;
      const quantized = Math.floor((value + bucketSize / 2) / bucketSize) * bucketSize;
      return Math.max(0, Math.min(255, quantized));
    }
    setSh(index, sh1, sh2, sh3) {
      const shVecs = SH_DEGREE_TO_VECS[this.shDegree] || 0;
      const base1 = 16 + this.numSplats * 19 + index * shVecs * 3;
      for (let j = 0; j < 9; ++j) {
        this.view.setUint8(base1 + j, SpzWriter.quantizeSh(sh1[j], 5));
      }
      if (sh2) {
        const base2 = base1 + 9;
        for (let j = 0; j < 15; ++j) {
          this.view.setUint8(base2 + j, SpzWriter.quantizeSh(sh2[j], 4));
        }
        if (sh3) {
          const base3 = base2 + 15;
          for (let j = 0; j < 21; ++j) {
            this.view.setUint8(base3 + j, SpzWriter.quantizeSh(sh3[j], 4));
          }
        }
      }
    }
    async finalize() {
      const input = new Uint8Array(this.buffer);
      const stream = new ReadableStream({
        async start(controller) {
          controller.enqueue(input);
          controller.close();
        }
      });
      const compressed = stream.pipeThrough(new CompressionStream("gzip"));
      const response = new Response(compressed);
      const buffer = await response.arrayBuffer();
      console.log(
        "Compressed",
        input.length,
        "bytes to",
        buffer.byteLength,
        "bytes"
      );
      return new Uint8Array(buffer);
    }
  }
  async function transcodeSpz(input) {
    var _a2, _b2, _c;
    const splats = new SplatData();
    const {
      inputs,
      clipXyz,
      maxSh,
      fractionalBits = 12,
      opacityThreshold
    } = input;
    for (const input2 of inputs) {
      let transformPos = function(pos) {
        pos.multiplyScalar(scale);
        pos.applyQuaternion(quaternion);
        pos.add(translate);
        return pos;
      }, transformScales = function(scales) {
        scales.multiplyScalar(scale);
        return scales;
      }, transformQuaternion = function(quat) {
        quat.premultiply(quaternion);
        return quat;
      }, withinClip = function(p) {
        return !clip || clip.containsPoint(p);
      }, withinOpacity = function(opacity) {
        return opacityThreshold !== void 0 ? opacity >= opacityThreshold : true;
      };
      const scale = ((_a2 = input2.transform) == null ? void 0 : _a2.scale) ?? 1;
      const quaternion = new Quaternion().fromArray(
        ((_b2 = input2.transform) == null ? void 0 : _b2.quaternion) ?? [0, 0, 0, 1]
      );
      const translate = new Vector3().fromArray(
        ((_c = input2.transform) == null ? void 0 : _c.translate) ?? [0, 0, 0]
      );
      const clip = clipXyz ? new Box3(
        new Vector3().fromArray(clipXyz.min),
        new Vector3().fromArray(clipXyz.max)
      ) : void 0;
      let fileType = input2.fileType;
      if (!fileType) {
        fileType = getSplatFileType(input2.fileBytes);
        if (!fileType && input2.pathOrUrl) {
          fileType = getSplatFileTypeFromPath(input2.pathOrUrl);
        }
      }
      switch (fileType) {
        case SplatFileType.PLY: {
          const ply = new PlyReader({ fileBytes: input2.fileBytes });
          await ply.parseHeader();
          let lastIndex = null;
          ply.parseSplats(
            (index, x2, y, z, scaleX, scaleY, scaleZ, quatX, quatY, quatZ, quatW, opacity, r, g, b) => {
              const center = transformPos(new Vector3(x2, y, z));
              if (withinClip(center) && withinOpacity(opacity)) {
                lastIndex = splats.pushSplat();
                splats.setCenter(lastIndex, center.x, center.y, center.z);
                const scales = transformScales(
                  new Vector3(scaleX, scaleY, scaleZ)
                );
                splats.setScale(lastIndex, scales.x, scales.y, scales.z);
                const quaternion2 = transformQuaternion(
                  new Quaternion(quatX, quatY, quatZ, quatW)
                );
                splats.setQuaternion(
                  lastIndex,
                  quaternion2.x,
                  quaternion2.y,
                  quaternion2.z,
                  quaternion2.w
                );
                splats.setOpacity(lastIndex, opacity);
                splats.setColor(lastIndex, r, g, b);
              } else {
                lastIndex = null;
              }
            },
            (index, sh1, sh2, sh3) => {
              if (sh1 && lastIndex !== null) {
                splats.setSh1(lastIndex, sh1);
              }
              if (sh2 && lastIndex !== null) {
                splats.setSh2(lastIndex, sh2);
              }
              if (sh3 && lastIndex !== null) {
                splats.setSh3(lastIndex, sh3);
              }
            }
          );
          break;
        }
        case SplatFileType.SPZ: {
          const spz2 = new SpzReader({ fileBytes: input2.fileBytes });
          const mapping = new Int32Array(spz2.numSplats);
          mapping.fill(-1);
          const centers = new Float32Array(spz2.numSplats * 3);
          const center = new Vector3();
          spz2.parseSplats(
            (index, x2, y, z) => {
              const center2 = transformPos(new Vector3(x2, y, z));
              centers[index * 3] = center2.x;
              centers[index * 3 + 1] = center2.y;
              centers[index * 3 + 2] = center2.z;
            },
            (index, alpha) => {
              center.fromArray(centers, index * 3);
              if (withinClip(center) && withinOpacity(alpha)) {
                mapping[index] = splats.pushSplat();
                splats.setCenter(mapping[index], center.x, center.y, center.z);
                splats.setOpacity(mapping[index], alpha);
              }
            },
            (index, r, g, b) => {
              if (mapping[index] >= 0) {
                splats.setColor(mapping[index], r, g, b);
              }
            },
            (index, scaleX, scaleY, scaleZ) => {
              if (mapping[index] >= 0) {
                const scales = transformScales(
                  new Vector3(scaleX, scaleY, scaleZ)
                );
                splats.setScale(mapping[index], scales.x, scales.y, scales.z);
              }
            },
            (index, quatX, quatY, quatZ, quatW) => {
              if (mapping[index] >= 0) {
                const quaternion2 = transformQuaternion(
                  new Quaternion(quatX, quatY, quatZ, quatW)
                );
                splats.setQuaternion(
                  mapping[index],
                  quaternion2.x,
                  quaternion2.y,
                  quaternion2.z,
                  quaternion2.w
                );
              }
            },
            (index, sh1, sh2, sh3) => {
              if (mapping[index] >= 0) {
                splats.setSh1(mapping[index], sh1);
                if (sh2) {
                  splats.setSh2(mapping[index], sh2);
                }
                if (sh3) {
                  splats.setSh3(mapping[index], sh3);
                }
              }
            }
          );
          break;
        }
        case SplatFileType.SPLAT:
          decodeAntiSplat(
            input2.fileBytes,
            (numSplats) => {
            },
            (index, x2, y, z, scaleX, scaleY, scaleZ, quatX, quatY, quatZ, quatW, opacity, r, g, b) => {
              const center = transformPos(new Vector3(x2, y, z));
              if (withinClip(center) && withinOpacity(opacity)) {
                const index2 = splats.pushSplat();
                splats.setCenter(index2, center.x, center.y, center.z);
                const scales = transformScales(
                  new Vector3(scaleX, scaleY, scaleZ)
                );
                splats.setScale(index2, scales.x, scales.y, scales.z);
                const quaternion2 = transformQuaternion(
                  new Quaternion(quatX, quatY, quatZ, quatW)
                );
                splats.setQuaternion(
                  index2,
                  quaternion2.x,
                  quaternion2.y,
                  quaternion2.z,
                  quaternion2.w
                );
                splats.setOpacity(index2, opacity);
                splats.setColor(index2, r, g, b);
              }
            }
          );
          break;
        case SplatFileType.KSPLAT: {
          let lastIndex = null;
          decodeKsplat(
            input2.fileBytes,
            (numSplats) => {
            },
            (index, x2, y, z, scaleX, scaleY, scaleZ, quatX, quatY, quatZ, quatW, opacity, r, g, b) => {
              const center = transformPos(new Vector3(x2, y, z));
              if (withinClip(center) && withinOpacity(opacity)) {
                lastIndex = splats.pushSplat();
                splats.setCenter(lastIndex, center.x, center.y, center.z);
                const scales = transformScales(
                  new Vector3(scaleX, scaleY, scaleZ)
                );
                splats.setScale(lastIndex, scales.x, scales.y, scales.z);
                const quaternion2 = transformQuaternion(
                  new Quaternion(quatX, quatY, quatZ, quatW)
                );
                splats.setQuaternion(
                  lastIndex,
                  quaternion2.x,
                  quaternion2.y,
                  quaternion2.z,
                  quaternion2.w
                );
                splats.setOpacity(lastIndex, opacity);
                splats.setColor(lastIndex, r, g, b);
              } else {
                lastIndex = null;
              }
            },
            (index, sh1, sh2, sh3) => {
              if (lastIndex !== null) {
                splats.setSh1(lastIndex, sh1);
                if (sh2) {
                  splats.setSh2(lastIndex, sh2);
                }
                if (sh3) {
                  splats.setSh3(lastIndex, sh3);
                }
              }
            }
          );
          break;
        }
        default:
          throw new Error(\`transcodeSpz not implemented for \${fileType}\`);
      }
    }
    const shDegree = Math.min(
      maxSh ?? 3,
      splats.sh3 ? 3 : splats.sh2 ? 2 : splats.sh1 ? 1 : 0
    );
    const spz = new SpzWriter({
      numSplats: splats.numSplats,
      shDegree,
      fractionalBits,
      flagAntiAlias: true
    });
    for (let i2 = 0; i2 < splats.numSplats; ++i2) {
      const i3 = i2 * 3;
      const i4 = i2 * 4;
      spz.setCenter(
        i2,
        splats.centers[i3],
        splats.centers[i3 + 1],
        splats.centers[i3 + 2]
      );
      spz.setScale(
        i2,
        splats.scales[i3],
        splats.scales[i3 + 1],
        splats.scales[i3 + 2]
      );
      spz.setQuat(
        i2,
        splats.quaternions[i4],
        splats.quaternions[i4 + 1],
        splats.quaternions[i4 + 2],
        splats.quaternions[i4 + 3]
      );
      spz.setAlpha(i2, splats.opacities[i2]);
      spz.setRgb(
        i2,
        splats.colors[i3],
        splats.colors[i3 + 1],
        splats.colors[i3 + 2]
      );
      if (splats.sh1 && shDegree >= 1) {
        spz.setSh(
          i2,
          splats.sh1.slice(i2 * 9, (i2 + 1) * 9),
          shDegree >= 2 && splats.sh2 ? splats.sh2.slice(i2 * 15, (i2 + 1) * 15) : void 0,
          shDegree >= 3 && splats.sh3 ? splats.sh3.slice(i2 * 21, (i2 + 1) * 21) : void 0
        );
      }
    }
    const spzBytes = await spz.finalize();
    return { fileBytes: spzBytes, clippedCount: spz.clippedCount };
  }
  async function onMessage(event) {
    const { name, args, id } = event.data;
    let result = void 0;
    let error = void 0;
    try {
      switch (name) {
        case "unpackPly": {
          const { packedArray, fileBytes, splatEncoding } = args;
          const decoded = await unpackPly({
            packedArray,
            fileBytes,
            splatEncoding
          });
          result = {
            id,
            numSplats: decoded.numSplats,
            packedArray: decoded.packedArray,
            extra: decoded.extra
          };
          break;
        }
        case "decodeSpz": {
          const { fileBytes, splatEncoding } = args;
          const decoded = unpackSpz(fileBytes, splatEncoding);
          result = {
            id,
            numSplats: decoded.numSplats,
            packedArray: decoded.packedArray,
            extra: decoded.extra
          };
          break;
        }
        case "decodeAntiSplat": {
          const { fileBytes, splatEncoding } = args;
          const decoded = unpackAntiSplat(fileBytes, splatEncoding);
          result = {
            id,
            numSplats: decoded.numSplats,
            packedArray: decoded.packedArray
          };
          break;
        }
        case "decodeKsplat": {
          const { fileBytes, splatEncoding } = args;
          const decoded = unpackKsplat(fileBytes, splatEncoding);
          result = {
            id,
            numSplats: decoded.numSplats,
            packedArray: decoded.packedArray,
            extra: decoded.extra
          };
          break;
        }
        case "decodePcSogs": {
          const { fileBytes, extraFiles, splatEncoding } = args;
          const json = JSON.parse(
            new TextDecoder().decode(fileBytes)
          );
          const decoded = await unpackPcSogs(json, extraFiles, splatEncoding);
          result = {
            id,
            numSplats: decoded.numSplats,
            packedArray: decoded.packedArray,
            extra: decoded.extra
          };
          break;
        }
        case "decodePcSogsZip": {
          const { fileBytes, splatEncoding } = args;
          const decoded = await unpackPcSogsZip(fileBytes, splatEncoding);
          result = {
            id,
            numSplats: decoded.numSplats,
            packedArray: decoded.packedArray,
            extra: decoded.extra
          };
          break;
        }
        case "sortSplats": {
          const { totalSplats, readback, ordering } = args;
          result = {
            id,
            readback,
            ...sortSplats({ totalSplats, readback, ordering })
          };
          break;
        }
        case "sortDoubleSplats": {
          const { numSplats, readback, ordering } = args;
          {
            result = {
              id,
              readback,
              ordering,
              activeSplats: sort_splats(numSplats, readback, ordering)
            };
          }
          break;
        }
        case "sort32Splats": {
          const { numSplats, readback, ordering } = args;
          {
            result = {
              id,
              readback,
              ordering,
              activeSplats: sort32_splats(numSplats, readback, ordering)
            };
          }
          break;
        }
        case "transcodeSpz": {
          const input = args;
          const spzBytes = await transcodeSpz(input);
          result = {
            id,
            fileBytes: spzBytes,
            input
          };
          break;
        }
        default: {
          throw new Error(\`Unknown name: \${name}\`);
        }
      }
    } catch (e) {
      error = e;
      console.error(error);
    }
    self.postMessage(
      { id, result, error },
      { transfer: getArrayBuffers(result) }
    );
  }
  async function unpackPly({
    packedArray,
    fileBytes,
    splatEncoding
  }) {
    const ply = new PlyReader({ fileBytes });
    await ply.parseHeader();
    const numSplats = ply.numSplats;
    const extra = {};
    ply.parseSplats(
      (index, x2, y, z, scaleX, scaleY, scaleZ, quatX, quatY, quatZ, quatW, opacity, r, g, b) => {
        setPackedSplat(
          packedArray,
          index,
          x2,
          y,
          z,
          scaleX,
          scaleY,
          scaleZ,
          quatX,
          quatY,
          quatZ,
          quatW,
          opacity,
          r,
          g,
          b,
          splatEncoding
        );
      },
      (index, sh1, sh2, sh3) => {
        if (sh1) {
          if (!extra.sh1) {
            extra.sh1 = new Uint32Array(numSplats * 2);
          }
          encodeSh1Rgb(extra.sh1, index, sh1, splatEncoding);
        }
        if (sh2) {
          if (!extra.sh2) {
            extra.sh2 = new Uint32Array(numSplats * 4);
          }
          encodeSh2Rgb(extra.sh2, index, sh2, splatEncoding);
        }
        if (sh3) {
          if (!extra.sh3) {
            extra.sh3 = new Uint32Array(numSplats * 4);
          }
          encodeSh3Rgb(extra.sh3, index, sh3, splatEncoding);
        }
      }
    );
    return { packedArray, numSplats, extra };
  }
  function unpackSpz(fileBytes, splatEncoding) {
    const spz = new SpzReader({ fileBytes });
    const numSplats = spz.numSplats;
    const maxSplats = computeMaxSplats(numSplats);
    const packedArray = new Uint32Array(maxSplats * 4);
    const extra = {};
    spz.parseSplats(
      (index, x2, y, z) => {
        setPackedSplatCenter(packedArray, index, x2, y, z);
      },
      (index, alpha) => {
        setPackedSplatOpacity(packedArray, index, alpha);
      },
      (index, r, g, b) => {
        setPackedSplatRgb(packedArray, index, r, g, b, splatEncoding);
      },
      (index, scaleX, scaleY, scaleZ) => {
        setPackedSplatScales(
          packedArray,
          index,
          scaleX,
          scaleY,
          scaleZ,
          splatEncoding
        );
      },
      (index, quatX, quatY, quatZ, quatW) => {
        setPackedSplatQuat(packedArray, index, quatX, quatY, quatZ, quatW);
      },
      (index, sh1, sh2, sh3) => {
        if (sh1) {
          if (!extra.sh1) {
            extra.sh1 = new Uint32Array(numSplats * 2);
          }
          encodeSh1Rgb(extra.sh1, index, sh1, splatEncoding);
        }
        if (sh2) {
          if (!extra.sh2) {
            extra.sh2 = new Uint32Array(numSplats * 4);
          }
          encodeSh2Rgb(extra.sh2, index, sh2, splatEncoding);
        }
        if (sh3) {
          if (!extra.sh3) {
            extra.sh3 = new Uint32Array(numSplats * 4);
          }
          encodeSh3Rgb(extra.sh3, index, sh3, splatEncoding);
        }
      }
    );
    return { packedArray, numSplats, extra };
  }
  const DEPTH_INFINITY_F16 = 31744;
  const DEPTH_SIZE_16 = DEPTH_INFINITY_F16 + 1;
  let depthArray16 = null;
  function sortSplats({
    totalSplats,
    readback,
    ordering
  }) {
    if (!depthArray16) {
      depthArray16 = new Uint32Array(DEPTH_SIZE_16);
    }
    depthArray16.fill(0);
    const readbackUint32 = readback.map((layer) => new Uint32Array(layer.buffer));
    const layerSize = readbackUint32[0].length;
    const numLayers = Math.ceil(totalSplats / layerSize);
    let layerBase = 0;
    for (let layer = 0; layer < numLayers; ++layer) {
      const readbackLayer = readbackUint32[layer];
      const layerSplats = Math.min(readbackLayer.length, totalSplats - layerBase);
      for (let i2 = 0; i2 < layerSplats; ++i2) {
        const pri = readbackLayer[i2] & 32767;
        if (pri < DEPTH_INFINITY_F16) {
          depthArray16[pri] += 1;
        }
      }
      layerBase += layerSplats;
    }
    let activeSplats = 0;
    for (let j = 0; j < DEPTH_SIZE_16; ++j) {
      const nextIndex = activeSplats + depthArray16[j];
      depthArray16[j] = activeSplats;
      activeSplats = nextIndex;
    }
    layerBase = 0;
    for (let layer = 0; layer < numLayers; ++layer) {
      const readbackLayer = readbackUint32[layer];
      const layerSplats = Math.min(readbackLayer.length, totalSplats - layerBase);
      for (let i2 = 0; i2 < layerSplats; ++i2) {
        const pri = readbackLayer[i2] & 32767;
        if (pri < DEPTH_INFINITY_F16) {
          ordering[depthArray16[pri]] = layerBase + i2;
          depthArray16[pri] += 1;
        }
      }
      layerBase += layerSplats;
    }
    if (depthArray16[DEPTH_SIZE_16 - 1] !== activeSplats) {
      throw new Error(
        \`Expected \${activeSplats} active splats but got \${depthArray16[DEPTH_SIZE_16 - 1]}\`
      );
    }
    return { activeSplats, ordering };
  }
  const messageBuffer = [];
  function bufferMessage(event) {
    messageBuffer.push(event);
  }
  async function initialize() {
    self.addEventListener("message", bufferMessage);
    await __wbg_init();
    self.removeEventListener("message", bufferMessage);
    self.addEventListener("message", onMessage);
    for (const event of messageBuffer) {
      onMessage(event);
    }
    messageBuffer.length = 0;
  }
  initialize().catch(console.error);
})();
//# sourceMappingURL=worker-C1ojSBY1.js.map
`,Dt=typeof self<"u"&&self.Blob&&new Blob([he],{type:"text/javascript;charset=utf-8"});function Za(e){let A;try{if(A=Dt&&(self.URL||self.webkitURL).createObjectURL(Dt),!A)throw"";const n=new Worker(A,{name:e==null?void 0:e.name});return n.addEventListener("error",()=>{(self.URL||self.webkitURL).revokeObjectURL(A)}),n}catch{return new Worker("data:text/javascript;charset=utf-8,"+encodeURIComponent(he),{name:e==null?void 0:e.name})}finally{A&&(self.URL||self.webkitURL).revokeObjectURL(A)}}class Wa{constructor(){this.messages={},this.messageIdNext=0,this.worker=new Za,this.worker.onmessage=A=>this.onMessage(A)}makeMessageId(){return++this.messageIdNext}makeMessagePromiseId(){const A=this.makeMessageId(),n=new Promise((t,s)=>{this.messages[A]={resolve:t,reject:s}});return{id:A,promise:n}}onMessage(A){const{id:n,result:t,error:s}=A.data,a=this.messages[n];a&&(delete this.messages[n],s?a.reject(s):a.resolve(t))}async call(A,n){const{id:t,promise:s}=this.makeMessagePromiseId();return this.worker.postMessage({name:A,args:n,id:t},{transfer:Xs(n)}),s}}let ue=4,Sn=0;const Be=[],Ce=[];async function $a(){const e=Be.shift();if(e)return e;if(Sn<ue){const A=new Wa;return Sn+=1,A}return new Promise(A=>{Ce.push(A)})}function Ai(e){if(Sn>ue){Sn-=1;return}const A=Ce.shift();if(A){A(e);return}Be.push(e)}async function kA(e){const A=await $a();try{return await e(A)}finally{Ai(A)}}class ni extends qe{constructor(A){super(A),this.fileLoader=new He(A)}load(A,n,t,s){const a=this.manager.resolveURL((this.path??"")+(A??"")),i=new Headers(this.requestHeader),r=this.withCredentials?"include":"same-origin",l=new Request(a,{headers:i,credentials:r});let o=this.fileType;this.manager.itemStart(a),vt(l,t).then(async c=>{var g;const I=[new ProgressEvent("progress",{lengthComputable:!0,loaded:c.byteLength,total:c.byteLength})];function B(){if(t){const E=I.every(p=>p.lengthComputable||p.loaded===0&&p.total===0),Q=I.reduce((p,y)=>p+y.loaded,0),f=I.reduce((p,y)=>p+y.total,0);t(new ProgressEvent("progress",{lengthComputable:E,loaded:Q,total:f}))}}const C={},h=[],u=Ee(c);if(o==="pcsogs"&&u===void 0)throw new Error("Invalid PC SOGS file");if(u!==void 0){o="pcsogs";for(const E of["means","scales","quats","sh0","shN"]){const Q=u[E];if(Q)for(const f of Q.files){const p=new URL(f,a).toString(),y=I.length;I.push(new ProgressEvent("progress")),this.manager.itemStart(p);const w=new Request(p,{headers:i,credentials:r}),m=vt(w,x=>{I[y]=x,B()}).then(x=>{C[f]=x}).catch(x=>{throw this.manager.itemError(p),x}).finally(()=>{this.manager.itemEnd(p)});h.push(m)}}}if(await Promise.all(h),n){const E=((g=this.packedSplats)==null?void 0:g.splatEncoding)??Fn,Q=await fe({input:c,extraFiles:C,fileType:o,pathOrUrl:a,splatEncoding:E});this.packedSplats?(this.packedSplats.initialize(Q),n(this.packedSplats)):n(new LA(Q))}}).catch(c=>{this.manager.itemError(a),s==null||s(c)}).finally(()=>{this.manager.itemEnd(a)})}async loadAsync(A,n){return new Promise((t,s)=>{this.load(A,a=>{t(a)},n,s)})}parse(A){return new xn({packedSplats:A})}}async function vt(e,A){const n=await fetch(e);if(!n.ok)throw new Error(`${n.status} "${n.statusText}" fetching URL: ${e.url}`);if(!n.body)throw new Error(`Response body is null for URL: ${e.url}`);const t=n.body.getReader(),s=Number.parseInt(n.headers.get("Content-Length")||"0"),a=Number.isNaN(s)?0:s;let i=0;const r=[];for(;;){const{done:c,value:g}=await t.read();if(c)break;r.push(g),i+=g.length,A&&A(new ProgressEvent("progress",{lengthComputable:a!==0,loaded:i,total:a}))}const l=new Uint8Array(i);let o=0;for(const c of r)l.set(c,o),o+=c.length;return l.buffer}function ti(e){const A=new DataView(e.buffer);if((A.getUint32(0,!0)&16777215)===7957616)return"ply";if((A.getUint32(0,!0)&16777215)===559903){const n=ra(e,4);return new DataView(n.buffer).getUint32(0,!0)===1347635022?"spz":void 0}if(A.getUint32(0,!0)===67324752)return ai(e)?"pcsogszip":void 0}function ei(e){const A=e.split(/[?#]/,1)[0],n=Math.max(A.lastIndexOf("/"),A.lastIndexOf("\\")),t=A.slice(n+1),s=t.lastIndexOf(".");return s<=0||s===t.length-1?"":t.slice(s+1).toLowerCase()}function si(e){const A=ei(e);if(A==="ply")return"ply";if(A==="spz")return"spz";if(A==="splat")return"splat";if(A==="ksplat")return"ksplat"}function Ee(e){try{let A;if(typeof e=="string")A=e;else{const t=e instanceof ArrayBuffer?new Uint8Array(e):e;if(t.length>65536)return;A=new TextDecoder().decode(t)}const n=JSON.parse(A);if(!n||typeof n!="object"||Array.isArray(n))return;for(const t of["means","scales","quats","sh0"])if(!n[t]||typeof n[t]!="object"||Array.isArray(n[t])||!n[t].shape||!n[t].files||t!=="quats"&&(!n[t].mins||!n[t].maxs))return;return n}catch{return}}function ai(e){try{const A=e instanceof ArrayBuffer?new Uint8Array(e):e;let n=null;const t=Qs(A,{filter:({name:a})=>a.split(/[\\/]/).pop()==="meta.json"?(n=a,!0):!1});if(!n)return;const s=Ee(t[n]);return s?{name:n,json:s}:void 0}catch{return}}async function fe({input:e,extraFiles:A,fileType:n,pathOrUrl:t,splatEncoding:s}){const a=e instanceof ArrayBuffer?new Uint8Array(e):e;let i=n;switch(n||(i=ti(a),!i&&t&&(i=si(t))),i){case"ply":{const r=new ja({fileBytes:a});await r.parseHeader();const l=r.numSplats,o=nA(l).maxSplats,c={fileBytes:a,packedArray:new Uint32Array(o*4),splatEncoding:s};return await kA(async g=>{const{packedArray:I,numSplats:B,extra:C}=await g.call("unpackPly",c);return{packedArray:I,numSplats:B,extra:C}})}case"spz":return await kA(async r=>{const{packedArray:l,numSplats:o,extra:c}=await r.call("decodeSpz",{fileBytes:a,splatEncoding:s});return{packedArray:l,numSplats:o,extra:c}});case"splat":return await kA(async r=>{const{packedArray:l,numSplats:o}=await r.call("decodeAntiSplat",{fileBytes:a,splatEncoding:s});return{packedArray:l,numSplats:o}});case"ksplat":return await kA(async r=>{const{packedArray:l,numSplats:o,extra:c}=await r.call("decodeKsplat",{fileBytes:a,splatEncoding:s});return{packedArray:l,numSplats:o,extra:c}});case"pcsogs":return await kA(async r=>{const{packedArray:l,numSplats:o,extra:c}=await r.call("decodePcSogs",{fileBytes:a,extraFiles:A,splatEncoding:s});return{packedArray:l,numSplats:o,extra:c}});case"pcsogszip":return await kA(async r=>{const{packedArray:l,numSplats:o,extra:c}=await r.call("decodePcSogsZip",{fileBytes:a,splatEncoding:s});return{packedArray:l,numSplats:o,extra:c}});default:throw new Error(`Unknown splat file type: ${i}`)}}var ii=`precision highp float;
precision highp int;
precision highp sampler2D;
precision highp usampler2D;
precision highp isampler2D;
precision highp sampler2DArray;
precision highp usampler2DArray;
precision highp isampler2DArray;
precision highp sampler3D;
precision highp usampler3D;
precision highp isampler3D;

#include <splatDefines>

uniform uint targetLayer;
uniform int targetBase;
uniform int targetCount;

out uvec4 target;

{{ GLOBALS }}

void produceSplat(int index) {
    {{ STATEMENTS }}
}

void main() {
    int targetIndex = int(targetLayer << SPLAT_TEX_LAYER_BITS) + int(uint(gl_FragCoord.y) << SPLAT_TEX_WIDTH_BITS) + int(gl_FragCoord.x);
    int index = targetIndex - targetBase;

    if ((index >= 0) && (index < targetCount)) {
        produceSplat(index);
    } else {
        target = uvec4(0u, 0u, 0u, 0u);
    }
}`;const Fn={rgbMin:0,rgbMax:1,lnScaleMin:pA,lnScaleMax:yA,sh1Min:-1,sh1Max:1,sh2Min:-1,sh2Max:1,sh3Min:-1,sh3Max:1},hn=class J{constructor(A={}){this.maxSplats=0,this.numSplats=0,this.packedArray=null,this.isInitialized=!1,this.target=null,this.source=null,this.needsUpdate=!0,this.extra={},this.dyno=new ct({packedSplats:this}),this.dynoRgbMinMaxLnScaleMinMax=new kn({key:"rgbMinMaxLnScaleMinMax",value:new gA(0,1,pA,yA),update:n=>{var t,s,a,i;return n.set(((t=this.splatEncoding)==null?void 0:t.rgbMin)??0,((s=this.splatEncoding)==null?void 0:s.rgbMax)??1,((a=this.splatEncoding)==null?void 0:a.lnScaleMin)??pA,((i=this.splatEncoding)==null?void 0:i.lnScaleMax)??yA),n}}),this.dynoSh1MinMax=new Jn({key:"sh1MinMax",value:new vA(-1,1),update:n=>{var t,s;return n.set(((t=this.splatEncoding)==null?void 0:t.sh1Min)??-1,((s=this.splatEncoding)==null?void 0:s.sh1Max)??1),n}}),this.dynoSh2MinMax=new Jn({key:"sh2MinMax",value:new vA(-1,1),update:n=>{var t,s;return n.set(((t=this.splatEncoding)==null?void 0:t.sh2Min)??-1,((s=this.splatEncoding)==null?void 0:s.sh2Max)??1),n}}),this.dynoSh3MinMax=new Jn({key:"sh3MinMax",value:new vA(-1,1),update:n=>{var t,s;return n.set(((t=this.splatEncoding)==null?void 0:t.sh3Min)??-1,((s=this.splatEncoding)==null?void 0:s.sh3Max)??1),n}}),this.initialized=Promise.resolve(this),this.reinitialize(A)}reinitialize(A){this.isInitialized=!1,this.extra={},this.splatEncoding=A.splatEncoding,A.url||A.fileBytes||A.construct?this.initialized=this.asyncInitialize(A).then(()=>(this.isInitialized=!0,this)):(this.initialize(A),this.isInitialized=!0,this.initialized=Promise.resolve(this))}initialize(A){A.packedArray?(this.packedArray=A.packedArray,this.maxSplats=Math.floor(this.packedArray.length/4),this.maxSplats=Math.floor(this.maxSplats/v)*v,this.numSplats=Math.min(this.maxSplats,A.numSplats??Number.POSITIVE_INFINITY)):(this.maxSplats=A.maxSplats??0,this.numSplats=0),this.extra=A.extra??{}}async asyncInitialize(A){const{url:n,fileBytes:t,construct:s}=A;if(n){const a=new ni;a.packedSplats=this,await a.loadAsync(n)}else if(t){const a=await fe({input:t,fileType:A.fileType,pathOrUrl:A.fileName??n,splatEncoding:A.splatEncoding??Fn});this.initialize(a)}if(s){const a=s(this);a instanceof Promise&&await a}}dispose(){this.target&&(this.target.dispose(),this.target=null),this.source&&(this.source.dispose(),this.source=null)}ensureSplats(A){const n=A<=this.maxSplats?this.maxSplats:Math.max(A,2*this.maxSplats),t=this.packedArray?this.packedArray.length/4:0;if(!this.packedArray||n>t){this.maxSplats=nA(n).maxSplats;const s=new Uint32Array(this.maxSplats*4);this.packedArray&&s.set(this.packedArray),this.packedArray=s}return this.packedArray}ensureSplatsSh(A,n){let t,s;if(A===0)return this.ensureSplats(n);if(A===1)t=2,s="sh1";else if(A===2)t=4,s="sh2";else if(A===3)t=4,s="sh3";else throw new Error(`Invalid level: ${A}`);let a=this.extra[s]?this.extra[s].length/t:0;const i=n<=a?a:Math.max(n,2*a);if(!this.extra[s]||i>a){a=nA(i).maxSplats;const r=new Uint32Array(a*t);this.extra[s]&&r.set(this.extra[s]),this.extra[s]=r}return this.extra[s]}getSplat(A){if(!this.packedArray||A>=this.numSplats)throw new Error("Invalid index");return yt(this.packedArray,A,this.splatEncoding)}setSplat(A,n,t,s,a,i){const r=this.ensureSplats(A+1);pt(r,A,n.x,n.y,n.z,t.x,t.y,t.z,s.x,s.y,s.z,s.w,a,i.r,i.g,i.b),this.numSplats=Math.max(this.numSplats,A+1)}pushSplat(A,n,t,s,a){const i=this.ensureSplats(this.numSplats+1);pt(i,this.numSplats,A.x,A.y,A.z,n.x,n.y,n.z,t.x,t.y,t.z,t.w,s,a.r,a.g,a.b),++this.numSplats}forEachSplat(A){if(!(!this.packedArray||!this.numSplats))for(let n=0;n<this.numSplats;++n){const t=yt(this.packedArray,n,this.splatEncoding);A(n,t.center,t.scales,t.quaternion,t.opacity,t.color)}}ensureGenerate(A){if(this.target&&(A??1)<=this.maxSplats)return!1;this.dispose();const n=nA(A??1),{width:t,height:s,depth:a}=n;return this.maxSplats=n.maxSplats,this.target=new Nt(t,s,a,{depthBuffer:!1,stencilBuffer:!1,generateMipmaps:!1,magFilter:mn,minFilter:mn}),this.target.texture.format=VA,this.target.texture.type=TA,this.target.texture.internalFormat="RGBA32UI",this.target.scissorTest=!0,!0}generateMapping(A){let n=0;const t=A.map(s=>{const a=n,i=Math.ceil(s/v)*v;return n+=i,{base:a,count:s}});return{maxSplats:n,mapping:t}}getTexture(){return this.target?this.target.texture:this.source||this.packedArray?this.maybeUpdateSource():J.getEmpty()}maybeUpdateSource(){if(!this.packedArray)throw new Error("No packed splats");if(this.needsUpdate||!this.source){if(this.needsUpdate=!1,this.source){const{width:A,height:n,depth:t}=this.source.image;this.maxSplats!==A*n*t&&(this.source.dispose(),this.source=null)}if(this.source)this.packedArray.buffer!==this.source.image.data.buffer&&(this.source.image.data=new Uint8Array(this.packedArray.buffer));else{const{width:A,height:n,depth:t}=nA(this.maxSplats);this.source=new UA(this.packedArray,A,n,t),this.source.format=VA,this.source.type=TA,this.source.internalFormat="RGBA32UI",this.source.needsUpdate=!0}this.source.needsUpdate=!0}return this.source}static getEmpty(){if(!J.emptySource){const{width:A,height:n,depth:t,maxSplats:s}=nA(1),a=new Uint32Array(s*4);J.emptySource=new UA(a,A,n,t),J.emptySource.format=VA,J.emptySource.type=TA,J.emptySource.internalFormat="RGBA32UI",J.emptySource.needsUpdate=!0}return J.emptySource}prepareProgramMaterial(A){let n=J.generatorProgram.get(A);if(!n){const s=mA({index:"int"},{output:"uvec4"},({index:a})=>{A.inputs.index=a;const i=A.outputs.gsplat;return{output:Hs(i,this.dynoRgbMinMaxLnScaleMinMax)}});J.programTemplate||(J.programTemplate=new ne(ii)),n=new Ae({graph:s,inputs:{index:"index"},outputs:{output:"target"},template:J.programTemplate}),Object.assign(n.uniforms,{targetLayer:{value:0},targetBase:{value:0},targetCount:{value:0}}),J.generatorProgram.set(A,n)}const t=n.prepareMaterial();return J.fullScreenQuad.material=t,{program:n,material:t}}saveRenderState(A){return{xrEnabled:A.xr.enabled,autoClear:A.autoClear}}resetRenderState(A,n){A.setRenderTarget(null),A.xr.enabled=n.xrEnabled,A.autoClear=n.autoClear}generate({generator:A,base:n,count:t,renderer:s}){if(!this.target)throw new Error("Target must be initialized with ensureSplats");if(n+t>this.maxSplats)throw new Error("Base + count exceeds maxSplats");const{program:a,material:i}=this.prepareProgramMaterial(A);a.update();const r=this.saveRenderState(s),l=Math.ceil((n+t)/v)*v,o=v*FA;for(i.uniforms.targetBase.value=n,i.uniforms.targetCount.value=t;n<l;){const c=Math.floor(n/o);i.uniforms.targetLayer.value=c;const g=c*o,I=Math.floor((n-g)/v),B=Math.min(FA,Math.ceil((l-g)/v));this.target.scissor.set(0,I,v,B-I),s.setRenderTarget(this.target,c),s.xr.enabled=!1,s.autoClear=!1,J.fullScreenQuad.render(s),n+=v*(B-I)}return this.resetRenderState(s,r),{nextBase:l}}};hn.emptySource=null;hn.programTemplate=null;hn.generatorProgram=new Map;hn.fullScreenQuad=new Tt(new at({visible:!1}));let LA=hn;class ct extends lA{constructor({packedSplats:A}={}){super({key:"packedSplats",type:Mn,globals:()=>[ot],value:{texture:LA.getEmpty(),numSplats:0,rgbMinMaxLnScaleMinMax:new gA(0,1,pA,yA)},update:n=>{var t,s,a,i,r,l,o,c,g,I;return n.texture=((t=this.packedSplats)==null?void 0:t.getTexture())??LA.getEmpty(),n.numSplats=((s=this.packedSplats)==null?void 0:s.numSplats)??0,n.rgbMinMaxLnScaleMinMax.set(((i=(a=this.packedSplats)==null?void 0:a.splatEncoding)==null?void 0:i.rgbMin)??0,((l=(r=this.packedSplats)==null?void 0:r.splatEncoding)==null?void 0:l.rgbMax)??1,((c=(o=this.packedSplats)==null?void 0:o.splatEncoding)==null?void 0:c.lnScaleMin)??pA,((I=(g=this.packedSplats)==null?void 0:g.splatEncoding)==null?void 0:I.lnScaleMax)??yA),n}}),this.packedSplats=A}}class nt extends Ye{constructor(A,n){super(),this.ordering=A,this.setAttribute("position",new ut(ri,3)),this.setIndex(new ut(oi,1)),this._maxInstanceCount=A.length,this.instanceCount=n,this.attribute=new Le(A,1,!1,1),this.attribute.setUsage(ze),this.setAttribute("splatIndex",this.attribute)}update(A,n){this.ordering=A,this.attribute.array=A,this.instanceCount=n,this.attribute.addUpdateRange(0,n),this.attribute.needsUpdate=!0}}const ri=new Float32Array([-1,-1,0,1,-1,0,1,1,0,-1,1,0]),oi=new Uint16Array([0,1,2,0,2,3]),It=class tn{constructor(A){if(this.lastTime=null,this.encodeLinear=!1,this.superXY=1,this.display=null,this.sorting=null,this.pending=null,this.sortingCheck=!1,this.readback16=new Uint16Array(0),this.readback32=new Uint32Array(0),this.spark=A.spark,this.camera=A.camera,this.viewToWorld=A.viewToWorld??new DA,A.target){const{width:n,height:t,doubleBuffer:s}=A.target,a=Math.max(1,Math.min(4,A.target.superXY??1));if(this.superXY=a,n*a>8192||t*a>8192)throw new Error("Target size too large");this.target=new Ct(n*a,t*a,{format:$A,type:on,colorSpace:Et}),s&&(this.back=new Ct(n*a,t*a,{format:$A,type:on,colorSpace:Et})),this.encodeLinear=!0}this.onTextureUpdated=A.onTextureUpdated,this.sortRadial=A.sortRadial??!0,this.sortDistance=A.sortDistance,this.sortCoorient=A.sortCoorient,this.depthBias=A.depthBias,this.sort360=A.sort360,this.sort32=A.sort32,this.stochastic=A.stochastic??!1,this.orderingFreelist=new js({allocate:n=>new Uint32Array(n),valid:(n,t)=>n.length===t}),this.autoUpdate=!1,this.setAutoUpdate(A.autoUpdate??!1)}dispose(){var A;this.setAutoUpdate(!1),this.target&&(this.target.dispose(),this.target=void 0),this.back&&(this.back.dispose(),this.back=void 0),this.display&&(this.spark.releaseAccumulator(this.display.accumulator),this.display.geometry.dispose(),this.display=null),(A=this.pending)!=null&&A.accumulator&&(this.spark.releaseAccumulator(this.pending.accumulator),this.pending=null)}setAutoUpdate(A){!this.autoUpdate&&A?this.spark.autoViewpoints.push(this):this.autoUpdate&&!A&&(this.spark.autoViewpoints=this.spark.autoViewpoints.filter(n=>n!==this)),this.autoUpdate=A}async prepare({scene:A,camera:n,viewToWorld:t,update:s,forceOrigin:a}){var i;for(t?this.viewToWorld=t:(this.camera=n??this.camera,this.camera&&(this.camera.updateMatrixWorld(),this.viewToWorld=this.camera.matrixWorld.clone()));s??!0;){const l=a?this.viewToWorld:void 0;if(this.spark.updateInternal({scene:A,originToWorld:l}))break;await new Promise(c=>setTimeout(c,10))}const r=this.spark.active;r!==((i=this.display)==null?void 0:i.accumulator)&&(this.spark.active.refCount+=1),await this.sortUpdate({accumulator:r,viewToWorld:this.viewToWorld})}renderTarget({scene:A,camera:n}){var t;const s=this.back??this.target;if(!s)throw new Error("Must initialize SparkViewpoint with target");if(n=n??this.camera,!n)throw new Error("Must provide camera");if(n instanceof ft){const a=new ft().copy(n,!1);a.aspect=s.width/s.height,a.updateProjectionMatrix(),n=a}this.viewToWorld=n.matrixWorld.clone();try{this.spark.renderer.setRenderTarget(s),this.spark.prepareViewpoint(this),this.spark.renderer.render(A,n)}finally{this.spark.prepareViewpoint(this.spark.defaultView),this.spark.renderer.setRenderTarget(null)}s!==this.target&&([this.target,this.back]=[this.back,this.target]),(t=this.onTextureUpdated)==null||t.call(this,s.texture)}async readTarget(){if(!this.target)throw new Error("Must initialize SparkViewpoint with target");const{width:A,height:n}=this.target,t=A*n*4;(!this.superPixels||this.superPixels.length<t)&&(this.superPixels=new Uint8Array(t)),await this.spark.renderer.readRenderTargetPixelsAsync(this.target,0,0,A,n,this.superPixels);const{superXY:s}=this;if(s===1)return this.superPixels;const a=A/s,i=n/s,r=a*i*4;(!this.pixels||this.pixels.length<r)&&(this.pixels=new Uint8Array(r));const{superPixels:l,pixels:o}=this,c=s*s;for(let g=0;g<i;g++){const I=g*a;for(let B=0;B<a;B++){const C=B*s;let h=0,u=0,E=0,Q=0;for(let p=0;p<s;p++){const y=(g*s+p)*this.target.width;for(let w=0;w<s;w++){const m=(y+C+w)*4;h+=l[m],u+=l[m+1],E+=l[m+2],Q+=l[m+3]}}const f=(I+B)*4;o[f]=h/c,o[f+1]=u/c,o[f+2]=E/c,o[f+3]=Q/c}}return o}async prepareRenderPixels({scene:A,camera:n,viewToWorld:t,update:s,forceOrigin:a}){return await this.prepare({scene:A,camera:n,viewToWorld:t,update:s,forceOrigin:a}),this.renderTarget({scene:A,camera:n}),this.readTarget()}autoPoll({accumulator:A}){var n,t,s,a;this.camera&&(this.camera.updateMatrixWorld(),this.viewToWorld=this.camera.matrixWorld.clone());let i=!1,r=!1;if(!this.display)i=!0;else if(A){i=!0;const{mappingVersion:o}=this.display.accumulator;A.mappingVersion===o&&(this.spark.releaseAccumulator(this.display.accumulator),this.display.accumulator=A,r=!0)}const l=((n=this.sorting)==null?void 0:n.viewToWorld)??((t=this.display)==null?void 0:t.viewToWorld);l&&!Wn({matrix1:this.viewToWorld,matrix2:l,maxDistance:this.sortDistance??.01,minCoorient:this.sortCoorient??this.sortRadial?.99:.999})&&(i=!0),i&&(A&&(A.refCount+=1),A&&((s=this.pending)!=null&&s.accumulator)&&this.pending.accumulator!==((a=this.display)==null?void 0:a.accumulator)&&this.spark.releaseAccumulator(this.pending.accumulator),this.pending={accumulator:A,viewToWorld:this.viewToWorld,displayed:r},this.driveSort())}async driveSort(){for(var A;;){if(this.sorting||!this.pending)return;const{viewToWorld:n,displayed:t}=this.pending;let s=this.pending.accumulator??((A=this.display)==null?void 0:A.accumulator);if(s||(s=this.spark.active,s.refCount+=1),this.pending=null,!s)throw new Error("No accumulator to sort");this.sorting={viewToWorld:n},await this.sortUpdate({accumulator:s,viewToWorld:n,displayed:t}),this.sorting=null}}async sortUpdate({accumulator:A,viewToWorld:n,displayed:t=!1}){if(this.sortingCheck)throw new Error("Only one sort at a time");this.sortingCheck=!0,A=A??this.spark.active;const{numSplats:s,maxSplats:a}=A.splats;let i=0,r=this.orderingFreelist.alloc(a);if(this.stochastic){i=s;for(let l=0;l<s;++l)r[l]=l}else if(s>0){const{reader:l,doubleSortReader:o,sort32Reader:c,dynoSortRadial:g,dynoOrigin:I,dynoDirection:B,dynoDepthBias:C,dynoSort360:h,dynoSplats:u}=tn.makeSorter(),E=this.sort32??!1;let Q;if(E)this.readback32=l.ensureBuffer(a,this.readback32),Q=this.readback32;else{const x=Math.ceil(a/2);this.readback16=l.ensureBuffer(x,this.readback16),Q=this.readback16}const f=A.toWorld.clone().invert(),p=n.clone().premultiply(f);g.value=this.sort360?!0:this.sortRadial,I.value.set(0,0,0).applyMatrix4(p),B.value.set(0,0,-1).applyMatrix4(p).sub(I.value).normalize(),C.value=this.depthBias??1,h.value=this.sort360??!1,u.packedSplats=A.splats;const y=E?c:o,w=E?s:Math.ceil(s/2);await l.renderReadback({renderer:this.spark.renderer,reader:y,count:w,readback:Q});const m=await kA(async x=>{const D=E?"sort32Splats":"sortDoubleSplats";return x.call(D,{maxSplats:a,numSplats:s,readback:Q,ordering:r})});E?this.readback32=m.readback:this.readback16=m.readback,r=m.ordering,i=m.activeSplats}this.updateDisplay({accumulator:A,viewToWorld:n,ordering:r,activeSplats:i,displayed:t}),this.sortingCheck=!1}updateDisplay({accumulator:A,viewToWorld:n,ordering:t,activeSplats:s,displayed:a=!1}){if(!this.display)this.display={accumulator:A,viewToWorld:n,geometry:new nt(t,s)};else{!a&&A!==this.display.accumulator&&(this.spark.releaseAccumulator(this.display.accumulator),this.display.accumulator=A),this.display.viewToWorld=n;const i=this.display.geometry.ordering;i.length===t.length?this.display.geometry.update(t,s):(this.display.geometry.dispose(),this.display.geometry=new nt(t,s)),this.orderingFreelist.free(i)}this.spark.viewpoint===this&&this.spark.prepareViewpoint(this)}static makeSorter(){if(!tn.dynos){const A=new dt({value:!0}),n=new wn({value:new d}),t=new wn({value:new d}),s=new ln({value:1}),a=new dt({value:!1}),i=new ct,r=new ee,l=mA({index:"int"},{rgba8:"vec4"},({index:c})=>{if(!c)throw new Error("No index");const g={sortRadial:A,sortOrigin:n,sortDirection:t,sortDepthBias:s,sort360:a},I=nn(c,an("int",2)),B=rn(i,I),C=Pn({gsplat:B,...g}),h=rn(i,_A(I,an("int",1))),u=Pn({gsplat:h,...g}),E=pa({vectorType:"vec2",x:C,y:u});return{rgba8:xt(Ba(E))}}),o=mA({index:"int"},{rgba8:"vec4"},({index:c})=>{if(!c)throw new Error("No index");const g={sortRadial:A,sortOrigin:n,sortDirection:t,sortDepthBias:s,sort360:a},I=rn(i,c),B=Pn({gsplat:I,...g});return{rgba8:xt(ua(B))}});tn.dynos={dynoSortRadial:A,dynoOrigin:n,dynoDirection:t,dynoDepthBias:s,dynoSort360:a,dynoSplats:i,reader:r,doubleSortReader:l,sort32Reader:o}}return tn.dynos}};It.EMPTY_TEXTURE=new Re;It.dynos=null;let Mt=It;const gi=j(`
  float computeSort(Gsplat gsplat, bool sortRadial, vec3 sortOrigin, vec3 sortDirection, float sortDepthBias, bool sort360) {
    if (!isGsplatActive(gsplat.flags)) {
      return INFINITY;
    }

    vec3 center = gsplat.center - sortOrigin;
    float biasedDepth = dot(center, sortDirection) + sortDepthBias;
    if (!sort360 && (biasedDepth <= 0.0)) {
      return INFINITY;
    }

    return sortRadial ? length(center) : biasedDepth;
  }
`);function Pn({gsplat:e,sortRadial:A,sortOrigin:n,sortDirection:t,sortDepthBias:s,sort360:a}){return bn({inTypes:{gsplat:U,sortRadial:"bool",sortOrigin:"vec3",sortDirection:"vec3",sortDepthBias:"float",sort360:"bool"},outTypes:{metric:"float"},globals:()=>[CA,gi],inputs:{gsplat:e,sortRadial:A,sortOrigin:n,sortDirection:t,sortDepthBias:s,sort360:a},statements:({inputs:i,outputs:r})=>{const{gsplat:l,sortRadial:o,sortOrigin:c,sortDirection:g,sortDepthBias:I,sort360:B}=i;return BA(`
        ${r.metric} = computeSort(${l}, ${o}, ${c}, ${g}, ${I}, ${B});
      `)}}).outputs.metric}class Xn{constructor(){this.splats=new LA,this.toWorld=new DA,this.mapping=[],this.refCount=0,this.splatsVersion=-1,this.mappingVersion=-1}ensureGenerate(A){this.splats.ensureGenerate(A)&&(this.mapping=[])}generateSplats({renderer:A,modifier:n,generators:t,forceUpdate:s,originToWorld:a}){const i=this.mapping.reduce((o,c)=>(o.set(c.node,c),o),new Map);let r=0,l=0;for(const{node:o,generator:c,version:g,base:I,count:B}of t){const C=i.get(o);if((s||c!==(C==null?void 0:C.generator)||g!==(C==null?void 0:C.version)||I!==(C==null?void 0:C.base)||B!==(C==null?void 0:C.count))&&c&&B>0){const h=n.apply(c);try{this.splats.generate({generator:h,base:I,count:B,renderer:A})}catch(u){o.generator=void 0,o.generatorError=u}r+=1}l=Math.max(l,I+B)}return this.splats.numSplats=l,this.toWorld=a,this.mapping=t,r!==0}hasCorrespondence(A){return this.mapping.length!==A.mapping.length?!1:this.mapping.every(({node:n,base:t,count:s},a)=>{const{node:i,base:r,count:l}=A.mapping[a];return n===i&&t===r&&s===l})}}var li=`const float LN_SCALE_MIN = -12.0;
const float LN_SCALE_MAX = 9.0;

const uint SPLAT_TEX_WIDTH_BITS = 11u;
const uint SPLAT_TEX_HEIGHT_BITS = 11u;
const uint SPLAT_TEX_DEPTH_BITS = 11u;
const uint SPLAT_TEX_LAYER_BITS = SPLAT_TEX_WIDTH_BITS + SPLAT_TEX_HEIGHT_BITS;

const uint SPLAT_TEX_WIDTH = 1u << SPLAT_TEX_WIDTH_BITS;
const uint SPLAT_TEX_HEIGHT = 1u << SPLAT_TEX_HEIGHT_BITS;
const uint SPLAT_TEX_DEPTH = 1u << SPLAT_TEX_DEPTH_BITS;

const uint SPLAT_TEX_WIDTH_MASK = SPLAT_TEX_WIDTH - 1u;
const uint SPLAT_TEX_HEIGHT_MASK = SPLAT_TEX_HEIGHT - 1u;
const uint SPLAT_TEX_DEPTH_MASK = SPLAT_TEX_DEPTH - 1u;

const uint F16_INF = 0x7c00u;
const float PI = 3.1415926535897932384626433832795;

const float INFINITY = 1.0 / 0.0;
const float NEG_INFINITY = -INFINITY;

float sqr(float x) {
    return x * x;
}

float pow4(float x) {
    float x2 = x * x;
    return x2 * x2;
}

float pow8(float x) {
    float x4 = pow4(x);
    return x4 * x4;
}

vec3 srgbToLinear(vec3 rgb) {
    return pow(rgb, vec3(2.2));
}

vec3 linearToSrgb(vec3 rgb) {
    return pow(rgb, vec3(1.0 / 2.2));
}

uint encodeQuatOctXy88R8(vec4 q) {
    
    if (q.w < 0.0) {
        q = -q;
    }
    
    float theta = 2.0 * acos(q.w);
    float halfTheta = theta * 0.5;
    float s = sin(halfTheta);
    
    vec3 axis = (abs(s) < 1e-6) ? vec3(1.0, 0.0, 0.0) : q.xyz / s;
    
    
    
    float sum = abs(axis.x) + abs(axis.y) + abs(axis.z);
    vec2 p = vec2(axis.x, axis.y) / sum;
    
    if (axis.z < 0.0) {
        float oldPx = p.x;
        p.x = (1.0 - abs(p.y)) * (p.x >= 0.0 ? 1.0 : -1.0);
        p.y = (1.0 - abs(oldPx)) * (p.y >= 0.0 ? 1.0 : -1.0);
    }
    
    float u_f = p.x * 0.5 + 0.5;
    float v_f = p.y * 0.5 + 0.5;
    
    uint quantU = uint(clamp(round(u_f * 255.0), 0.0, 255.0));
    uint quantV = uint(clamp(round(v_f * 255.0), 0.0, 255.0));
    
    
    
    uint angleInt = uint(clamp(round((theta / 3.14159265359) * 255.0), 0.0, 255.0));
    
    
    return (angleInt << 16u) | (quantV << 8u) | quantU;
}

vec4 decodeQuatOctXy88R8(uint encoded) {
    
    uint quantU = encoded & uint(0xFFu);               
    uint quantV = (encoded >> 8u) & uint(0xFFu);         
    uint angleInt = encoded >> 16u;                      

    
    float u_f = float(quantU) / 255.0;
    float v_f = float(quantV) / 255.0;
    vec2 f = vec2(u_f * 2.0 - 1.0, v_f * 2.0 - 1.0);

    vec3 axis = vec3(f.xy, 1.0 - abs(f.x) - abs(f.y));
    float t = max(-axis.z, 0.0);
    axis.x += (axis.x >= 0.0) ? -t : t;
    axis.y += (axis.y >= 0.0) ? -t : t;
    axis = normalize(axis);
    
    
    float theta = (float(angleInt) / 255.0) * 3.14159265359;
    float halfTheta = theta * 0.5;
    float s = sin(halfTheta);
    float w = cos(halfTheta);
    
    return vec4(axis * s, w);
}

    

    

    

    

    

    

    

    

    

    

uvec4 packSplatEncoding(
    vec3 center, vec3 scales, vec4 quaternion, vec4 rgba, vec4 rgbMinMaxLnScaleMinMax
) {
    float rgbMin = rgbMinMaxLnScaleMinMax.x;
    float rgbMax = rgbMinMaxLnScaleMinMax.y;
    vec3 encRgb = (rgba.rgb - vec3(rgbMin)) / (rgbMax - rgbMin);
    uvec4 uRgba = uvec4(round(clamp(vec4(encRgb, rgba.a) * 255.0, 0.0, 255.0)));

    uint uQuat = encodeQuatOctXy88R8(quaternion);
    
    
    uvec3 uQuat3 = uvec3(uQuat & 0xffu, (uQuat >> 8u) & 0xffu, (uQuat >> 16u) & 0xffu);

    
    float lnScaleMin = rgbMinMaxLnScaleMinMax.z;
    float lnScaleMax = rgbMinMaxLnScaleMinMax.w;
    float lnScaleScale = 254.0 / (lnScaleMax - lnScaleMin);
    uvec3 uScales = uvec3(
        (scales.x == 0.0) ? 0u : uint(round(clamp((log(scales.x) - lnScaleMin) * lnScaleScale, 0.0, 254.0))) + 1u,
        (scales.y == 0.0) ? 0u : uint(round(clamp((log(scales.y) - lnScaleMin) * lnScaleScale, 0.0, 254.0))) + 1u,
        (scales.z == 0.0) ? 0u : uint(round(clamp((log(scales.z) - lnScaleMin) * lnScaleScale, 0.0, 254.0))) + 1u
    );

    
    uint word0 = uRgba.r | (uRgba.g << 8u) | (uRgba.b << 16u) | (uRgba.a << 24u);
    uint word1 = packHalf2x16(center.xy);
    uint word2 = packHalf2x16(vec2(center.z, 0.0)) | (uQuat3.x << 16u) | (uQuat3.y << 24u);
    uint word3 = uScales.x | (uScales.y << 8u) | (uScales.z << 16u) | (uQuat3.z << 24u);
    return uvec4(word0, word1, word2, word3);
}

uvec4 packSplat(vec3 center, vec3 scales, vec4 quaternion, vec4 rgba) {
    return packSplatEncoding(center, scales, quaternion, rgba, vec4(0.0, 1.0, LN_SCALE_MIN, LN_SCALE_MAX));
}

void unpackSplatEncoding(uvec4 packed, out vec3 center, out vec3 scales, out vec4 quaternion, out vec4 rgba, vec4 rgbMinMaxLnScaleMinMax) {
    uint word0 = packed.x, word1 = packed.y, word2 = packed.z, word3 = packed.w;

    uvec4 uRgba = uvec4(word0 & 0xffu, (word0 >> 8u) & 0xffu, (word0 >> 16u) & 0xffu, (word0 >> 24u) & 0xffu);
    float rgbMin = rgbMinMaxLnScaleMinMax.x;
    float rgbMax = rgbMinMaxLnScaleMinMax.y;
    rgba = (vec4(uRgba) / 255.0);
    rgba.rgb = rgba.rgb * (rgbMax - rgbMin) + rgbMin;

    center = vec4(
        unpackHalf2x16(word1),
        unpackHalf2x16(word2 & 0xffffu)
    ).xyz;

    uvec3 uScales = uvec3(word3 & 0xffu, (word3 >> 8u) & 0xffu, (word3 >> 16u) & 0xffu);
    float lnScaleMin = rgbMinMaxLnScaleMinMax.z;
    float lnScaleMax = rgbMinMaxLnScaleMinMax.w;
    float lnScaleScale = (lnScaleMax - lnScaleMin) / 254.0;
    scales = vec3(
        (uScales.x == 0u) ? 0.0 : exp(lnScaleMin + float(uScales.x - 1u) * lnScaleScale),
        (uScales.y == 0u) ? 0.0 : exp(lnScaleMin + float(uScales.y - 1u) * lnScaleScale),
        (uScales.z == 0u) ? 0.0 : exp(lnScaleMin + float(uScales.z - 1u) * lnScaleScale)
    );

    uint uQuat = ((word2 >> 16u) & 0xFFFFu) | ((word3 >> 8u) & 0xFF0000u);
    quaternion = decodeQuatOctXy88R8(uQuat);
    
    
}

void unpackSplat(uvec4 packed, out vec3 center, out vec3 scales, out vec4 quaternion, out vec4 rgba) {
    unpackSplatEncoding(packed, center, scales, quaternion, rgba, vec4(0.0, 1.0, LN_SCALE_MIN, LN_SCALE_MAX));
}

vec3 quatVec(vec4 q, vec3 v) {
    
    vec3 t = 2.0 * cross(q.xyz, v);
    return v + q.w * t + cross(q.xyz, t);
}

vec4 quatQuat(vec4 q1, vec4 q2) {
    return vec4(
        q1.w * q2.x + q1.x * q2.w + q1.y * q2.z - q1.z * q2.y,
        q1.w * q2.y - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x,
        q1.w * q2.z + q1.x * q2.y - q1.y * q2.x + q1.z * q2.w,
        q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z
    );
}

mat3 scaleQuaternionToMatrix(vec3 s, vec4 q) {
    
    return mat3(
        s.x * (1.0 - 2.0 * (q.y * q.y + q.z * q.z)),
        s.x * (2.0 * (q.x * q.y + q.w * q.z)),
        s.x * (2.0 * (q.x * q.z - q.w * q.y)),
        s.y * (2.0 * (q.x * q.y - q.w * q.z)),
        s.y * (1.0 - 2.0 * (q.x * q.x + q.z * q.z)),
        s.y * (2.0 * (q.y * q.z + q.w * q.x)),
        s.z * (2.0 * (q.x * q.z + q.w * q.y)),
        s.z * (2.0 * (q.y * q.z - q.w * q.x)),
        s.z * (1.0 - 2.0 * (q.x * q.x + q.y * q.y))
    );
}

vec4 slerp(vec4 q1, vec4 q2, float t) {
    
    float cosHalfTheta = dot(q1, q2);

    
    if (abs(cosHalfTheta) >= 0.999) {
        return q1;
    }
    
    
    
    if (cosHalfTheta < 0.0) {
        q2 = -q2;
        cosHalfTheta = -cosHalfTheta;
    }

    
    float halfTheta = acos(cosHalfTheta);
    float sinHalfTheta = sqrt(1.0 - cosHalfTheta * cosHalfTheta);

    
    float ratioA = sin((1.0 - t) * halfTheta) / sinHalfTheta;
    float ratioB = sin(t * halfTheta) / sinHalfTheta;

    
    return q1 * ratioA + q2 * ratioB;
}

ivec3 splatTexCoord(int index) {
    uint x = uint(index) & SPLAT_TEX_WIDTH_MASK;
    uint y = (uint(index) >> SPLAT_TEX_WIDTH_BITS) & SPLAT_TEX_HEIGHT_MASK;
    uint z = uint(index) >> SPLAT_TEX_LAYER_BITS;
    return ivec3(x, y, z);
}`,ci=`precision highp float;
precision highp int;

#include <splatDefines>

uniform float near;
uniform float far;
uniform bool encodeLinear;
uniform float time;
uniform bool debugFlag;
uniform float maxStdDev;
uniform float minAlpha;
uniform bool stochastic;
uniform bool disableFalloff;
uniform float falloff;

uniform bool splatTexEnable;
uniform sampler3D splatTexture;
uniform mat2 splatTexMul;
uniform vec2 splatTexAdd;
uniform float splatTexNear;
uniform float splatTexFar;
uniform float splatTexMid;

out vec4 fragColor;

in vec4 vRgba;
in vec2 vSplatUv;
in vec3 vNdc;
flat in uint vSplatIndex;

void main() {
    vec4 rgba = vRgba;

    float z = dot(vSplatUv, vSplatUv);
    if (!splatTexEnable) {
        if (z > (maxStdDev * maxStdDev)) {
            discard;
        }
    } else {
        vec2 uv = splatTexMul * vSplatUv + splatTexAdd;
        float ndcZ = vNdc.z;
        float depth = (2.0 * near * far) / (far + near - ndcZ * (far - near));
        float clampedFar = max(splatTexFar, splatTexNear);
        float clampedDepth = clamp(depth, splatTexNear, clampedFar);
        float logDepth = log2(clampedDepth + 1.0);
        float logNear = log2(splatTexNear + 1.0);
        float logFar = log2(clampedFar + 1.0);

        float texZ;
        if (splatTexMid > 0.0) {
            float clampedMid = clamp(splatTexMid, splatTexNear, clampedFar);
            float logMid = log2(clampedMid + 1.0);
            texZ = (clampedDepth <= clampedMid) ?
                (0.5 * ((logDepth - logNear) / (logMid - logNear))) :
                (0.5 * ((logDepth - logMid) / (logFar - logMid)) + 0.5);
        } else {
            texZ = (logDepth - logNear) / (logFar - logNear);
        }

        vec4 modulate = texture(splatTexture, vec3(uv, 1.0 - texZ));
        rgba *= modulate;
    }

    rgba.a *= mix(1.0, exp(-0.5 * z), falloff);

    if (rgba.a < minAlpha) {
        discard;
    }
    if (encodeLinear) {
        rgba.rgb = srgbToLinear(rgba.rgb);
    }

    if (stochastic) {
        const bool STEADY = false;
        uint uTime = STEADY ? 0u : floatBitsToUint(time);
        uvec2 coord = uvec2(gl_FragCoord.xy);
        uint state = uTime + 0x9e3779b9u * coord.x + 0x85ebca6bu * coord.y + 0xc2b2ae35u * uint(vSplatIndex);
        state = state * 747796405u + 2891336453u;
        uint hash = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
        hash = (hash >> 22u) ^ hash;
        float rand = float(hash) / 4294967296.0;
        if (rand < rgba.a) {
            fragColor = vec4(rgba.rgb, 1.0);
        } else {
            discard;
        }
    } else {
        #ifdef PREMULTIPLIED_ALPHA
            fragColor = vec4(rgba.rgb * rgba.a, rgba.a);
        #else
            fragColor = rgba;
        #endif
    }
}`,Ii=`precision highp float;
precision highp int;
precision highp usampler2DArray;

#include <splatDefines>

attribute uint splatIndex;

out vec4 vRgba;
out vec2 vSplatUv;
out vec3 vNdc;
flat out uint vSplatIndex;

uniform vec2 renderSize;
uniform uint numSplats;
uniform vec4 renderToViewQuat;
uniform vec3 renderToViewPos;
uniform float maxStdDev;
uniform float maxPixelRadius;
uniform float time;
uniform float deltaTime;
uniform bool debugFlag;
uniform float minAlpha;
uniform bool stochastic;
uniform bool enable2DGS;
uniform float blurAmount;
uniform float preBlurAmount;
uniform float focalDistance;
uniform float apertureAngle;
uniform float clipXY;
uniform float focalAdjustment;

uniform usampler2DArray packedSplats;
uniform vec4 rgbMinMaxLnScaleMinMax;

void main() {
    
    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);

    if (uint(gl_InstanceID) >= numSplats) {
        return;
    }

    ivec3 texCoord;
    if (stochastic) {
        texCoord = ivec3(
            uint(gl_InstanceID) & SPLAT_TEX_WIDTH_MASK,
            (uint(gl_InstanceID) >> SPLAT_TEX_WIDTH_BITS) & SPLAT_TEX_HEIGHT_MASK,
            (uint(gl_InstanceID) >> SPLAT_TEX_LAYER_BITS)
        );
    } else {
        if (splatIndex == 0xffffffffu) {
            
            return;
        }
        texCoord = ivec3(
            splatIndex & SPLAT_TEX_WIDTH_MASK,
            (splatIndex >> SPLAT_TEX_WIDTH_BITS) & SPLAT_TEX_HEIGHT_MASK,
            splatIndex >> SPLAT_TEX_LAYER_BITS
        );
    }
    uvec4 packed = texelFetch(packedSplats, texCoord, 0);

    vec3 center, scales;
    vec4 quaternion, rgba;
    unpackSplatEncoding(packed, center, scales, quaternion, rgba, rgbMinMaxLnScaleMinMax);

    if (rgba.a < minAlpha) {
        return;
    }
    bvec3 zeroScales = equal(scales, vec3(0.0));
    if (all(zeroScales)) {
        return;
    }

    
    vec3 viewCenter = quatVec(renderToViewQuat, center) + renderToViewPos;

    
    if (viewCenter.z >= 0.0) {
        return;
    }

    
    vec4 clipCenter = projectionMatrix * vec4(viewCenter, 1.0);

    
    if (abs(clipCenter.z) >= clipCenter.w) {
        return;
    }

    
    float clip = clipXY * clipCenter.w;
    if (abs(clipCenter.x) > clip || abs(clipCenter.y) > clip) {
        return;
    }

    
    vSplatIndex = splatIndex;

    
    vec4 viewQuaternion = quatQuat(renderToViewQuat, quaternion);

    if (enable2DGS && any(zeroScales)) {
        vRgba = rgba;
        vSplatUv = position.xy * maxStdDev;

        vec3 offset;
        if (zeroScales.z) {
            offset = vec3(vSplatUv.xy * scales.xy, 0.0);
        } else if (zeroScales.y) {
            offset = vec3(vSplatUv.x * scales.x, 0.0, vSplatUv.y * scales.z);
        } else {
            offset = vec3(0.0, vSplatUv.xy * scales.yz);
        }

        vec3 viewPos = viewCenter + quatVec(viewQuaternion, offset);
        gl_Position = projectionMatrix * vec4(viewPos, 1.0);
        vNdc = gl_Position.xyz / gl_Position.w;
        return;
    }

    
    vec3 ndcCenter = clipCenter.xyz / clipCenter.w;

    
    mat3 RS = scaleQuaternionToMatrix(scales, viewQuaternion);
    mat3 cov3D = RS * transpose(RS);

    
    vec2 scaledRenderSize = renderSize * focalAdjustment;
    vec2 focal = 0.5 * scaledRenderSize * vec2(projectionMatrix[0][0], projectionMatrix[1][1]);
    float invZ = 1.0 / viewCenter.z;
    vec2 J1 = focal * invZ;
    vec2 J2 = -(J1 * viewCenter.xy) * invZ;
    mat3 J = mat3(
        J1.x, 0.0, J2.x,
        0.0, J1.y, J2.y,
        0.0, 0.0, 0.0
    );

    
    
    
    
    
    
    
    mat3 cov2D = transpose(J) * cov3D * J;
    float a = cov2D[0][0];
    float d = cov2D[1][1];
    float b = cov2D[0][1];

    
    a += preBlurAmount;
    d += preBlurAmount;

    float fullBlurAmount = blurAmount;
    if ((focalDistance > 0.0) && (apertureAngle > 0.0)) {
        float focusRadius = maxPixelRadius;
        if (viewCenter.z < 0.0) {
            float focusBlur = abs((-viewCenter.z - focalDistance) / viewCenter.z);
            float apertureRadius = focal.x * tan(0.5 * apertureAngle);
            focusRadius = focusBlur * apertureRadius;
        }
        fullBlurAmount = clamp(sqr(focusRadius), blurAmount, sqr(maxPixelRadius));
    }

    
    float detOrig = a * d - b * b;
    a += fullBlurAmount;
    d += fullBlurAmount;
    float det = a * d - b * b;

    
    float blurAdjust = sqrt(max(0.0, detOrig / det));
    rgba.a *= blurAdjust;
    if (rgba.a < minAlpha) {
        return;
    }

    
    float eigenAvg = 0.5 * (a + d);
    float eigenDelta = sqrt(max(0.0, eigenAvg * eigenAvg - det));
    float eigen1 = eigenAvg + eigenDelta;
    float eigen2 = eigenAvg - eigenDelta;

    vec2 eigenVec1 = normalize(vec2((abs(b) < 0.001) ? 1.0 : b, eigen1 - a));
    vec2 eigenVec2 = vec2(eigenVec1.y, -eigenVec1.x);

    float scale1 = position.x * min(maxPixelRadius, maxStdDev * sqrt(eigen1));
    float scale2 = position.y * min(maxPixelRadius, maxStdDev * sqrt(eigen2));

    
    vec2 pixelOffset = eigenVec1 * scale1 + eigenVec2 * scale2;
    vec2 ndcOffset = (2.0 / scaledRenderSize) * pixelOffset;
    vec3 ndc = vec3(ndcCenter.xy + ndcOffset, ndcCenter.z);

    vRgba = rgba;
    vSplatUv = position.xy * maxStdDev;
    vNdc = ndc;
    gl_Position = vec4(ndc.xy * clipCenter.w, clipCenter.zw);
}`;let jn=null;function hi(){return jn||(Ze.splatDefines=li,jn={splatVertex:Ii,splatFragment:ci}),jn}const kt=5;let tt=!1,et=!1,Qe;function ui(e){let A=!1;return e instanceof xn?!0:(e.traverse(n=>{A=A||n instanceof xn}),A)}const de=ZA.prototype.add;ZA.prototype.add=function(e){return tt=tt||ui(e),et=et||e instanceof pe,de.call(this,e),this};const Bi=ZA.prototype.onBeforeRender;ZA.prototype.onBeforeRender=function(e){if(tt){if(!et){const A=Qe||new pe({renderer:e});this.add(A)}ZA.prototype.onBeforeRender=Bi,ZA.prototype.add=de}};const Nn=class q extends On{constructor(A){const n=q.makeUniforms(),t=hi(),s=A.premultipliedAlpha??!0,a=new Ke({glslVersion:Gt,vertexShader:t.splatVertex,fragmentShader:t.splatFragment,uniforms:n,premultipliedAlpha:s,transparent:!0,depthTest:!0,depthWrite:!1,side:Pe});super(_t,a),this.splatTexture=null,this.autoViewpoints=[],this.rotateToAccumulator=new kn({value:new $}),this.translateToAccumulator=new wn({value:new d}),this.lastFrame=-1,this.lastUpdateTime=null,this.defaultCameras=[],this.lastStochastic=null,this.pendingUpdate=null,this.envViewpoint=null,this.frustumCulled=!1,this.renderer=A.renderer,this.material=a,this.uniforms=n;const i=mA({gsplat:U},{gsplat:U},({gsplat:r})=>{if(!r)throw new Error("gsplat not defined");return r=Zt(r,{rotate:this.rotateToAccumulator,translate:this.translateToAccumulator}),{gsplat:r}});this.modifier=new za(i),this.premultipliedAlpha=s,this.autoUpdate=A.autoUpdate??!0,this.preUpdate=A.preUpdate??!1,this.needsUpdate=!1,this.originDistance=A.originDistance??1,this.maxStdDev=A.maxStdDev??Math.sqrt(8),this.maxPixelRadius=A.maxPixelRadius??512,this.minAlpha=A.minAlpha??.5*(1/255),this.enable2DGS=A.enable2DGS??!1,this.preBlurAmount=A.preBlurAmount??0,this.blurAmount=A.blurAmount??.3,this.focalDistance=A.focalDistance??0,this.apertureAngle=A.apertureAngle??0,this.falloff=A.falloff??1,this.clipXY=A.clipXY??1.4,this.focalAdjustment=A.focalAdjustment??1,this.splatEncoding=A.splatEncoding??{...Fn},this.active=new Xn,this.accumulatorCount=1,this.freeAccumulators=[];for(let r=0;r<1;++r)this.freeAccumulators.push(new Xn),this.accumulatorCount+=1;this.defaultView=new Mt({...A.view,autoUpdate:!0,spark:this}),this.viewpoint=this.defaultView,this.prepareViewpoint(this.viewpoint),this.clock=A.clock?Aa(A.clock):new Ut,Qe=this}static makeUniforms(){return{renderSize:{value:new vA},near:{value:.1},far:{value:1e3},numSplats:{value:0},renderToViewQuat:{value:new $},renderToViewPos:{value:new d},maxStdDev:{value:1},maxPixelRadius:{value:512},minAlpha:{value:.00196078431372549},stochastic:{value:!1},enable2DGS:{value:!1},preBlurAmount:{value:0},blurAmount:{value:.3},focalDistance:{value:0},apertureAngle:{value:0},falloff:{value:1},clipXY:{value:1.4},focalAdjustment:{value:1},splatTexEnable:{value:!1},splatTexture:{type:"t",value:q.EMPTY_SPLAT_TEXTURE},splatTexMul:{value:new Rt},splatTexAdd:{value:new vA},splatTexNear:{value:.1},splatTexFar:{value:1e3},splatTexMid:{value:0},packedSplats:{type:"t",value:LA.getEmpty()},rgbMinMaxLnScaleMinMax:{value:new gA},time:{value:0},deltaTime:{value:0},encodeLinear:{value:!1},debugFlag:{value:!1}}}canAllocAccumulator(){return this.freeAccumulators.length>0||this.accumulatorCount<kt}maybeAllocAccumulator(){let A=this.freeAccumulators.pop();if(A===void 0){if(this.accumulatorCount>=kt)return null;A=new Xn,this.accumulatorCount+=1}return A.refCount=1,A}releaseAccumulator(A){A.refCount-=1,A.refCount===0&&this.freeAccumulators.push(A)}newViewpoint(A){return new Mt({...A,spark:this})}onBeforeRender(A,n,t){var s,a;const i=this.time??this.clock.getElapsedTime(),r=i-(this.viewpoint.lastTime??i);this.viewpoint.lastTime=i;const l=A.info.render.frame,o=l!==this.lastFrame;this.lastFrame=l;const c=this.viewpoint;if(c===this.defaultView){if(o)if(!A.xr.isPresenting)this.defaultView.viewToWorld=t.matrixWorld.clone(),this.defaultCameras=[this.defaultView.viewToWorld];else{const h=A.xr.getCamera().cameras;this.defaultCameras=h.map(u=>u.matrixWorld),this.defaultView.viewToWorld=Ci(this.defaultCameras)??new DA}this.autoUpdate&&this.update({scene:n,viewToWorld:this.defaultView.viewToWorld})}if(o&&(this.material.premultipliedAlpha!==this.premultipliedAlpha&&(this.material.premultipliedAlpha=this.premultipliedAlpha,this.material.needsUpdate=!0),this.uniforms.time.value=i,this.uniforms.deltaTime.value=r,this.uniforms.debugFlag.value=performance.now()/1e3%2<1,c.display&&c.stochastic&&(this.geometry.instanceCount=this.uniforms.numSplats.value)),c.target)this.uniforms.renderSize.value.set(c.target.width,c.target.height);else{const h=A.getDrawingBufferSize(this.uniforms.renderSize.value);if(h.x===1&&h.y===1){const u=(s=A.xr.getSession())==null?void 0:s.renderState.baseLayer;u&&(h.x=u.framebufferWidth,h.y=u.framebufferHeight)}}const g=t;if(this.uniforms.near.value=g.near,this.uniforms.far.value=g.far,this.uniforms.encodeLinear.value=c.encodeLinear,this.uniforms.maxStdDev.value=this.maxStdDev,this.uniforms.maxPixelRadius.value=this.maxPixelRadius,this.uniforms.minAlpha.value=this.minAlpha,this.uniforms.stochastic.value=c.stochastic,this.uniforms.enable2DGS.value=this.enable2DGS,this.uniforms.preBlurAmount.value=this.preBlurAmount,this.uniforms.blurAmount.value=this.blurAmount,this.uniforms.focalDistance.value=this.focalDistance,this.uniforms.apertureAngle.value=this.apertureAngle,this.uniforms.falloff.value=this.falloff,this.uniforms.clipXY.value=this.clipXY,this.uniforms.focalAdjustment.value=this.focalAdjustment,this.lastStochastic!==!c.stochastic&&(this.lastStochastic=!c.stochastic,this.material.transparent=!c.stochastic,this.material.depthWrite=c.stochastic,this.material.needsUpdate=!0),this.splatTexture){const{enable:h,texture:u,multiply:E,add:Q,near:f,far:p,mid:y}=this.splatTexture;h&&u?(this.uniforms.splatTexEnable.value=!0,this.uniforms.splatTexture.value=u,E?this.uniforms.splatTexMul.value.fromArray(E.elements):this.uniforms.splatTexMul.value.set(.5/this.maxStdDev,0,0,.5/this.maxStdDev),this.uniforms.splatTexAdd.value.set((Q==null?void 0:Q.x)??.5,(Q==null?void 0:Q.y)??.5),this.uniforms.splatTexNear.value=f??this.uniforms.near.value,this.uniforms.splatTexFar.value=p??this.uniforms.far.value,this.uniforms.splatTexMid.value=y??0):(this.uniforms.splatTexEnable.value=!1,this.uniforms.splatTexture.value=q.EMPTY_SPLAT_TEXTURE)}else this.uniforms.splatTexEnable.value=!1,this.uniforms.splatTexture.value=q.EMPTY_SPLAT_TEXTURE;const I=((a=c.display)==null?void 0:a.accumulator.toWorld)??new DA,B=t.matrixWorld.clone().invert();I.clone().premultiply(B).decompose(this.uniforms.renderToViewPos.value,this.uniforms.renderToViewQuat.value,new d)}prepareViewpoint(A){var n,t,s,a;if(this.viewpoint=A??this.viewpoint,this.viewpoint.display){const{accumulator:i,geometry:r}=this.viewpoint.display;this.uniforms.numSplats.value=i.splats.numSplats,this.uniforms.packedSplats.value=i.splats.getTexture(),this.uniforms.rgbMinMaxLnScaleMinMax.value.set(((n=i.splats.splatEncoding)==null?void 0:n.rgbMin)??0,((t=i.splats.splatEncoding)==null?void 0:t.rgbMax)??1,((s=i.splats.splatEncoding)==null?void 0:s.lnScaleMin)??pA,((a=i.splats.splatEncoding)==null?void 0:a.lnScaleMax)??yA),this.geometry=r,this.material.transparent=!this.viewpoint.stochastic,this.material.depthWrite=this.viewpoint.stochastic,this.material.needsUpdate=!0}else this.uniforms.numSplats.value=0,this.uniforms.packedSplats.value=LA.getEmpty(),this.geometry=_t}update({scene:A,viewToWorld:n}){const t=this.matrixWorld.clone();this.preUpdate?this.updateInternal({scene:A,originToWorld:t,viewToWorld:n}):(this.pendingUpdate={scene:A,originToWorld:t},setTimeout(()=>{if(this.pendingUpdate){const{scene:s,originToWorld:a}=this.pendingUpdate;this.pendingUpdate=null,this.updateInternal({scene:s,originToWorld:a,viewToWorld:n})}},1))}updateInternal({scene:A,originToWorld:n,viewToWorld:t}){var s;if(!this.canAllocAccumulator())return!1;n||(n=this.active.toWorld),t=t??n.clone();const a=this.time??this.clock.getElapsedTime(),i=a-(this.lastUpdateTime??a);this.lastUpdateTime=a;const r=this.active.mapping.reduce((h,u)=>(h.set(u.node,u),h),new Map),{generators:l,visibleGenerators:o,globalEdits:c}=this.compileScene(A);for(const h of l)(s=h.frameUpdate)==null||s.call(h,{object:h,time:a,deltaTime:i,viewToWorld:t,globalEdits:c});const g=new Set(o.map(h=>h.uuid));for(const h of l){const u=r.get(h),Q=h.generator&&g.has(h.uuid)?h.numSplats:0;(this.needsUpdate||h.generator!==(u==null?void 0:u.generator)||Q!==(u==null?void 0:u.count))&&h.updateVersion()}const I=!Wn({matrix1:n,matrix2:this.active.toWorld,maxDistance:this.originDistance}),B=this.needsUpdate||I||l.length!==r.size||l.some(h=>{var u;return h.version!==((u=r.get(h))==null?void 0:u.version)});this.needsUpdate=!1;let C=null;if(B){if(C=this.maybeAllocAccumulator(),!C)throw new Error("Unreachable");const h=!Wn({matrix1:n,matrix2:this.active.toWorld,maxDistance:1e-5,minCoorient:.99999}),E=o.map((m,x)=>{const D=r.get(m);return D?[m.version-D.version,D.base,m]:[Number.POSITIVE_INFINITY,m.version,m]}).sort((m,x)=>m[0]!==x[0]?m[0]-x[0]:m[1]-x[1]).map(([m,x,D])=>D),Q=E.map(m=>m.numSplats),{maxSplats:f,mapping:p}=C.splats.generateMapping(Q),y=E.map((m,x)=>{const{base:D,count:N}=p[x];return{node:m,generator:m.generator,version:m.version,base:D,count:N}});n.clone().invert().decompose(this.translateToAccumulator.value,this.rotateToAccumulator.value,new d),C.ensureGenerate(f),C.splats.splatEncoding={...this.splatEncoding},C.generateSplats({renderer:this.renderer,modifier:this.modifier,generators:y,forceUpdate:h,originToWorld:n}),C.splatsVersion=this.active.splatsVersion+1;const w=C.hasCorrespondence(this.active);C.mappingVersion=this.active.mappingVersion+(w?0:1),this.releaseAccumulator(this.active),this.active=C,this.prepareViewpoint()}return setTimeout(()=>{for(const h of this.autoViewpoints)h.autoPoll({accumulator:C??void 0})},1),!0}compileScene(A){const n=[];A.traverse(a=>{a instanceof $n&&n.push(a)});const t=[];A.traverseVisible(a=>{a instanceof $n&&t.push(a)});const s=new Set;return A.traverseVisible(a=>{if(a instanceof oe){let i=a.parent;for(;i!=null&&!(i instanceof xn);)i=i.parent;i==null&&s.add(a)}}),{generators:n,visibleGenerators:t,globalEdits:Array.from(s)}}async renderEnvMap({renderer:A,scene:n,worldCenter:t,size:s=256,near:a=.1,far:i=1e3,hideObjects:r=[],update:l=!1}){var o,c;if(this.envViewpoint||(this.envViewpoint=this.newViewpoint({sort360:!0})),!q.cubeRender||q.cubeRender.target.width!==s||q.cubeRender.near!==a||q.cubeRender.far!==i){q.cubeRender&&q.cubeRender.target.dispose();const h=new Xe(s,{format:$A,generateMipmaps:!0,minFilter:je}),u=new Oe(a,i,h);q.cubeRender={target:h,camera:u,near:a,far:i}}q.pmrem||(q.pmrem=new Ve(A??this.renderer));const g=new DA().setPosition(t);await((o=this.envViewpoint)==null?void 0:o.prepare({scene:n,viewToWorld:g,update:l}));const{target:I,camera:B}=q.cubeRender;B.position.copy(t);const C=new Map;for(const h of r)C.set(h,h.visible),h.visible=!1;this.prepareViewpoint(this.envViewpoint),B.update(A??this.renderer,n),this.prepareViewpoint(this.defaultView);for(const[h,u]of C.entries())h.visible=u;return(c=q.pmrem)==null?void 0:c.fromCubemap(I.texture).texture}recurseSetEnvMap(A,n){A.traverse(t=>{if(t instanceof On)if(Array.isArray(t.material))for(const s of t.material)s instanceof Bt&&(s.envMap=n);else t.material instanceof Bt&&(t.material.envMap=n)})}getRgba({generator:A,rgba:n}){const t=this.active.mapping.find(({node:s})=>s===A);if(!t)throw new Error("Generator not found");return n=n??new Na,n.fromPackedSplats({packedSplats:this.active.splats,base:t.base,count:t.count,renderer:this.renderer}),n}async readRgba({generator:A,rgba:n}){return n=this.getRgba({generator:A,rgba:n}),n.read()}};Nn.cubeRender=null;Nn.pmrem=null;Nn.EMPTY_SPLAT_TEXTURE=new Ge;let pe=Nn;const _t=new nt(new Uint32Array(1),0);mA({packedSplats:Mn,index:"int"},{gsplat:U},({packedSplats:e,index:A})=>{if(!e||!A)throw new Error("Invalid input");return{gsplat:rn(e,A)}});function Ci(e){if(e.length===0)return null;const A=new d,n=new $,t=new d,s=[],a=[];for(const i of e)i.decompose(A,n,t),s.push(A),a.push(n);return new DA().compose(ta(s),ea(a),new d(1,1,1))}j(`
  struct GsplatSkinning {
    int numSplats;
    int numBones;
    usampler2DArray skinTexture;
    sampler2D boneTexture;
  };
`);j(`
  void applyGsplatSkinning(
    int numSplats, int numBones,
    usampler2DArray skinTexture, sampler2D boneTexture,
    int splatIndex, inout vec3 center, inout vec4 quaternion
  ) {
    if ((splatIndex < 0) || (splatIndex >= numSplats)) {
      return;
    }

    uvec4 skinData = texelFetch(skinTexture, splatTexCoord(splatIndex), 0);

    float weights[4];
    weights[0] = float(skinData.x & 0xffu) / 255.0;
    weights[1] = float(skinData.y & 0xffu) / 255.0;
    weights[2] = float(skinData.z & 0xffu) / 255.0;
    weights[3] = float(skinData.w & 0xffu) / 255.0;

    uint boneIndices[4];
    boneIndices[0] = (skinData.x >> 8u) & 0xffu;
    boneIndices[1] = (skinData.y >> 8u) & 0xffu;
    boneIndices[2] = (skinData.z >> 8u) & 0xffu;
    boneIndices[3] = (skinData.w >> 8u) & 0xffu;

    vec4 quat = vec4(0.0);
    vec4 dual = vec4(0.0);
    for (int i = 0; i < 4; i++) {
      if (weights[i] > 0.0) {
        int boneIndex = int(boneIndices[i]);
        vec4 boneQuat = vec4(0.0, 0.0, 0.0, 1.0);
        vec4 boneDual = vec4(0.0);
        if (boneIndex < numBones) {
          boneQuat = texelFetch(boneTexture, ivec2(2, boneIndex), 0);
          boneDual = texelFetch(boneTexture, ivec2(3, boneIndex), 0);
        }

        if ((i > 0) && (dot(quat, boneQuat) < 0.0)) {
          // Flip sign if next blend is pointing in the opposite direction
          boneQuat = -boneQuat;
          boneDual = -boneDual;
        }
        quat += weights[i] * boneQuat;
        dual += weights[i] * boneDual;
      }
    }

    // Normalize dual quaternion
    float norm = length(quat);
    quat /= norm;
    dual /= norm;
    vec3 translate = vec3(
      2.0 * (-dual.w * quat.x + dual.x * quat.w - dual.y * quat.z + dual.z * quat.y),
      2.0 * (-dual.w * quat.y + dual.x * quat.z + dual.y * quat.w - dual.z * quat.x),
      2.0 * (-dual.w * quat.z - dual.x * quat.y + dual.y * quat.x + dual.z * quat.w)
    );

    center = quatVec(quat, center) + translate;
    quaternion = quatQuat(quat, quaternion);
  }
`);new it(new d(-1,-1,-1),new d(1,1,1)),new d(-1,-3,1).normalize(),new YA(1,1,1),new YA(.5,.5,1),new d(1,1,1);new it(new d(-2,-1,-2),new d(2,5,2)),new d(0,-1,0),new YA(1,1,1),new YA(.25,.25,.5),new d(.1,1,.1);const ye=class st{static createButton(A,n={}){const t=navigator.xr;if(!t)return null;const s=t,a=document.createElement("button");A.xr.enabled=!0,A.xr.setReferenceSpaceType("local");function i(){let g=null;async function I(h){console.log("onSessionStarted"),h.addEventListener("end",B),await A.xr.setSession(h),a.textContent="EXIT VR",g=h}function B(){console.log("onSessionEnded"),g==null||g.removeEventListener("end",B),a.textContent="ENTER VR",g=null}a.style.display="",a.style.cursor="pointer",a.style.left="calc(50% - 100px)",a.style.width="200px",a.style.height="100px",a.textContent="ENTER VR";const C={...n,optionalFeatures:[...n.optionalFeatures||[]]};a.onmouseenter=()=>{a.style.opacity="1.0"},a.onmouseleave=()=>{a.style.opacity="0.5"},a.onclick=()=>{g===null?(console.log("requesting session"),s.requestSession("immersive-vr",C).then(I)):(console.log("ending session"),g.end())}}function r(){a.style.display="none",a.style.cursor="auto",a.style.left="calc(50% - 75px)",a.style.width="150px",a.onmouseenter=null,a.onmouseleave=null,a.onclick=null}function l(){r(),a.textContent="VR NOT SUPPORTED"}function o(g){r(),console.warn("Exception when trying to call xr.isSessionSupported",g),a.textContent="VR NOT ALLOWED"}function c(g){g.style.position="absolute",g.style.bottom="20px",g.style.padding="12px 6px",g.style.border="1px solid #fff",g.style.borderRadius="4px",g.style.background="rgba(0,0,0,0.1)",g.style.color="#fff",g.style.font="normal 13px sans-serif",g.style.textAlign="center",g.style.opacity="0.5",g.style.outline="none",g.style.zIndex="999"}return a.id="VRButton",a.style.display="none",c(a),s.isSessionSupported("immersive-vr").then(g=>{g?i():l(),g&&st.xrSessionIsGranted&&a.click()}).catch(o),a}static registerSessionGrantedListener(){const A=navigator.xr;if(!A)return null;const n=A;/WebXRViewer\//i.test(navigator.userAgent)||n.addEventListener("sessiongranted",()=>{st.xrSessionIsGranted=!0})}};ye.xrSessionIsGranted=!1;let Ei=ye;Ei.registerSessionGrantedListener();var me=(e=>(e.w="wrist",e.t0="thumb-metacarpal",e.t1="thumb-phalanx-proximal",e.t2="thumb-phalanx-distal",e.t3="thumb-tip",e.i0="index-finger-metacarpal",e.i1="index-finger-phalanx-proximal",e.i2="index-finger-phalanx-intermediate",e.i3="index-finger-phalanx-distal",e.i4="index-finger-tip",e.m0="middle-finger-metacarpal",e.m1="middle-finger-phalanx-proximal",e.m2="middle-finger-phalanx-intermediate",e.m3="middle-finger-phalanx-distal",e.m4="middle-finger-tip",e.r0="ring-finger-metacarpal",e.r1="ring-finger-phalanx-proximal",e.r2="ring-finger-phalanx-intermediate",e.r3="ring-finger-phalanx-distal",e.r4="ring-finger-tip",e.p0="pinky-finger-metacarpal",e.p1="pinky-finger-phalanx-proximal",e.p2="pinky-finger-phalanx-intermediate",e.p3="pinky-finger-phalanx-distal",e.p4="pinky-finger-tip",e))(me||{});const fi=Object.keys(me);fi.length;new d(0,0,-1),new d(0,0,1),new d(-1,0,0),new d(1,0,0),new d(0,1,0),new d(0,-1,0);new d(0,0,-1),new d(0,0,1),new d(-1,0,0),new d(1,0,0),new d(0,1,0),new d(0,-1,0);new d(0,0,1),new d(0,0,-1);new d(0,-1,0),new d(0,1,0),new d(-1,0,0),new d(1,0,0);export{LA as P,pe as S,xn as a};
//# sourceMappingURL=spark-vendor-BLE3KzrL.js.map
